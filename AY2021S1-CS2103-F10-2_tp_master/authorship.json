[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-F10-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F10-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* Modduke is a integrated addressbook with scheduler functionalities targeted at NUS Students\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * as a one stop place to keep track of contact details related to NUS\u0027s modules e.g. Professors, project group mates"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * as a calendar to keep track of project meetings"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * as a calendar to keep track of consultations with professors"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* The project simulates an ongoing software project for a desktop application (called _ModDuke_) used for managing contact details and meetings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* It is named `Modduke` because it was initially created with similar functionality of the `Duke iP`, while modifying its functionality to suit NUS students."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* For the detailed documentation of this project, see the **[Modduke Product Website](https://ay2021s1-cs2103-f10-2.github.io/tp/)**."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* Our group is extending the functionality of the application to specifically serve NUS students managing many projects from different modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* This project is a **part of the se-education.org** initiative. If you would like to contribute code to this project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info.A"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "jerrylchong": 5,
      "EkamSinghPandher": 3,
      "nopenotj": 6,
      "-": 6,
      "royleochan": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "run {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    testCompile \"org.testfx:testfx-core:4.0.16-alpha\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    testCompile \u0027org.junit.jupiter:junit-jupiter-api:5.5.1\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    testCompile \"org.testfx:testfx-junit5:4.0.16-alpha\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    testCompile group: \u0027org.hamcrest\u0027, name: \u0027hamcrest\u0027, version: \u00272.1\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    testCompile \"org.testfx:openjfx-monocle:jdk-12.0.1+2\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    archiveName \u003d \u0027Modduke.jar\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 6,
      "-": 71,
      "royleochan": 5
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "### Ekam Singh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "\u003cimg src\u003d\"images/ekamsinghpandher.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "[[github](https://github.com/EkamSinghPandher)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[[portfolio](team/ekamsinghpandher.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* Role: Developer + Integration"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* Responsibilities: Ensures that different components of the project work well together."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "### Jay Chua"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003cimg src\u003d\"images/nopenotj.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "[[github](http://github.com/nopenotj)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "[[portfolio](team/nopenotj.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* Role: Testing + Developer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* Responsibilities: Ensures the testing of the project is done properly and on time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "### Jerryl Chong"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003cimg src\u003d\"images/jerrylchong.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[[github](http://github.com/jerrylchong)] [[portfolio](team/jerrylchong.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* Role: Deliverables and deadlines + Developer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* Responsibilities: Ensure project deliverables are done on time and in the right format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "### Roy Chan"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003cimg src\u003d\"images/royleochan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "[[github](http://github.com/royleochan)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "[[portfolio](team/royleochan.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* Role: Team Lead + Developer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* Responsibilities: Overall project coordination"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Goh Yee Loon"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003cimg src\u003d\"images/gloon99.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "[[github](http://github.com/gloon99)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[[portfolio](team/gloon99.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* Responsibilities: Documentation"
      }
    ],
    "authorContributionMap": {
      "gloon99": 4,
      "EkamSinghPandher": 5,
      "jerrylchong": 7,
      "nopenotj": 6,
      "-": 31,
      "royleochan": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `contact delete Alex Yeoh`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for any user input."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "![Interactions Inside the Logic Component](images/UserInputSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Given below are the Sequence Diagrams for the `execute(\"contact delete Alex Yeoh\")` API call."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "![Get resultant command sd for the `contact delete Alex Yeoh` Command](images/GetDeleteCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "![Execute command sd for the `contact delete Alex Yeoh` Command](images/ExecuteDeleteCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Autocomplete Feature"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "![Autocomplete Example](images/AutocompleteExample.gif)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "#### Overview"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "The following activity diagram gives a high level overview of the Autocomplete logic."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gloon99"
        },
        "content": "![AutocompleteActivityDiagram](images/AutocompleteActivityDiagram.png)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gloon99"
        },
        "content": "From this diagram we see that there is 2 states of the mechanism:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* `isAutocompleteMode` — Which is triggered after user has typed in `commandPrefix`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* `hasSetPrefix` — Set using `Tab` / `Shift-Tab` while in autocomplete mode."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "There are also 2 other important terms which are used, first of which is the `commandPrefix`. This refers to the specific series of characters that when the user inputs into a TextField, will trigger"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "the autocomplete mode. And secondly, `prefix` which refers to the string that will be used to generate the suggestions. In the image below, \"cn/\" is the `commandPrefix` while"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\"alex\" is the `prefix`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "![CommandPrefixVsPrefix](images/CommandPrefixVsPrefix.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "#### Structure of Autocomplete"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "The autocomplete mechanism is facilitated by `AutocompleteModule` which can be attached to a JavaFX `TextField`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "An instance of `AutocompleteModule` will must be binded to one `TextField` object which will be enhanced with Autocomplete capabilities."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "`AutocompleteModule` will setup the relevant listeners to its attached `TextField` object and will internally store and managed the `isAutocompleteMode` and `hasSetPrefix` states."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "This feature also makes use of the `Suggestions` class to facilitate suggestion generation based on given `prefix`. Below is a class diagram representing this structure."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "![Structure of the UI Component](images/AutocompleteClassDiagram.png)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "This new feature exposes 2 new public function of `AutocompleteModule` :"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* `attachTo(TextField textField)` — This method attaches the given `TextField` with the autocomplete module and returns the new `AutocompleteModule` object."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* `addSuggestions(String commandPrefix, Suppler\u003cList\u003cStrings\u003e\u003e data)` — Attaches a new autocomplete trigger which triggers autocomplete mode with `commandPrefix` and generates suggestions from `data` supplier."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Now we can do a deeper dive into the mechanisms of the feature by examining a sample usuage."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "#### Deep Dive : Autocomplete Mechanism"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Given below is an example usage scenario and how the autocomplete mechanism behaves at each step."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Initialization"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Sample Initialisation Code Snippet :"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "// In MainWindow.java"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "CommandBox commandBox \u003d new CommandBox(cmdExecutor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "TextField commandTextField \u003d commandBox.getCommandTextField()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "AutocompleteModule acMod \u003d AutocompleteModule.attachTo(commandTextField);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "acMod.addSuggestions(\"cname/\", () -\u003e List.of(\"Alice\", \"Bob\", \"Charlie\")).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "The above code first initialises a sample `CommandBox` object from which we extract out it\u0027s `TextField` object. We then proceed to attach the `AutocompleteModule` to the `TextField` object"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "and add a sample `Suggestions` object (with commandPrefix \"cname/\" and generating suggestions from an arbitary list)."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Below is a sequence diagram explaining how a `AutocompleteModule` enhances the `TextField` object."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gloon99"
        },
        "content": "![AutocompleteActivityDiagram](images/AutocompleteInitializationSequenceDiagram.png)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Refer to the Side Note in this section on why `disableFocusTraversal()` is required."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Triggering Autocomplete Mode"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "With the autocomplete module has been attached, Autocomplete mode will be triggered when the last few characters in the `TextField` matches the command prefix. In this case its `cname/`, and upon typing this prefix"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gloon99"
        },
        "content": "the command box text will turn yellow signalling that the user is in autocomplete mode. In this mode, anything the user types after the command prefix till the point the user presses `TAB` will be"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "considered the `prefix` that will be used to generate suggestions. After `TAB` pressed, prefix is set and first suggestions is shown. Pressing `TAB` or `Shift-TAB` will allow users to cycle through the suggestions forward and backward respectively."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Below is the sequence diagram for this flow."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gloon99"
        },
        "content": "![AutocompleteActivityDiagram](images/AutocompleteFlowSequenceDiagram.png)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Exiting Autocomplete Mode"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gloon99"
        },
        "content": "There are two ways to exit autocomplete mode : by pressing `Enter` or `Backspace`. Below\u0027s sequence diagram illustrates the difference between the two."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gloon99"
        },
        "content": "![AutocompleteActivityDiagram](images/AutocompleteExitFlowSequenceDiagram0.png)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gloon99"
        },
        "content": "![AutocompleteActivityDiagram](images/AutocompleteExitFlowSequenceDiagram1.png)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gloon99"
        },
        "content": "From the diagram, we see that pressing `backspace` only unsets the prefix but does not take the user out of the autocomplete mode, allowing user to adjust their prefix to generate more accurate suggestions."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gloon99"
        },
        "content": "On the other hand, pressing `Enter` allows the user to lock in their suggestion, taking user out of the autocomplete mode and removing the command prefix."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Aspect: Autocomplete Trigger"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* **Alternative 1 (current choice):** Check substring from caret position"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Pros: Able to support names with spaces."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gloon99"
        },
        "content": "      * Slightly more difficult to implement, as there are more edge cases."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "      * User can only enter autocomplete mod at the end of strings and not in the middle."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* **Alternative 2:** Using regex to match pattern (e.g. `.*\u003cCMD_PREFIX\u003e\\S*`)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gloon99"
        },
        "content": "      * Less complex code. (Lesser Conditionals)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gloon99"
        },
        "content": "      * Able to support moving caret around to adjust suggestion"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Cons: Unable to support names with spaces as space is the delimiter."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Side Note"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Because we iterate through autocompletion suggestions using `Tab` and `Shift-Tab` which conflicts with the inbuilt"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gloon99"
        },
        "content": "focus traversals commands. We have to disable it using the `AutocompleteCommandBox#DisableFocusTraversal()` operation."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "### Fuzzy Find Completion Feature (Fzf)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "![Fzf Example](images/FzfCompletionExample.gif)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "#### Overview"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "This feature is actually an improvement from autocomplete which was inspired from reading this [article](https://stackoverflow.com/questions/36861056/javafx-textfield-auto-suggestions)."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Having visual feedback and improving flexibility of the search were the focus of this feature, however despite serving similar purposes"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "we have decided to split this into two features because we want to position the `Autocomplete` feature as an entity-specific autocompletion, while our `Fuzzy Find` feature is a search-everywhere feature."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "The Fzf feature is facilitated by the `FzfModule` class which adopts the `TextField` module structure"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "similar to that in the `AutocompleteModule` class where we have the `FzfModule` class latching onto a TextField"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "enhancing it with Fzf capabilities. You can refer to the Autocomplete section to find out more, but to sum it up, upon attaching the module"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "to a given `textfield` instance, the module instance will attach the relevant listeners to the `textfield` and manage the logic and state of the feature."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "This new feature exposes 1 new public function of `FzfModule` :"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* `attachTo(TextField textField, Suppler\u003cList\u003cStrings\u003e\u003e data)` — This method attaches the given `TextField` with the fzf module together with a list supplier from which suggestions will be generated from and returns the new `FzfModule` object."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "You can refer to Autocomplete to better understand how text field modules work, this section will focus on the main difference between fzf and autocomplete."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "#### Autocomplete vs Fzf : The `query`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "_In this section `query` refers to the string that the users wishes to autocomplete / generate suggestions from._"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Besides the differences in trigger points and exit points, the biggest difference is how the query is being calculated. For the autocomplete"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "feature, the query is calculated from the caret position of the last character in the `commandPrefix` to the end of string."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "![ac query](./images/acQuery.png)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "This inevitably has some drawbacks which forces us to disallow autocompletion from the middle of the section. To support a truly dynamic `query` field,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "one would have to track the caret position of the start and end positions of the query, and would have to update the position accordingly to any given keystroke (e.g. Backspace or when user jumps the caret position)."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "However, thankfully for us JavaFx already supports such a component out of the box : `TextField`. Below is a sequence diagram showing how"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "`FzfModule` updates its query field using the `TextField` component."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "![FzfQuerySequenceDiagram](./images/FzfQuerySequenceDiagram.png)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "We see here that key strokes are \"forwarded\" to the query component while in fzf mode which allows query to be properly updated. This allows fzf mode to be"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "triggered anywhere in the text field. However, this design decision may come with some performance overhead."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "In the future, we are looking to create a stripped down the TextField component that is able to fulfill this functionality which will allow us to swap out this text field component to reduce any performance overhead."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Clearing all Contacts"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The mechanism to clear all contacts is facilitated by `ClearCommand`. It extends `Command` and implements the following methods:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* `ClearCommand#execute` - Clears the Selected Meeting and resets the AddressBook, ModuleBook and MeetingBook to a new empty AddressBook, ModuleBook and MeetingBook respectively."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gloon99"
        },
        "content": "This operation is exposed in the `LogicManager` class as `LogicManager#execute`."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Resetting the AddressBook"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Execution Code Snippet :"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "```"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "model.setSelectedMeeting(null);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "model.setMeetingBook(new MeetingBook());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "model.setModuleBook(new ModuleBook());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "```"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The above code snippet sets the AddressBook in the `model` to a new `AddressBook` object. Thus, resetting the AddressBook."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "As modules and meetings cannot exist without contacts, the code also sets the MeetingBook and ModuleBook in the `model`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "to a new `MeetingBook` and `ModuleBook` object respectively, which resets both books. As there are no existing meetings,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "the SelectedMeeting is set to `null`."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Given below are the sequence diagrams of how the mechanism behaves when called using the `contact clear` command."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "![GetClearSequenceCommandDiagram](images/GetClearCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "![ExecuteClearSequenceCommandDiagram](images/ExecuteClearCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Listing all Contacts"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The mechanism to list all contacts is facilitated by `ListCommand`. It extends `Command` and implements the following methods:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `ListCommand#execute` - Displays all Persons in the AddressBook."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gloon99"
        },
        "content": "This operation is exposed in the `LogicManager` class as `LogicManager#execute`."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Displaying all Persons in Modduke"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Execution Code Snippet :"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The above code snippet updates the `FilteredList` of Persons in the `model` using the `PREDICATE_SHOW_ALL_PERSONS`. This fills the `FilteredList` with all Persons in the AddressBook and displays it."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Given below are the sequence diagrams of how the mechanism behaves when called using the `contact list` command."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "![GetListSequenceCommandDiagram](images/GetListCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "![ExecuteListSequenceCommandDiagram](images/ExecuteListCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Deleting Contacts"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The mechanism to delete contacts is facilitated by `DeleteCommand`. It extends `Command` and implements the following methods:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `DeleteCommand#execute` - Deletes Persons in the AddressBook according to the user input."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "gloon99"
        },
        "content": "This operation is exposed in the `LogicManager` class as `LogicManager#execute`."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Parsing the User Input"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The parsing of user input for `DeleteCommand` is facilitated by `DeleteCommandParser`. It extends `Parser` and implements the following methods:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `DeleteCommandParser#parse` - Parses the user input and returns the appropriate DeleteCommand"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Checking for Argument Prefixes"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Code Snippet :"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "gloon99"
        },
        "content": "if (arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TAG, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    // implementation"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gloon99"
        },
        "content": "} else if (arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    // implementation"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "gloon99"
        },
        "content": "} else if (arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    // implementation"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "gloon99"
        },
        "content": "} else if (arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    // implementation"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "gloon99"
        },
        "content": "} else if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    // implementation"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gloon99"
        },
        "content": "} else if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    // implementation"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "gloon99"
        },
        "content": "} else if (arePrefixesPresent(argMultimap, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    // implementation"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "gloon99"
        },
        "content": "} else {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The above code snippet will check the prefixes present in the argument. It starts by checking if all valid prefixes are present,"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "gloon99"
        },
        "content": "then a combination of 2 prefixes, then lone prefixes and throws a `ParseException` if there are no prefixes present."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Choosing a Predicate"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "gloon99"
        },
        "content": "In order to find the Persons in the AddressBook who match the given arguments, `DeleteCommandParser` will pass the appropriate Predicate into"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`DeleteCommand`. These are Predicates available and the code snippets of their `test` methods:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `FullNameMatchesKeywordPredicate` - Finds Persons whose full names match the given arguments following the `n/` prefix"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "gloon99"
        },
        "content": "return keywords.stream()"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        .anyMatch(keyword -\u003e person.getName().fullName.toLowerCase().equals(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `PersonHasTagsPredicate` - Finds Persons who have the tags that match the given arguments following the `t/` prefix"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "gloon99"
        },
        "content": "return tags.stream()"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        .anyMatch(tag -\u003e person.getTags().contains(tag));"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `PersonHasTagsAndNamePredicate` - Finds Persons whose full names match the given arguments following the `n/` prefix or have the tags that match the given arguments following the `t/` prefix"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "gloon99"
        },
        "content": "return names.stream()"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        .anyMatch(keyword -\u003e person.getName().fullName.toLowerCase().equals(keyword.toLowerCase()))"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        ||"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        tags.stream()"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        .anyMatch(tag -\u003e person.getTags().contains(tag));"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Checking if Person is in a Module"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "gloon99"
        },
        "content": "In order to find Persons who are in the given Modules, a List of `ModuleNames` is passed into the `DeleteCommand` by the `DeleteCommandParser`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Then the `DeleteCommand#execute` method calls `model#GetUpdatedFilteredPersonList` with its `predicate` and the List to retrieve Persons in the give Modules."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Retrieving Modules Code Snippet :"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "gloon99"
        },
        "content": "List\u003cModule\u003e moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "gloon99"
        },
        "content": "for (ModuleName name : modules) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Module m \u003d moduleBook.getModule(name)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .orElseThrow(() -\u003e new CommandException("
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    String.format(\"Module %s does not exist.\", name.toString())));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    moduleList.add(m);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The above code snippet is from `ModelManager#GetUpdatedFilteredPersonList` and will look through the `moduleBook` for the given Module. If the Module exists, it adds it to the List module."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Combining Predicates Code Snippet :"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Predicate\u003cPerson\u003e combined \u003d x -\u003e predicate.test(x)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        || moduleList.stream()"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        .anyMatch(m -\u003e m.getClassmates().contains(x));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "gloon99"
        },
        "content": "return new FilteredList(filteredPersons, combined);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The above code snippet is from `ModelManager#GetUpdatedFilteredPersonList` and it creates a new `Predicate` that checks if a Person passes"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "gloon99"
        },
        "content": "the predicate passed into the method or is in any of the Modules in the List module. Then it uses this `Predicate` to obtain a `FilteredList`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "gloon99"
        },
        "content": "of Persons that satisfy the `Predicate`."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### No given Modules"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "gloon99"
        },
        "content": "If there are no given Modules, then the `DeleteCommand#execute` method calls `model#GetUpdatedFilteredPersonList` with its `predicate` only."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Obtaining FilteredList Code Snippet :"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "gloon99"
        },
        "content": "return new FilteredList(filteredPersons, predicate);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The above code snippet is from `ModelManager#GetUpdatedFilteredPersonList` and it will simply use the given `predicate` to"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "gloon99"
        },
        "content": "obtain a `FilteredList` of Persons that satisfy the `Predicate`."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Deleting the Filtered Persons"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Once the `DeleteCommand` has retrieved the `FilteredList` of Persons, it will delete all Persons in that `FilteredList` from Modduke."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Deleting Persons Code Snippet :"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "gloon99"
        },
        "content": "people.stream().forEach(p -\u003e {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    model.deletePerson(p); // delete in AddressBook"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    model.updatePersonInMeetingBook(p); // delete in MeetingBook"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    model.updatePersonInModuleBook(p); // delete in ModuleBook"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "gloon99"
        },
        "content": "});"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The above code snippet will iterate through all Persons in the `FilteredList` and delete them from the `AddressBook`, `MeetingBook` and `ModuleBook`."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "If any Meeting or Module does not have any more members as a result of this deletion, then they will be deleted as well."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "If a Module is deleted, all Meetings of that Module are also deleted."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Activity Diagram"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Given below is the activity diagram of how the mechanism behaves when called using the `contact delete` command."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "gloon99"
        },
        "content": "![DeleteActivityDiagram](images/DeleteActivityDiagram.png)"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Copying Email Address/Phone Number of Contacts"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The mechanism to copy information from contacts is facilitated by `CopyCommand`. It extends `Command` and implements the following methods:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `CopyCommand#execute` - Copy email addresses or phone numbers of Persons in the AddressBook according to the user input."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "gloon99"
        },
        "content": "This operation is exposed in the `LogicManager` class as `LogicManager#execute`."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Parsing the User Input"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The parsing of user input for `CopyCommand` is facilitated by `CopyCommandParser`. It extends `Parser` and implements the following methods:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `CopyCommandParser#parse` - Parses the user input and returns the appropriate CopyCommand"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The mechanism used to parse user input is very similar to that of `DeleteCommandParser`, except that `CopyCommandParser`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "gloon99"
        },
        "content": "also identifies the preamble in the arguments."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Identifying the Preamble"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Identifying Preamble Code Snippet :"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "gloon99"
        },
        "content": "boolean isEmail;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "gloon99"
        },
        "content": "String preamble \u003d argMultimap.getPreamble().trim().toLowerCase();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "gloon99"
        },
        "content": "if (preamble.equals(\"email\")) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    isEmail \u003d true;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "gloon99"
        },
        "content": "} else if (preamble.equals(\"phone\")) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    isEmail \u003d false;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "gloon99"
        },
        "content": "} else {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The above code snippet will check the preamble in the argument. It assigns the boolean `isEmail` to `true` if the user"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "gloon99"
        },
        "content": "wants to copy email addresses, `false` if the user wants to copy phone numbers and throws a `ParseException` otherwise."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Retrieving the Filtered Persons"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The mechanism used by `CopyCommand` to obtain the `FilteredList` of Persons is identical to that of `DeleteCommand`."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Copying Information from the Filtered Persons"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Once the `CopyCommand` has retrieved the `FilteredList` of Persons, it will copy information from all Persons in that `FilteredList` from Modduke."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Obtaining Information from Persons Code Snippet :"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "gloon99"
        },
        "content": "if (isEmail) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    // gets email addresses from Persons in people"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    results \u003d people.stream()"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .map(p -\u003e p.getEmail().toString())"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .reduce(\"\", (x, y) -\u003e x + \" \" + y);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "gloon99"
        },
        "content": "} else {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    // gets phone numbers from Persons in people"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    results \u003d people.stream()"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .map(p -\u003e p.getPhone().toString())"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .reduce(\"\", (x, y) -\u003e x + \" \" + y);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The above code snippet will check if the user wants to copy email adresses or phone numbers using the `isEmail` boolean."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Then it iterates through the `FilteredList` of Persons and obtains the relavant information as Strings. Then it combines"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "gloon99"
        },
        "content": "the Strings into a single String."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Copying Information to Clipboard Code Snippet :"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "gloon99"
        },
        "content": "StringSelection selection \u003d new StringSelection(results);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Clipboard clipboard \u003d Toolkit.getDefaultToolkit().getSystemClipboard();"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "gloon99"
        },
        "content": "clipboard.setContents(selection, selection);"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The above code snippet will then create a new `StringSelection` object using the single String of information and copy"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "gloon99"
        },
        "content": "the `StringSelection` into the user\u0027s system clipboard."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Activity Diagram"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Given below is the activity diagram of how the mechanism behaves when called using the `copy` command."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "gloon99"
        },
        "content": "![CopyActivityDiagram](images/CopyActivityDiagram.png)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Finding Contacts"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The mechanism to find contacts is facilitated by `FindCommand`. It extends `Command` and implements the following methods:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `FindCommand#execute` - Display Persons in the AddressBook according to the user input."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "gloon99"
        },
        "content": "This operation is exposed in the `LogicManager` class as `LogicManager#execute`."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Parsing the User Input"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The parsing of user input for `FindCommand` is facilitated by `FindCommandParser`. It extends `Parser` and implements the following methods:"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `FindCommandParser#parse` - Parses the user input and returns the appropriate FindCommand"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The mechanism used to parse user input is very similar to that of `DeleteCommandParser`, except that `FindCommandParser`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "gloon99"
        },
        "content": "does not look for the `m/` prefix when parsing the arguments. So it does not pass a List of Modules into the `FindCommand`."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "It also uses the `NameContainsKeywordPredicate` and `PersonHasTagsAndKeywordInNamePredicate` instead."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Displaying the Filtered Persons"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "gloon99"
        },
        "content": "In order to display the Filtered Persons, the `FindCommand` calls `model#updateFilteredPersonList` with its `predicate`."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Update Filtered Person List Code Snippet :"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "gloon99"
        },
        "content": "filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The above code snippet is from `ModelManager#updateFilteredPersonList` and it sets predicate of the `filteredPersons` of the model"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "gloon99"
        },
        "content": "to the given predicate. Doing so will display the Persons who satisfy the conditions specified in the user input."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Activity Diagram"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Given below is the activity diagram of how the mechanism behaves when called using the `contact find` command."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "gloon99"
        },
        "content": "![FindActivityDiagram](images/FindActivityDiagram.png)"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "### Tagging Contacts"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "The mechanism to tag contacts is facilitated by `AddTagCommand`, `ClearTagCommand` and `DeleteTagCommand`. They"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "gloon99"
        },
        "content": "extends `Command` and implement the following methods:"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* `AddTagCommand#execute` - Adds the specified tags to the specified Person in the AddressBook according to the user input."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* `ClearTagCommand#execute` - Clears all tags of the specified Person in the AddressBook in the user input."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* `DeleteTagCommand#execute` - Deletes the specified tags from the specified Person in the AddressBook according to the user input."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "gloon99"
        },
        "content": "These operations are exposed in the `LogicManager` class as `LogicManager#execute`."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Parsing User Input"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "The parsing of user input for `AddTagCommand`, `ClearTagCommand` and `DeleteTagCommand` is facilitated by"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "`AddTagCommandParser`, `ClearTagCommandParser` and `DeleteTagCommandParser` respectively. They extend `Parser`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "gloon99"
        },
        "content": "and implement the following methods:"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* `AddTagCommandParser#parse` - Parses the user input and returns the appropriate AddTagCommand"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* `ClearTagCommandParser#parse` - Parses the user input and returns the appropriate ClearTagCommand"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* `DeleteTagCommandParser#parse` - Parses the user input and returns the appropriate DeleteTagCommand"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "All three parsers are identical except that they return their respective commands and `AddTagCommandParser` and `DeleteTagCommandParser`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "gloon99"
        },
        "content": "parses for the `t/` prefix in the arguments."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Obtaining a Name Object"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "gloon99"
        },
        "content": "All three parsers call `ParserUtil#parseName` to obtain a `Name` object based on the given name in the user input."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "`AddTagCommandParser` and `DeleteTagCommandParser` pass in the preamble of the argument into `ParserUtil#parseName`,"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "while `ClearTagCommandParser` passes in the entire argument."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Parse Name Code Snippet :"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "gloon99"
        },
        "content": "String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "gloon99"
        },
        "content": "if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "gloon99"
        },
        "content": "return new Name(trimmedName);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The above code snippet if from `ParserUtil#parseName` and it will check if the given name is in a valid format. If it is"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "gloon99"
        },
        "content": "it creates and returns a new `Name` object with the given name. Otherwise, it throws a `ParseException`. This `Name` object"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "gloon99"
        },
        "content": "is passed into the respective command object that will be returned by each parser."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Obtaining a List of Tags"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "This is only applicable to `AddTagCommandParser` and `DeleteTagCommandParser`. Both parsers obtain a List of"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Strings that follow the `t/` prefix from the argument. Then it obtains a Set of Tags Strings."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Obtaining Set of Tag Strings Code Snippet:"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "gloon99"
        },
        "content": "if (tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\")) {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    return Optional.empty();"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Collection\u003cString\u003e tagSet \u003d tags;"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "gloon99"
        },
        "content": "return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The above code snippet checks for an empty String in the List of Strings. If it has an empty String, then it returns"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "gloon99"
        },
        "content": "an empty `Optional` object. Otherwise, it returns an `Optional` of the Set with the Strings in the given List."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Then both parsers check if the `Optional` object is empty. If it is, a `ParseException` is thrown. Otherwise, `AddTagCommandParser`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "passes the Set of Strings inside the `Optional` into a `TagPersonDescriptor` which is passed into the `AddTagCommand`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "while `DeleteTagCommandParser` passes the Set of Strings into the `DeleteCommand`. These commands are the commands"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "gloon99"
        },
        "content": "that will be returned by each parser respectively."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Modifying the Specified Person"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "`AddTagCommand`, `ClearTagCommand` and `DeleteTagCommand` will first check if there is a Person with the `Name` object"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "gloon99"
        },
        "content": "given by their parsers using `model#hasPersonName`. If there does not exist a Person, then a `CommandException` is thrown."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Otherwise, the Person with the name is obtained from the AddressBook. This Person is then modified by each command accordingly."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* `AddTagCommand` - Adds tags to the Person based on the `TagPersonDescriptor` given by `AddTagCommandParser`"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Adding Tags Code Snippet :"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e(personToTag.getTags());"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "if (tagPersonDescriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    updatedTags.addAll(tagPersonDescriptor.getTags().get());"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "return new Person(personToTag.getName(), personToTag.getPhone(), personToTag.getEmail(), updatedTags);"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* `ClearTagCommand` - Clears all tags of the Person"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "gloon99"
        },
        "content": "return new Person(personToClear.getName(), personToClear.getPhone(), personToClear.getEmail(), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* `DeleteTagCommand` - Deletes all tags from the Person based on the Set of Strings given by `DeleteTagCommandParser`."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Throws a `CommandException` if the Person does not have a specifed tag."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "gloon99"
        },
        "content": "if (tags.stream().allMatch(tag -\u003e personToEdit.getTags().contains(tag))) {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e(personToEdit.getTags());"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    updatedTags.removeAll(tags);"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(), updatedTags);"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "gloon99"
        },
        "content": "} else {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    throw new CommandException("
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            String.format(\"The person \u0027%s\u0027 does not have all the tags provided.\","
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    personToEdit.getName().toString()));"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Updating Modduke"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Once they have obtained the modified Person, they replace the original Person with the modified one in the `AddressBook`,"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`MeetingBook` and `ModuleBook`."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Updating Modduke Code Snippet :"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "model.setPerson(personToTag, taggedPerson);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "model.updatePersonInMeetingBook(personToTag, taggedPerson);"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "model.updatePersonInModuleBook(personToTag, taggedPerson);"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The above code snippet updates the Person in each of the three books."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Sequence Diagram"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Given below are the sequence diagrams of how the mechanism behaves when called using the `tag add` command."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "![GetAddTagCommandSequenceDiagram](images/GetAddTagCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "![ExecuteAddTagCommandSequenceDiagram](images/ExecuteAddTagCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Given below are the sequence diagrams of how the mechanism behaves when called using the `tag clear` command."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "![GetClearTagCommandSequenceDiagram](images/GetClearTagCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "![ExecuteClearTagCommandSequenceDiagram](images/ExecuteClearTagCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Given below are the sequence diagrams of how the mechanism behaves when called using the `tag delete` command."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "![GetDeleteTagCommandSequenceDiagram](images/GetDeleteTagCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "![ExecuteDeleteTagCommandSequenceDiagram](images/ExecuteDeleteTagCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "### Adding a Module"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The add module mechanism is primarily facilitated by `AddModuleCommand`. It extends `Command` and implements the `execute` operation:"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* `execute(Model model)` — Executes the `AddModuleCommand` on the model,"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "creating and adding a new meeting in the `Model Manager` before creating a `CommandResult`,"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "triggering a UI update in `ModuleListPanel`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "This operation is exposed in the Command class as `Command#execute`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "#### Parsing the user input"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The parsing of the user input for `AddModuleCommand` is facilitated by `AddModuleCommandParser`."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "`AddModuleCommandParser` extends Parser and implements the following methods:"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* AddModuleCommandParser#parse — Parses the user input and returns the appropriate `AddModuleCommand`"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "`AddModuleCommandParser` checks that all compulsory fields are provided in the user input and throws a `ParseException` if the user does not conform to the expected format."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The user input is the parsed in the context of the `AddModuleCommand`."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "#### Executing the user input"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "##### Check if model contains given module"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "`AddModuleCommand` checks if the model contains the given module. If so, a `CommandException` is thrown, indicating that the module already exists within the model."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "##### Check if model contains all participants"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "`AddModuleCommand` checks if the model also contains all the given participants. If not, a `Command exception` is thrown,"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "indicating that the one or more of the participants given do not exist within the model."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "#### Activity Diagram"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Given below is the activity diagram of how the logic component behaves when called using the `module add` command."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "![AddModuleActivityDiagram](images/AddModuleActivityDiagram.png)"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "### Editing a Module"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The edit module mechanism is primarily facilitated by `EditModuleCommand`. It extends `Command` and implements the `execute` operation:"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* `execute(Model model)` — Executes the `EditModuleCommand` on the model,"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "creating and adding a new meeting in the `Model Manager` before creating a `CommandResult`,"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "triggering a UI update in `ModuleListPanel`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "This operation is exposed in the Command class as `Command#execute`"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "#### Parsing the user input"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The parsing of the user input for `EditModuleCommand` is facilitated by `EditModuleCommandParser`."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "`EditModuleCommandParser` extends Parser and implements the following methods:"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* EditModuleCommandParser#parse — Parses the user input and returns the appropriate `EditModuleCommand`"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "`EditModuleCommandParser` checks that all compulsory fields are provided in the user input and throws a `ParseException` if the user does not conform to the expected format."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The user input is the parsed in the context of the `EditModuleCommand`."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "#### Executing the user input"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "##### Check if model contains given module"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "`EditModuleCommand` checks if the model contains the given module. If not, a `CommandException` is thrown, indicating that the module does not exist in the model."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "##### If the name of the module is changed, check if the new name already exists within the model"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The `EditModuleCommand` checks if the new name of the module already exists within the model to prevent duplicating modules."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "If it does, a `CommandException` is thrown indicating a duplicate module already exists within the model."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "##### If the participants of the module are changed, Check if the new participants exist in the model"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The `EditModuleCommand` checks if the new participants exist within the model. If not, a `CommandException` is thrown,"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "indicating that one or more of the participants do not exist within the model."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "##### Check if edited module is the same as original module"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The `EditModuleCommand` checks if the edited module is the same as the original module. If so, a `CommandException` is thrown,"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "indicating that the module is the same as the orignal module."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "##### Check if the modules relevant meetings have no participants"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The `EditModuleCommand` checks if the edited modules relevant meetings have no participants. For meetings with at least one of the new participants,"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "the participants are updated. For meetings with no participants, they are deleted."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "#### Activity Diagram"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Given below is the activity diagram of how the logic component behaves when called using the `module edit` command."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "![EditModuleActivityDiagram](images/EditModuleActivityDiagram.png)"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "###Deleting a Module"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The delete module mechanism is primarily facilitated by `DeleteModuleCommand`. It extends `Command` and implements the `execute` operation:"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* `execute(Model model)` — Executes the `DeleteModuleCommand` on the model,"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "creating and adding a new meeting in the `Model Manager` before creating a `CommandResult`,"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "triggering a UI update in `ModuleListPanel`. It also deletes the meetings of the provided module and triggers a UI update in the"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "`MeetingListPanel`"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "This operation is exposed in the Command class as `Command#execute`"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "#### Parsing the user input"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The parsing of the user input for `DeleteModuleCommand` is facilitated by `DeleteModuleCommandParser`."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "`DeleteModuleCommandParser` extends Parser and implements the following methods:"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* DeleteModuleCommandParser#parse — Parses the user input and returns the appropriate `DeleteModuleCommand`"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "`DeleteModuleCommandParser` checks that all compulsory fields are provided in the user input and throws a `ParseException` if the user does not conform to the expected format."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The user input is the parsed in the context of the `DeleteModuleCommand`."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "#### Executing the user input"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "##### Check if model contains given module"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "`DeleteModuleCommand` checks if the model contains the given module. If not, a `CommandException` is thrown, indicating that the module does not exist in the model."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "##### Deleting all meetings of the module"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "`DeleteModuleCommand` iterates through all the meetings of the module and deletes them along with the module."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "#### Activity Diagram"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Given below is the activity diagram of how the logic component behaves when called using the `module delete` command."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "![DeleteModuleActivityDiagram](images/DeleteModuleActivityDiagram.png)"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "### Listing Contacts in a Module"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The module list mechanism is primarily facilitated by the `ListModuleCommand`. It extends `Command` and implements the execute operation:"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* `execute(Model model)` — Executes the `ListModuleCommand` on the model,"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "creating and adding a new meeting in the `Model Manager` before creating a `CommandResult`,"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "triggering a UI update in `ContactListPanel`"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "This operation is exposed in the Command class as `Command#execute`"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "####Parsing the user input"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The parsing of the user input for `ListModuleCommand` is facilitated by `ListModuleCommandParser`."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "`ListModuleCommandParser` extends Parser and implements the following methods:"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* ListModuleCommandParser#parse — Parses the user input and returns the appropriate `ListModuleCommand`"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "`ListModuleCommandParser` checks that all compulsory fields are provided in the user input and throws a `ParseException` if the user does not conform to the expected format."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The user input is the parsed in the context of the `ListModuleCommand`."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "#### Executing the user input"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "##### Check if model contains given module"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "`ListModuleCommand` checks if the model contains the given module. If not, a `CommandException` is thrown."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "#### Activity Diagram"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Given below is the activity diagram of how the logic component behaves when called using the `module list` command."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "![ListModuleActivityDiagram](images/ListModuleActivityDiagram.png)"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Adding a Meeting"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The add meeting mechanism is primarily facilitated by `AddMeetingCommand`. It extends `Command` and implements the `execute` operation:"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `execute(Model model)` — Executes the `AddMeetingCommand` on the model,"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "gloon99"
        },
        "content": "creating and adding a new meeting in the `Model Manager` before creating a `CommandResult`,"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "gloon99"
        },
        "content": "triggering a UI update in `MeetingListPanel`"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "gloon99"
        },
        "content": "This operation is exposed in the Command class as `Command#execute`"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Parsing the user input"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The parsing of the user input for `AddMeetingCommand` is facilitated by `AddMeetingCommandParser`."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`AddMeetingCommandParser` extends Parser and implements the following methods:"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* AddMeetingCommandParser#parse — Parses the user input and returns the appropriate `AddMeetingCommand`"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`AddMeetingCommandParser` checks that all compulsory fields are provided in the user input and throws a `ParseException` if the user does not conform to the expected format."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The user input is the parsed in the context of the `AddMeetingCommand`."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Executing the user input"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Check if model contains given module"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`AddMeetingCommand` checks if the model contains the given module. If not, a `CommandException` is thrown, indicating that the module does not exist in the model."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Check if model contains given meeting"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`AddMeetingCommand` checks if the model contains the given meeting, identified by the unique combination of module and meeting name."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Meetings are identified by their modules and names for deletion, editing and viewing."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "gloon99"
        },
        "content": "If the given meeting already exists in the model, a `CommandException` is thrown, indicating that the user is trying to add a duplicate meeting."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Check if model contains another meeting at same date and time"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`AddMeetingCommand` checks if the model contains another meeting at the same time and date as the given meeting."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "gloon99"
        },
        "content": "We assume that a user is unable to attend two meetings simultaneously at the same time and date."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "gloon99"
        },
        "content": "If there is another meeting with conflicting time and date, a `CommandException` is thrown."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Check if given module contains given participants"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`AddMeetingCommand` checks if the given participants are members of the given module."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "gloon99"
        },
        "content": "We assume that all meetings occur between members of the same module."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "gloon99"
        },
        "content": "If any one of the given participants are not members of the given module, a `CommandException` is thrown."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Activity Diagram"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Given below is the activity diagram of how the logic component behaves when called using the `meeting add` command."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "gloon99"
        },
        "content": "![AddMeetingActivityDiagram](images/AddMeetingActivityDiagram.png)"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Deleting a Meeting"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The delete meeting mechanism is primarily facilitated by `DeleteMeetingCommand`. It extends `Command` and implements the `execute` operation:"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `execute(Model model)` — Executes the `DeleteMeetingCommand` on the model,"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "gloon99"
        },
        "content": "creating and adding a new meeting in the `Model Manager` before creating a `CommandResult`,"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "gloon99"
        },
        "content": "triggering a UI update in `MeetingListPanel`"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "gloon99"
        },
        "content": "This operation is exposed in the Command class as `Command#execute`"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Parsing the user input"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The parsing of the user input for `DeleteMeetingCommand` is facilitated by `DeleteMeetingCommandParser`."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`DeleteMeetingCommandParser` extends Parser and implements the following methods:"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* DeleteMeetingCommandParser#parse — Parses the user input and returns the appropriate `DeleteMeetingCommand`"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`DeleteMeetingCommandParser` checks that all compulsory fields are provided in the user input and throws a `ParseException` if the user does not conform to the expected format."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The user input is the parsed in the context of the `DeleteMeetingCommand`."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Executing the user input"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Check if model contains given module"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`DeleteMeetingCommand` checks if the model contains the given module. If not, a `CommandException` is thrown, indicating that the module does not exist in the model."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Check if model contains given meeting"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`DeleteMeetingCommand` checks if the model contains the given meeting, identified by the unique combination of module and meeting name."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "gloon99"
        },
        "content": "If the given meeting does not exist in the model, a `CommandException` is thrown, indicating that the user is trying delete a non existent meeting."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Activity Diagram"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Given below is the activity diagram of how the logic component behaves when called using the `meeting delete` command."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "gloon99"
        },
        "content": "![DeleteMeetingActivityDiagram](images/DeleteMeetingActivityDiagram.png)"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Editing a Meeting"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The edit meeting mechanism is primarily facilitated by `EditMeetingCommand`. It extends `Command` and implements the `execute` operation:"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `execute(Model model)` — Executes the `EditMeetingCommand` on the model,"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "gloon99"
        },
        "content": "creating and adding a new meeting in the `Model Manager` before creating a `CommandResult`,"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "gloon99"
        },
        "content": "triggering a UI update in `MeetingListPanel`"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "gloon99"
        },
        "content": "This operation is exposed in the Command class as `Command#execute`"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Parsing the user input"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The parsing of the user input for `EditMeetingCommand` is facilitated by `EditMeetingCommandParser`."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`EditMeetingCommandParser` extends Parser and implements the following methods:"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* EditMeetingCommandParser#parse — Parses the user input and returns the appropriate `EditMeetingCommand`"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`EditMeetingCommandParser` checks that all compulsory fields are provided in the user input and throws a `ParseException` if the user does not conform to the expected format."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The user input is the parsed in the context of the `EditMeetingCommand`."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Executing the user input"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Check if model contains given module"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`EditMeetingCommand` checks if the model contains the given module. If not, a `CommandException` is thrown, indicating that the module does not exist in the model."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Check if model contains given meeting"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`EditMeetingCommand` checks if the model contains the given meeting, identified by the unique combination of module and meeting name."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "gloon99"
        },
        "content": "If the given meeting does not exist in the model, a `CommandException` is thrown, indicating that the user is trying to edit a non existent meeting."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Check if model contains edited meeting"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`EditMeetingCommand` checks if the model contains the edited meeting, identified by the unique combination of module and meeting name."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "gloon99"
        },
        "content": "If the edited meeting exists in the model, a `CommandException` is thrown, indicating that the user is trying to edit the meeting into a meeting that already exists."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Check if model contains another meeting at same date and time"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`EditMeetingCommand` checks if the model contains another meeting at the same time and date as the edited meeting."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "gloon99"
        },
        "content": "We assume that a user is unable to attend two meetings simultaneously at the same time and date."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "gloon99"
        },
        "content": "If there is another meeting with conflicting time and date, a `CommandException` is thrown."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "gloon99"
        },
        "content": "##### Check if given module contains given participants"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`EditMeetingCommand` checks if the edited participants are members of the given module."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "gloon99"
        },
        "content": "We assume that all meetings occur between members of the same module."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "gloon99"
        },
        "content": "If any one of the edited participants are not members of the given module, a `CommandException` is thrown."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### Activity Diagram"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Given below is the activity diagram of how the logic component behaves when called using the `meeting edit` command."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "gloon99"
        },
        "content": "![EditMeetingActivityDiagram](images/EditMeetingActivityDiagram.png)"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "gloon99"
        },
        "content": "#### EditMeetingDescriptor"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`EditMeetingDescriptor` is a nested class within EditMeetingCommand to facilitate the creation of the edited meeting."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "gloon99"
        },
        "content": "It stores the details to edit the meeting with and each non-empty field value will replace the corresponding field value of the given meeting."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "royleochan"
        },
        "content": "### Viewing a Specific Meeting\u0027s Agendas and Notes"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "royleochan"
        },
        "content": "![MeetingViewExample](images/MeetingViewExample.gif)"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "royleochan"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "royleochan"
        },
        "content": "The mechanism to view a specific meeting\u0027s agendas and notes is primarily facilitated by the `ViewMeetingCommand`. It"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "royleochan"
        },
        "content": "extends `Command` and implements the `execute` operation:"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "royleochan"
        },
        "content": "• `execute(Model model)` - Executes the ViewMeetingCommand on the model, setting the selected meeting to update the"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "royleochan"
        },
        "content": "selected meeting field in the `ModelManager` before creating a `CommandResult` which triggers a UI update in"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "royleochan"
        },
        "content": " `MainWindow`."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "royleochan"
        },
        "content": " \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** Although the `ViewMeetingCommand` is the"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "royleochan"
        },
        "content": " main command to view the details of a selected meeting, other commands may also trigger UI updates for the selected"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "royleochan"
        },
        "content": " meeting. For example, if the module name of the currently selected meeting is updated using the `EditModuleCommand`,"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "royleochan"
        },
        "content": " a UI update will be triggered such that the changes will be reflected in the `MeetingDetailsPanel`."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "royleochan"
        },
        "content": " More details about this will be explained under design considerations."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "royleochan"
        },
        "content": " \u003c/div\u003e"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "royleochan"
        },
        "content": " As an illustration of the interactions between the different architectural components, given below is the sequence"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "royleochan"
        },
        "content": " diagram for the `meeting view m/CS2100 n/Report Discussion` command execution."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "royleochan"
        },
        "content": " ![ViewMeetingSequenceDiagram](images/ViewMeetingSequenceDiagram.png)"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "royleochan"
        },
        "content": "When the Logic signals that an update is required, the following method in `MainWindow` is invoked to update the"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "royleochan"
        },
        "content": "selected meeting user interface:"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "royleochan"
        },
        "content": "```"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public void updateSelectedMeeting() {"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    logger.info(\"UI update selected meeting triggered\");"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    if (logic.getSelectedMeeting() \u003d\u003d null \u0026\u0026 selectedMeetingPlaceholder.getChildren().size() \u003e 0) {"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        selectedMeetingPlaceholder.getChildren().remove(0);"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    if (logic.getFilteredMeetingList().size() !\u003d 0 \u0026\u0026 logic.getSelectedMeeting() !\u003d null) {"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        MeetingDetailsPanel selectedMeeting \u003d new MeetingDetailsPanel(logic.getSelectedMeeting(),"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                logic.getFilteredMeetingList().indexOf(logic.getSelectedMeeting()) + 1);"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (selectedMeetingPlaceholder.getChildren().size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            selectedMeetingPlaceholder.getChildren().set(0, selectedMeeting.getRoot());"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            selectedMeetingPlaceholder.getChildren().add(selectedMeeting.getRoot());"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "royleochan"
        },
        "content": "```"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Given below is the class diagram representing the structure of this implementation."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "royleochan"
        },
        "content": " ![ViewMeetingClassDiagram](images/ViewMeetingClassDiagram.png)"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "royleochan"
        },
        "content": "#### Design Considerations:"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "royleochan"
        },
        "content": "##### Ensuring the UI gets updated whenever information about the selected meeting changes"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "royleochan"
        },
        "content": "As mentioned earlier, the `SelectedMeeting` details can be changed whenever information pertaining to the meeting gets"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "royleochan"
        },
        "content": " deleted or edited. These are the following commands that can affect the `SelectedMeeting` details"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "royleochan"
        },
        "content": " (namely all edit and delete commands):"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* `DeleteCommand`"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* `EditCommand`"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* `DeleteMeetingCommand`"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* `EditMeetingCommand`"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* `DeleteModuleCommand`"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* `EditModuleCommand`"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Hence this feature is designed in such a way that whenever any of the above commands are executed, the Ui will be"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "royleochan"
        },
        "content": "updated accordingly if necessary."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Given below is the activity diagram which illustrates the workflow of this process:"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "royleochan"
        },
        "content": "![ViewMeetingActivityDiagram](images/ViewMeetingActivityDiagram.png)"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "royleochan"
        },
        "content": "##### Alternatives considered"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* **Alternative 1 (current choice):** Boolean flag `triggerUpdate` in `CommandResult`"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "royleochan"
        },
        "content": "      * Ease of implementation. (Simply set the flag to true for commands that need to update the Ui)"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "royleochan"
        },
        "content": "      * Ease of extension. (Can create additional boolean flags to update other parts of the Ui)"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "royleochan"
        },
        "content": "      * Need to be wary of all cases (Must remember to adjust relevant commands to set `triggerUpdate` to true)"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "royleochan"
        },
        "content": "      * If there are many different Ui components that wish to get updated separately, can end up having many boolean"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "royleochan"
        },
        "content": "      attributes in `CommandResult`"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* **Alternative 2:** JavaFX ObservableList"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "royleochan"
        },
        "content": "      * Built in support for robust observer design pattern. (Don\u0027t have to reinvent the wheel)"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "royleochan"
        },
        "content": "      * Using a list is not very suitable since `SelectedMeeting` is a single value."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "royleochan"
        },
        "content": "      * Only certain JavaFX views can be used with ObservableList."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Timeline Feature"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The mechanism to display the timeline window is facilitated by `TimelineWindow`, which extends `UiPart`."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The components `TimelineSection` and `TimelineMeetingCard` help display various sections in the timeline window."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "gloon99"
        },
        "content": "![TimelineWindowClassDiagram](images/TimelineWindowClassDiagram.png)"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The `ShowTimelineCommand` triggers the timeline window to be displayed."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "gloon99"
        },
        "content": "![ShowTimelineSequenceDiagram](images/ShowTimelineSequenceDiagram.png)"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "gloon99"
        },
        "content": "When the Logic signals that the `ShowTimelineCommand` has been triggered,"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "gloon99"
        },
        "content": "the following `handleShowTimeline` method in `MainWindow` is invoked to open the timeline window or focus on it if it is already opened."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public void handleShowTimeline() {"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    logger.info(\"UI show timeline triggered\");"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    if (!timelineWindow.isShowing()) {"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        timelineWindow.show();"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        timelineWindow.focus();"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Whenever an update has been made to the model that affects any of the components in timeline,"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "gloon99"
        },
        "content": "the following `updateTimeline` method in `MainWindow` is invoked."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public void updateTimeline() {"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    timelineWindow.hide();"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    timelineWindow \u003d timelineWindow.updateLogic(logic);"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "gloon99"
        },
        "content": "```"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The timeline window is hidden if it was open, and a new `TimelineWindow` object is created to match the new logic component."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "gloon99"
        },
        "content": "The following commands affect the `TimelineWindow`:"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `EditCommand`"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `DeleteCommand`"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `ClearCommand`"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `EditModuleCommand`"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `DeleteModuleCommand`"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `AddMeetingCommand`"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `EditMeetingCommand`"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `DeleteMeetingCommand`"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "### Theme switch feature"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "royleochan"
        },
        "content": "![ThemeSwitchExample](images/ThemeSwitchExample.gif)"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "royleochan"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "The mechanism to view switch to light theme is facilitated by `LightThemeCommand` while the mechanism to switch to dark theme is facilitated by `DarkThemeCommand`. Both"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "royleochan"
        },
        "content": "extends `Command` and implements the `execute` operation. Additionally, the theme switch can also be activated by the `F2` and `F3` keys or using the mouse to click the menu options."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Given below is the sequence diagram when the `light` command is entered. The dark command has the same sequence diagram except that light is replaced with dark and `setStylesheet(Themes.DARK_THEME)` is called instead of `setStylesheet(Themes.LIGHT_THEME)`."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "royleochan"
        },
        "content": "![SwitchThemeSequenceDiagram](images/SwitchThemeSequenceDiagram.png)"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Since the UI has 3 separate windows: MainWindow, HelpWindow and TimelineWindow, these windows need to check the current theme and select the right stylesheet to used. Given below is the sequence diagram when the `help` command is issued to illustrate how the help window selects the right theme. The other 2 windows follow similar logic."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "royleochan"
        },
        "content": "![HelpWindowActivityDiagram](images/HelpWindowActivityDiagram.png)"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "royleochan"
        },
        "content": "**Target user profile**"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Anybody → Students → University Students → NUS Students → NUS Students handling multiple projects"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* needs to keep track of contacts for various people (Professors, TA, Groupmates)"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* needs to schedule school-related appointments"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* needs to keep track of the date and time of school-related appointments"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* needs to keep track of details of school-related appointments"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "royleochan"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* seamless contact management which makes it easy to find relevant Professor, TA or Groupmates contacts"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* convenient scheduling of project meetings and consultations, making planning a work week effortless"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* effective visualisation of schedule and meeting details with the application\u0027s timeline dashboard and selected meeting panel"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* enhanced user experience with features such as autocompletion, fuzzy find, command history, copying and theme switching"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                                                                                                       | So that I can…​                                                                                                 |"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------ |"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| `* * *`  | New user                                   | See usage instructions                                                                                                   | Have easy reference when I forget how to use the App                                                               |"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| `* * *`  | NUS Student                                | Add contacts of people around me                                                                                         | Find them quickly and ensure that I don’t lose anyone\u0027s contact information                                        |"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| `* * *`  | NUS Student                                | Delete a contact                                                                                                         | Remove old or unwanted contacts                                                                                    |"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| `* * *`  | NUS Student                                | Edit an existing contact                                                                                                 | Change their contact details if it has changed                                                                     |"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| `* * *`  | NUS Student                                | View my entire list of contacts                                                                                          | Select who I want to contact                                                                                       |"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| `* * *`  | NUS Student                                | Clear all contacts                                                                                                       | Reset my contacts                                                                                                  |"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "| `* * *`  | NUS Student                                | Tag my contacts based on the individual\u0027s relationship with me (e.g. TA, Professor, Classmate)                           | Easily identify the contacts relevant to my query                                                                  |"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "| `* * *`  | NUS Student                                | Create meetings for events in my modules such as projects or consultations                                               | I can keep track of commitments and upcoming work                                                                  |"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "| `* * *`  | NUS Student                                | Add relevant contacts in a module to a meeting                                                                           | Keep track of who is participating in the meeting and their contact information                                    |"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| `* * *`  | Forgetful NUS Student                      | Assign a meeting a timeslot and date                                                                                     | Track exactly when I am supposed to meet                                                                           |"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| `* * *`  | NUS Student with many meetings             | View all scheduled meetings                                                                                              | Have an overview of all my meetings                                                                                |"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| `* * *`  | NUS Student with many meetings             | View agendas for meetings                                                                                                | Easily review agendas for my meetings                                                                              |"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| `* * *`  | NUS Student with many meetings             | View notes for meetings                                                                                                  | Take and access notes for my meetings                                                                              |"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "gloon99"
        },
        "content": "| `* * *`  | NUS Student with a changing schedule       | Edit meetings                                                                                                            | Change the details of my meetings                                                                                  |"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "gloon99"
        },
        "content": "| `* * *`  | NUS Student with a changing schedule       | Delete meetings                                                                                                          | Remove cancelled meetings                                                                                          |"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "gloon99"
        },
        "content": "| `* * *`  | NUS Student                                | Create meetings with professors                                                                                          | Track when I have set up meetings with professors and TA’s                                                         |"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| `* * *`  | NUS Student taking many modules            | Create modules                                                                                                           | Add new modules whenever needed                                                                                    |"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "| `* * *`  | NUS Student taking many modules            | Add contacts to a module                                                                                                 | Add my classmates contacts to my modules                                                                           |"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| `* * *`  | NUS Student taking many modules            | View relevant groups of contacts by modules                                                                              | I can easily keep track of contact details of individuals in different modules                                     |"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "| `* * *`  | NUS Student taking many modules            | Edit module details                                                                                                      | Edit the details of my modules and add new classmates details in when i meet them                                  |"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "| `* * *`  | NUS Student taking many modules            | View contacts based on module                                                                                            | Quickly view the contacts of all my classmates within the module                                                   |"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "| `* * *`  | NUS Student taking many modules            | Delete a module                                                                                                          | Delete the module and all meetings related to the module at the end of the semester                                |"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "| `* * `   | Lazy Typist                                | Be able to autocomplete my commands                                                                                      | Reduce time spent writing commands                                                                                 |"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "| `* * `   | Lazy Typist                                | Be able go back to previous commands if I need to repeat them                                                            | Reduce time spent writing commands                                                                                 |"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| `* * `   | User with easily strained eyes             | Switch between light and dark mode                                                                                       | Reduce eye strain when using the application during different times of the day                                     |"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| `*   `   | NUS Student                                | Hide private contact details                                                                                             | Minimize chances of someone else seeing them by accident                                                           |"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "royleochan"
        },
        "content": "| `*   `   | Student who likes to personalise stuff     | Customise the layout of the App                                                                                          | I can organise relevant information in personalised way that I find easy to access                                 |"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "(For all use cases below, the **System** is the `Modduke` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**UC01: Add a Contact**"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "1.  User requests to add a contact to the list"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "2.  Modduke adds the contact"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* 1a. Name, phone number or email field is missing."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * 1a1. Modduke shows an error message."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* 1b. Contact with the same name already exists."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * 1b1. Modduke shows an error message."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**UC02: Delete a Contact**"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "1.  User requests to list contacts"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "2.  Modduke shows a list of contacts"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "3.  User requests to delete contacts matching the given parameters in the list"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "4.  Modduke deletes the contacts"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* 3a. Any of the given parameters are invalid."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * 3a1. Modduke shows an error message."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**UC03: Edit a Contact**"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "1.  User requests to list contacts"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "2.  Modduke shows a list of contacts"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "3.  User requests to edit a specific contact in the list"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "4.  Modduke edits the contact"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* 3a. No optional field is provided."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * 3a1. Modduke shows an error message."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* 3b. The given name is invalid."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * 3b1. Modduke shows an error message."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**UC04: View Contacts**"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "1.  User requests to list contacts"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "2.  Modduke shows a list of contacts"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " "
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**UC05: Find Contacts**"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Same as View Contacts Use Case except only contacts that match the given parameters are listed."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**UC06: Tag a Contact**"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "1.  User requests to list contacts"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "2.  Modduke shows a list of contacts"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "3.  User requests to tag a specific contact in the list"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "4.  Modduke tags the contact"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* 3a. The given name is invalid."
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * 3a1. Modduke shows an error message."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* 3b. No tags are provided."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * 3b1. Modduke shows an error message."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    "
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**UC07: Delete Tags of a Contact**"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "1.  User requests to list contacts"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "2.  Modduke shows a list of contacts"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "3.  User requests to delete tags of a specific contact in the list"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "4.  Modduke deletes the specified tags of the contact"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* 3a. The given name is invalid."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * 3a1. Modduke shows an error message."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* 3b. No tags are provided."
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * 3b1. Modduke shows an error message."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**UC08: Clear all Contacts**"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "1.  User requests to clear all existing contacts."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "2.  Modduke deletes all existing contacts."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**UC09: Add Module**"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "1.  User makes request to add a module"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "2.  Modduke accepts request and creates module"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* 1a. Module Name or Participants are missing."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * 1a1. Modduke shows an error message."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    "
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* 1b. Given module already exists within Modduke"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * 1b1. Modduke shows an error message."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Use case ends    "
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* 1c. One or more of the given Participants do not exist in Modduke"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  "
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    * 1c1. Modduke shows an error message."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  "
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "      Use case ends"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "      "
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* 1d. Given module name is invalid"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  "
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    * 1d1. Modduke shows an error message."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  "
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "      Use case ends"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "      "
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**UC10: Edit Module**"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "1.  User makes request to edit a module"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "2.  Modduke accepts request and edits module"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "3.  Modduke updates Meetings of the module"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**Extensions**    "
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* 1a. Module Name is missing."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * 1a1. Modduke shows an error message."
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    "
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* 1b. Optional Fields (New name/ Participants) are missing."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * 1b1. Modduke shows an error message."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    "
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* 1c. Edited module already exists within Modduke"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  "
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * 1c1. Modduke shows an error message."
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    "
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* 1d. One or more of new Participants do not exist in Modduke"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  "
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * 1d1. Modduke shows an error message."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* 1e. Edited module name is invalid"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  "
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * 1e1. Modduke shows an error message."
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    "
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**UC11: Delete Module**"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "1.  User makes request to delete a module"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "2.  Modduke accepts request and deletes module"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "3.  Modduke deletes all the meetings of the given module."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**Extensions**    "
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* 1a. Module Name is missing."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * 1a1. Modduke shows an error message."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  "
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* 1b. Provided module name does not exist in Modduke."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  "
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * 1b1. Modduke shows an error message."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  "
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "      Use case ends"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "      "
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**UC12: Module List**"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "1.  User makes request to list contacts of a module"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "2.  Modduke accepts request and lists contacts"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**Extensions**    "
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* 1a. Module Name is missing."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * 1a1. Modduke shows an error message."
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  "
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* 1b. Provided module name does not exist in Modduke."
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  "
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * 1b1. Modduke shows an error message."
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  "
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "      Use case ends"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    "
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**UC13: Add Meeting**"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "gloon99"
        },
        "content": "1.  User makes request to add a meeting"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "2.  Modduke accepts request and creates meeting"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* 1a. Module Name, Meeting Name, Date, Time or Participants are missing."
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * 1a1. Modduke shows an error message."
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* 1b. Given module does not exist in Modduke."
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * 1b1. Modduke shows an error message."
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* 1c. Meeting with the same combination of module and meeting name already exists."
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * 1c1. Modduke shows an error message."
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* 1d. Meeting with the same date and time already exists."
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * 1d1. Modduke shows an error message."
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* 1e. Participants indicated are not in given module."
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * 1e1. Modduke shows an error message."
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**UC14: Delete Meeting**"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "gloon99"
        },
        "content": "1.  User makes request to delete a specific meeting"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "2.  Modduke accepts request and makes changes to meeting"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* 1a. Specified combination of module and meeting does not exist."
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * 1a1. Modduke shows an error message."
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    "
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**UC15: Edit Meeting**"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "gloon99"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "gloon99"
        },
        "content": "1.  User makes request to edit a meeting"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "2.  Modduke accepts request and edits meeting"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "gloon99"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* 1a. No field to edit was provided."
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * 1a1. Modduke shows an error message."
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* 1b. Given module does not exist in Modduke."
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * 1b1. Modduke shows an error message."
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* 1c. Specified combination of module and meeting does not exist."
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * 1c1. Modduke shows an error message."
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* 1d. Edited meeting has the same combination of module and meeting name as an existing meeting."
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * 1d1. Modduke shows an error message."
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* 1e. Edited meeting results in the same date and time as an existing meeting exists."
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * 1e1. Modduke shows an error message."
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* 1f. New participants indicated are not in given module."
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * 1f1. Modduke shows an error message."
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**UC16: View Selected Meeting Details**"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "royleochan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "royleochan"
        },
        "content": "1.  User chooses to view details of a meeting"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "royleochan"
        },
        "content": "2.  Modduke accepts request and displays both agendas and notes for the selected meeting"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "royleochan"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* 1a. Modduke detects invalid command format."
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * 1a1. Modduke gives an alert for the invalid command format."
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* 1b. User enters a meeting that does not exist."
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * 1b1. Modduke shows a message informing user that the meeting provided is not in the meeting list."
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**UC17: List Meetings**"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "gloon99"
        },
        "content": "1.  User makes request to list all meetings"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "2.  Modduke accepts request and displays all meetings"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "gloon99"
        },
        "content": "**UC18: View Timeline**"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "gloon99"
        },
        "content": "1.  User makes request to view timeline window"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "gloon99"
        },
        "content": "2.  Modduke accepts request and displays timeline window"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "gloon99"
        },
        "content": "**UC19: Copy Contact Information**"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "1.  User makes request to copy information of contacts matching the given parameters"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "2.  Modduke accepts request and copies information of contacts to the user\u0027s system clipboard"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* 1a. No contact matches the given parameters."
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * 1a1. Modduke shows an error message."
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* 1b. No parameters are given."
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * 1b1. Modduke shows an error message."
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "gloon99"
        },
        "content": "**UC20: Autocomplete Entity Name (Contact, Module, Meeting)**"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "1.  User makes a request to system to trigger autocomplete."
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "2.  Modduke accepts request and enters autocomplete mode and request for text to be autocompleted"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "3.  User specifies text to autocomplete."
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "4.  Modduke takes user input and returns list of suggestions to user."
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "5.  User selects his desired suggestion from list."
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "6.  Modduke replaces user\u0027s text with autocomplete result."
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    "
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    "
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* 4a. No suggestions available for text entered"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    "
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * 4a1. Modduke shows an empty suggestions list"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  "
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Use case resumes from step 3."
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    "
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    * *a. At any time, User chooses to exit autocomplete mode."
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    "
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "      * *a1. User makes a request to Modduke to exit autocomplete mode."
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "      * *a2. Modduke accepts request and exits autocomplete mode."
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    "
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    "
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "gloon99"
        },
        "content": "**UC21: Switch to light theme**"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "royleochan"
        },
        "content": "**Guarantees**"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "royleochan"
        },
        "content": "*  The theme set will be light theme regardless of current theme"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "royleochan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "royleochan"
        },
        "content": "1.  User makes request to switch to light theme"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "royleochan"
        },
        "content": "2.  Modduke switches to light theme"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "gloon99"
        },
        "content": "**UC22: Switch to dark theme**"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "royleochan"
        },
        "content": "**Guarantees**"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "royleochan"
        },
        "content": "*  The theme set will be dark theme regardless of current theme"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "royleochan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "royleochan"
        },
        "content": "1.  User makes request to switch to dark theme"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "royleochan"
        },
        "content": "2.  Modduke switches to dark theme"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    "
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "gloon99"
        },
        "content": "**UC23: Command History**"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "1.  User makes request to view last inputted command"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "2.  Modduke updates text field with last inputted command"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* 2a. No inputted command in current session"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * 2a1. Modduke does nothing"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  "
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "gloon99"
        },
        "content": "1. The product should only be for a single user rather than multi-user."
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "gloon99"
        },
        "content": "2. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "gloon99"
        },
        "content": "3. Increments to the code should be made every week with a consistent delivery rate."
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "gloon99"
        },
        "content": "4. The data should be stored locally and should be in a human editable text file, instead of using a DBMS."
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "gloon99"
        },
        "content": "5. The software should follow the Object-oriented paradigm primarily."
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "gloon99"
        },
        "content": "6. Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "gloon99"
        },
        "content": "7. Should work without requiring an installer."
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "gloon99"
        },
        "content": "8. Should be able to function without having to rely on being heavily connected to a network."
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "gloon99"
        },
        "content": "9. The use of third-party frameworks and libraries should be avoided."
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "gloon99"
        },
        "content": "10. JAR files should not exceed 100Mb and PDF files should not exceed 15Mb/file."
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "gloon99"
        },
        "content": "11. All features should be easy to test. (i.e., do not depend heavily on remote APIs, do not have audio-related features and do not require creating user accounts before usage)"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "gloon99"
        },
        "content": "12. The system should respond within two seconds."
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* **.vcf,.csv files**: A format of files that contains contact information from users phones"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* **CLI**: CLI is the Command Line Interface where you can type in commands and get an output"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* **TA**: Teaching assistant"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* **Meeting**: A general purpose appointment between students, professors or TAs. Examples include project meetings or consultations with professors."
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "### Copying a contact\u0027s information"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "1. Copying a contact while all contacts are being shown"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    1. Prerequisites: List all contacts using the `contact list` command. Multiple contacts in the list."
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    1. Test case: `copy phone n/Alex Yeoh`\u003cbr\u003e"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "       Expected: Clipboard should have phone number of Contact Alex Yeoh."
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    1. Test case: `copy email t/colleagues`\u003cbr\u003e"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "       Expected: Clipboard should have email addresses of all Contacts with colleague tag."
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    1. Test case: `copy email m/CS1100`\u003cbr\u003e"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "       Expected: Clipboard should have email addresses of all Contacts in the CS1100 Module."
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    1. Test case: `copy email n/Alex Yeoh n/Bernice Yu t/prof m/CS1102`\u003cbr\u003e"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "       Expected: Clipboard should have email addresses of Contacts Alex Yeoh and Bernice Yu, all Contacts with the prof tag and all Contacts in the CS1102 Module."
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    1. Other incorrect copy commands to try: `copy email`, `copy email n/x` (where x is a name not in the list of contacts), `copy phone t/y` (where y is a tag not in the list of contacts), `copy phone m/z` (where z is a module not in the list of modules)\u003cbr\u003e"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "       Expected: Status message will be an error message."
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "### Autocomplete Feature"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "1. Trigger Autocomplete Mode"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    1. Enter \u0027cn/\u0027 into command box.\u003cbr/\u003eExpected: Text should turn orange"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "1. Generating Suggestions\u003cbr/\u003e"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "_Assuming you have a contact named \"Alex Yeoh\", else feel free to use any prefix you like given that the contact exists_"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    1. Type in \"alex\" and press `Tab`\u003cbr/\u003e"
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Expected: Modduke should return a suggestion from your contact list. If there are multiple suggestions, suggestions should be offered alphabetically."
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "1. Locking in a Suggestion"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    1. Press `Enter` to lock in your suggestion\u003cbr/\u003e"
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Expected: \u0027cn/\u0027 should be removed. Text should change back to white."
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "### Fuzzy Find Completion (Fzf) Feature"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "1. Trigger Fzf Mode"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    1. In the command box, press `Ctrl` + `Space`\u003cbr/\u003e"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Expected: A menu should pop up given that user has atleast 1 entry in either Contact, Module or Meeting."
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "1. Generating Suggestions"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    1. Type some text\u003cbr/\u003e"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Expected: The menu should show suggestions that contain given text. If text enter by user is not empty but has no appropriate suggestions, menu should be hidden."
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "1. Navigating Suggestions"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    1. Use `Up` or `Down` arrow keys to navigate suggestions\u003cbr/\u003e"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Expected: User should be allowed to navigate suggestions."
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "1. Locking in a Suggestion"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    1. Press `Enter` to lock in your suggestion\u003cbr/\u003e"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Expected: Menu should be removed and the result should appear in command box."
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "royleochan"
        },
        "content": "### Viewing a selected meeting details"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "royleochan"
        },
        "content": "1. View a selected meeting\u0027s agenda and notes"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    1. Prerequisites: Meeting is a valid meeting."
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    1. Test case: `meeting view m/CS1100 n/Weekly Meeting` \u003cbr\u003e"
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "royleochan"
        },
        "content": "       Expected: Selected meeting panel should display the correct meeting. User can toggle between viewing the meeting\u0027s agenda or notes by clicking on the corresponding Agenda or Notes tab."
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "royleochan"
        },
        "content": "### Change to light theme"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "royleochan"
        },
        "content": "1. Switch the application theme to light theme"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "royleochan"
        },
        "content": "   1. Test case: `light` \u003cbr\u003e"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "royleochan"
        },
        "content": "      Expected: Application should switch to light theme and status message should say \"Light theme set successfully.\""
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "royleochan"
        },
        "content": "### Change to dark theme"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "royleochan"
        },
        "content": "1. Switch the application theme to dark theme"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "royleochan"
        },
        "content": "   1. Test case: `dark` \u003cbr\u003e"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "royleochan"
        },
        "content": "      Expected: Application should switch to dark theme and status message should say \"Dark theme set successfully.\""
      }
    ],
    "authorContributionMap": {
      "gloon99": 650,
      "jerrylchong": 250,
      "EkamSinghPandher": 303,
      "nopenotj": 179,
      "-": 272,
      "royleochan": 195
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Modduke is a **desktop app targeted towards NUS students handling multiple projects. It allows them to easily manage their contacts, modules and meetings during the semester.** The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 13 kLoC."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "1. Download the latest `modduke.jar` from [here](https://github.com/AY2021S1-CS2103-F10-2/tp/releases)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your Modduke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "1. Using your terminal, navigate to folder containing `modduke.jar` and run the command `java -jar modduke.jar`. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "   * **`contact list`** : Lists all contacts."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "   * **`contact add`** `n/John Doe p/98765432 e/johnd@example.com` : Adds a contact named `John Doe` to Modduke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "   * **`contact delete`** `n/John Doe` : Deletes `John Doe` from the Modduke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "   * **`contact clear`** : Deletes all contacts."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "   * **`exit`** : Exits Modduke."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  e.g. in `add n/CONTACT_NAME`, `CONTACT_NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  e.g `n/CONTACT_NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  e.g. `t/TAG…​` can be used as `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  e.g. if the command specifies `n/CONTACT_NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/CONTACT_NAME` is also acceptable."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* All parameters are `CASE-SENSITIVE` unless stated otherwise.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* The `CONTACT_NAME` parameter refers to the full name of the contact."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* There are 2 special tags `prof` and `ta`. Contacts with either of these tags will be classified as professor or ta"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": " respectively. Users are not allowed to tag a contact as both `prof` and `ta`. Hence, if your professor is also your ta, only the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": " `prof` tag should be used."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* Can be activated by the F1 key."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* Can be activated by clicking the context menu."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "### Setting light theme: `light`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Sets the application to the light theme."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "![help message](images/lightTheme.png)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Format: `light`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* Can be activated by the F2 key."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* Can be activated by clicking the context menu."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* If the help window or timeline window was opened and a change of theme was done, they must be closed and reopened for the change of theme to take effect."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "### Setting dark theme: `dark`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Sets the application to the dark theme."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "![help message](images/darkTheme.png)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Format: `dark`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* Can be activated by the F3 key."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* Can be activated by clicking the context menu."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* If the help window or timeline window was opened and a change of theme was done, they must be closed and reopened for the change of theme to take effect."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "### Fuzzy Find Completion (Fzf)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Currently Modduke supports Fuzzy Find Completion from v1.4 onward. You can trigger the fzf mode"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "using `ctrl + space`. Currently our fzf will search through all contact names, module names and meeting names and will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "match entries that contain the prefix entered."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "![Fzf Example](images/FzfCompletionExample.gif)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "You can exit fzf mode by manually pressing `esc`. You will also be taken automatically out of fzf mode once you select one"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "of the fzf options by navigating to desired option using arrow keys and making the selection by pressing `enter`. Alternatively,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "you can make the selection using your mouse."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Note that the intuitive `tab` and `shift-tab` navigation is currently NOT supported in v1.4 although you can use these keys to jump to the first option in the fzf menu."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "### Autocompletion"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Currently Modduke supports autocompletion for the following fields for v1.3 onward. Note that this is a legacy"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "feature and most of its functionality can be achieved using our newer Fzf completion."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* Contact Name -  Triggered using `cn/`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* Module Name -  Triggered using `mdn/`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* Meeting Name -  Triggered using `mtn/`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Typing in these trigger phrases will turn the text yellow to show that CommandBox has entered Autocompletion Mode."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Use `Tab` to scroll forward and `Shift-Tab` to iterate backwards through suggestions."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Note that this autocompletion can only be triggered at the end of input string e.g."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "- `contact edit cn/` will trigger the autocomplete but"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "- `contact edit cn/ p/98830181` this would not as there is text after the trigger phrase."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "![Autocomplete Example](images/AutocompleteExample.gif)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* Note that while in Autocomplete mode you cannot edit suggestions unless you iterated back to your own input or you press `Backspace`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* Pressing `Enter` will lock in your current selection and take you out of Autocomplete mode."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "### Command History"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Similar to other command lines, Modduke supports a command history function where pressing the up or down keys brings"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "users back to previous successful commands."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "The `Up` key brings users to previous command wheras the `Down` key brings users to the next command in the command history"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "queue."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* Note that the commands must be successful to be logged into command history and that command history only tracks commands"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "in the current session. This means if Moduke is restarted, commands in the previous sessions won\u0027t be available."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "royleochan"
        },
        "content": "### Adding a contact : `contact add`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Adds a contact to Modduke."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Format: `contact add n/CONTACT_NAME p/PHONE_NUMBER e/EMAIL [t/TAG]...`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* All fields are required except those in square brackets. No duplicate names."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* CONTACT_NAME must be alphanumeric."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* PHONE_NUMBER must be at least 3 digits but not longer than 20 digits."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* `contact add n/John Doe p/98765432 e/johnd@example.com`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "royleochan"
        },
        "content": "### Deleting a contact : `contact delete`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Delete contacts with the given criteria from Modduke."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Format: `contact delete [n/CONTACT_NAME]... [m/MODULE_NAME]... [t/TAG_NAME]...`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* [n/CONTACT_NAME], [m/MODULE_NAME] and [t/TAG_NAME] are all optional fields."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* If there are no more members in a meeting or module after they are deleted, then the meeting or module will be deleted as well."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* All contacts will be shown after deleting a contact."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `contact delete n/Roy Chan n/Jake Ng` delete contacts `Roy Chan` and `Jake Ng` from Modduke."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* `contact delete m/CS2103 t/classmates` deletes all contacts in `CS2103` module or have `classmates` tag"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "royleochan"
        },
        "content": "### Editing a contact : `contact edit`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Edits an existing contact in Modduke."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Format: `contact edit CONTACT_NAME [n/NEW_NAME] [p/PHONE] [e/EMAIL]`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* At least one optional field must be provided"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "royleochan"
        },
        "content": "*  `contact edit John Doe p/91234567 e/johndoe@example.com` Edits the phone number and email address of John Doe to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "royleochan"
        },
        "content": "*  `contact edit Roy Chan n/Betsy Crower` Edits the name of Roy Chan to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "*   All contacts will be shown after editing a contact."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Clearing all contacts : `contact clear`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Deletes all existing contacts."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Format: `contact clear`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* Once cleared, contacts are permanently deleted."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* This command will also clear all meetings and modules."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "### Viewing all contacts : `contact list`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Shows a list of all contacts in the address book."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Format: `contact list`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "### Finding contacts: `contact find`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Shows a list of all contacts in the address book that have the given keywords in their name and/or the given tags."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Format: `contact find [n/KEYWORD]... [t/TAG_NAME]...`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* At least one optional field must be provided."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* KEYWORD is CASE-INSENSITIVE"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* KEYWORD can be the initials of the full name (first letter of each word in their full name) of the contact"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "*   `find n/Tan` Shows all contacts with `tan` (case-insensitive) in their name or have initials `tan`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "*   `find n/jcyy t/classmates` Shows all contacts with `jcyy` in their name or have initials `jcyy` and persons with the `classmates` tag."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "### Adding a tag to a user : `tag add`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Adds the given tags to a contact."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Format: `tag add CONTACT_NAME t/TAG_NAME...`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* Only 1 contact name can be used at a time but multiple tags can be added."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* All contacts will be shown after adding a tag to a contact."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* `tag add Jay t/classmate t/friend`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "### Deleting a tag from a user : `tag delete`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Deletes the given tags from a contact."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Format: `tag delete CONTACT_NAME t/TAG_NAME...`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Note(s)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* Only 1 contact name can be used at a time but multiple tags can be deleted."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* The contact has to have the given tag."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* All contacts will be shown after deleting a tag from a contact."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* `tag delete Jay t/friend`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "### Clear tags of a user : `tag clear`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Deletes all tags of a contact."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Format: `tag clear CONTACT_NAME`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* Only 1 contact name can be used at a time."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* All contacts will be shown after clearing all tags of a contact."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* `tag clear Jay`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "### Creating a module : `module add`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Creates a Module with a given name and members ."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Format: `module add n/MODULE_NAME p/MEMBER_NAME...`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* A Module can have more than 1 member but can only have one name."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* Need at least 1 member."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* Professors and TA\u0027s can also be added in the same format as other contacts."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* Note that using this command after module list or contact find will show all contacts again"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* `module add n/CS2103 p/Roy p/Jerryl p/Yeeloon p/Jay p/Ekam`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "### Listing a module : `module list`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Finds and displays all the contacts of the module specified."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Format: `module list m/MODULE_NAME`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* To reset the contacts list in the gui you can do the contact list command"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* Note that any subsequent commands will show all contacts again."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* `module list m/CS2103`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "### Editing a module : `module edit`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Edits a Module based on the inputted details."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Format: `module edit m/MODULE_NAME [n/NEW_MODULE_NAME] [p/MEMBER_NAME]...`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* At least one change has to be present (either the module name or the participants or both)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* Note that if you change the participants, the old participants will be overwritten and replaced by the newly"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "added participants."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* You can change either the module name, the participants or both."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* Changes to module will affect meetings based on that module, so if the meeting does not include any of the new module"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "participants, it will be deleted."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* Note that using this command after module list or contact find will show all contacts again"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* `module edit m/CS2103 n/CS2103T p/Roy p/Jerryl p/Yeeloon p/Jay p/Ekam`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "### Deleting a module : `module delete`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Deletes a module with a specific name."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Format: `module delete m/MODULE_NAME`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* All meetings based on the deleted module will also be deleted, once deleted there is no undo so delete the module"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "carefully."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* Note that module names are case-sensitive."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* `module delete m/CS2103`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Adding a meeting: `meeting add`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Adds a meeting at a given date and time with specified participants, and a provided meeting name"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Format: `meeting add m/MODULE n/MEETING_NAME d/MEETING_DATE t/MEETING_TIME p/PARTICIPANTS... [a/AGENDA]... [no/NOTES]...`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* All the fields must be provided except those in square brackets"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* Date is in the YYYY-MM-dd format and time is in the hh:mm format"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* Participants added need to be contacts that exist in the given module"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* The `PARTICIPANTS` parameter refers to the full name of the contact"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* The combination of module and meeting name must be unique"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* Two meetings are not allowed to occur on the same date and time"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "gloon99"
        },
        "content": "*  `meeting add m/CS2103 n/weekly meeting d/2020-09-20 t/10:00 p/Jay p/Roy p/Jerryl p/Yeeloon p/Ekam"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "gloon99"
        },
        "content": "a/Discuss sequence diagram no/Revise page 2 of textbook beforehand`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Deleting a meeting : `meeting delete`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Deletes the specified meeting from Modduke, indentified by the unique combination of module and meeting name."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Format: `meeting delete m/MODULE n/MEETING_NAME`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `meeting delete m/CS2103 n/Weekly Meeting` deletes `Weekly Meeting` meeting from the module `CS2103`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Editing a meeting: `meeting edit`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Edits a given meeting. Listed below are the meeting details that can be changed:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "gloon99"
        },
        "content": "1. Name"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "gloon99"
        },
        "content": "2. Date"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "gloon99"
        },
        "content": "3. Time"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "gloon99"
        },
        "content": "4. Contacts"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "royleochan"
        },
        "content": "5. Agenda"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "royleochan"
        },
        "content": "6. Note"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Format: `meeting edit m/MODULE n/MEETING_NAME [nn/NEW_NAME] [d/NEW_DATE] [t/NEW_TIME] [p/NEW_PARTICIPANTS]..."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gloon99"
        },
        "content": "[a/AGENDA]... [no/NOTES]...`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* At least one of the optional fields must be provided"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* Date is in the YYYY-MM-dd format and time is in the hh:mm format"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* Participants added need to be contacts that exist in the given module"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* The `PARTICIPANTS` parameter refers to the full name of the contact"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* The combination of module and meeting name must be unique"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* Two meetings are not allowed to occur on the same date and time"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* All the newly provided fields will override previous fields"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `meeting edit m/CS2103 n/Meeting d/2020-09-27 t/14:00` edits the date and time of Meeting in the module CS2103 to be"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "gloon99"
        },
        "content": "`2020-09-27` and `14:00` respectively"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `meeting edit m/CS2103 n/Meeting nn/Group Discussion` edits the name of Meeting to be `Group Discussion` in the"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "gloon99"
        },
        "content": "module CS2103"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "royleochan"
        },
        "content": "### Listing all meetings : `meeting list`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Views all the existing meetings."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Format: `meeting list`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "royleochan"
        },
        "content": "### Viewing specific meeting: `meeting view`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Views selected meeting details, showing meeting agendas and meeting notes."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Format: `meeting view m/MODULE n/MEETING_NAME`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* Views the meeting with the specified meeting name in the given module."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* `meeting view m/CS2103 n/Weekly Meeting` views the `Weekly Meeting` meeting from the module `CS2103`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "### Copy email address of contacts : `copy email`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Copies email addresses of contacts with the given criteria to your clipboard."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Format: `copy email [n/CONTACT_NAME]... [m/MODULE_NAME]... [t/TAG_NAME]...`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* [n/CONTACT_NAME], [m/MODULE_NAME] and [t/TAG_NAME] are all optional fields."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* All contacts will be shown after copying the email addresses of contacts."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `copy email n/Bob Ross`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `copy email m/CS2103 t/classmate n/Tom Tan n/Jerryl Chong`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "### Copy phone numbers of contacts : `copy phone`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Copies phone numbers of contacts with the given criteria to your clipboard."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Format: `copy phone [n/CONTACT_NAME]... [m/MODULE_NAME]... [t/TAG_NAME]...`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* [n/CONTACT_NAME], [m/MODULE_NAME] and [t/TAG_NAME] are all optional fields."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* All contacts will be shown after copying the phone numbers of contacts."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* `copy phone m/CS2103`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* `copy phone m/CS1010 t/classmate n/Bob Ross n/Peter Parker`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "gloon99"
        },
        "content": "### Viewing the timeline : `timeline`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Displays the timeline in a new window."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Format: `timeline`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "gloon99"
        },
        "content": "![Timeline Window](images/TimelineWindow.gif)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Note(s):"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* Meetings are displayed in chronological order, with the earliest meeting on the left side of the window"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* Meetings that have passed the date and time at the point which the application was first opened are marked red"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Modduke\u0027s data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "### Command Line Shortcuts"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Shortcut | Action"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "`Ctrl-U` | Clears CommandBox"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "`Ctrl-W` | Deletes text from the cursor position to previous word"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Modduke home folder."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Q**: Can I retrieve my contacts after I have delete them?\u003cbr\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**A**: No. Contacts are permanently deleted and cannot be retrieved after."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Q**: If I face an error/bug, where can I seek assistance?\u003cbr\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "**A**: You can head to the **[Modduke GitHub Issues page](https://github.com/AY2021S1-CS2103-F10-2/tp/issues)** and create or find your issue there."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "**Q**: Are commands case-sensitive?\u003cbr\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "**A**: Yes"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Q**: Can I import contacts from my existing devices e.g. Mobile Phones / Email?\u003cbr\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "**A**: Unfortunately we currently do not support this."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Add Contact** | `contact add n/CONTACT_NAME p/PHONE_NUMBER e/EMAIL [t/TAG]...` \u003cbr\u003e e.g., `contact add n/Jay p/22224444 e/jay@example.com`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**Clear Contacts** | `contact clear`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Delete Contacts** | `contact delete [n/CONTACT_NAME]... [m/MODULE_NAME]... [t/TAG_NAME]...`\u003cbr\u003e e.g., `contact delete n/Jay t/friend m/CS2103`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Edit Contacts** | `contact edit CONTACT_NAME [n/NEW_NAME] [p/PHONE] [e/EMAIL]` \u003cbr\u003e e.g.,`contact edit Jay n/Roy e/roy@example.com`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**List Contacts** | `contact list`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Find Contacts** | `find [n/KEYWORD]... [t/TAG_NAME]...` \u003cbr\u003e e.g.,`find n/Roy t/friend`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**Add Module** | `module add [m/MODULE_NAME] p/MEMBER_NAMES...`\u003cbr\u003e e.g., `module add n/CS2103 p/Jay p/Roy`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**List Modules** | `module list  [m/MODULE_NAME]`\u003cbr\u003e e.g., `module list m/CS2103`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**Edit Modules** | `module edit m/MODULE_NAME [n/MODULE_NEWNAME] [p/MEMBER_NAMES]...`\u003cbr\u003e e.g., `module edit m/CS2103 n/CS2103T p/Roy p/Jay`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "**Delete modules** | `module delete m/MODULE_NAME`\u003cbr\u003e e.g., `module delete m/CS2103`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Add Tags** | `tag add CONTACT_NAME t/TAG_NAME...` \u003cbr\u003e e.g., `tag add Jay t/acquaintance`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Delete Tags** | `tag delete CONTACT_NAME t/TAG_NAME...` \u003cbr\u003e e.g., `tag delete Jay t/friend`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Clear Tags** | `tag clear CONTACT_NAME` \u003cbr\u003e e.g., `tag clear Jay`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "gloon99"
        },
        "content": "**Add Meeting** | `meeting add m/MODULE n/MEETING_NAME d/MEETING_DATE t/MEETING_TIME p/PARTICIPANTS... [a/AGENDA]... [no/NOTES]...` \u003cbr\u003e e.g., `meeting add m/CS2103 n/Meeting d/2020:09:23 t/10:00 p/Ekam p/Jay p/Jerryl p/Roy`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "gloon99"
        },
        "content": "**Delete Meeting** | `meeting delete m/MODULE n/MEETING_NAME` \u003cbr\u003e e.g., `meeting delete m/CS2103 n/Weekly Meeting`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "gloon99"
        },
        "content": "**Edit Meeting** |  `meeting edit m/MODULE n/MEETING_NAME [nn/NEW_NAME] [d/NEW_DATE] [t/NEW_TIME] [p/NEW_PARTICIPANTS]... [a/AGENDA]... [no/NOTES]...` \u003cbr\u003e e.g., `meeting edit m/CS2103 n/Meeting d/2020-09-27 t/14:00`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "gloon99"
        },
        "content": "**List Meetings** | `meeting list`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "royleochan"
        },
        "content": "**View Meeting** | `meeting view m/MODULE n/MEETING_NAME`  \u003cbr\u003e e.g., `meeting view m/CS2100 n/Report Discussion`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Copy Email** | `copy email [n/CONTACT_NAME]... [m/MODULE_NAME]... [t/TAG_NAME]...` \u003cbr\u003e e.g.,`copy email m/CS2103 t/classmate n/Tom Tan n/Jerryl Chong`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "**Copy Phone** | `copy phone [n/CONTACT_NAME]... [m/MODULE_NAME]... [t/TAG_NAME]...` \u003cbr\u003e e.g.,`copy phone m/CS2103 t/classmate n/Tom Tan n/Jerryl Chong`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "gloon99"
        },
        "content": "**Display Timeline** | `timeline`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "royleochan"
        },
        "content": "**Display Help** | `help`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "royleochan"
        },
        "content": "**Switch to Light Theme** | `light`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "royleochan"
        },
        "content": "**Switch to Dark Theme** | `dark`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gloon99": 75,
      "jerrylchong": 112,
      "EkamSinghPandher": 76,
      "nopenotj": 49,
      "-": 129,
      "royleochan": 66
    }
  },
  {
    "path": "docs/diagrams/AddMeetingActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":User inputs add meeting command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":AddMeetingCommandParser checks input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "if () then ([not all required fields present])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    :Throw ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    end"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    :Parse all inputs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    :Model contains module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    if () then ([no])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        :Throw CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        end"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    else ([yes])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        :Model contains meeting;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if () then ([yes])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            :Throw CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            end"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        else ([no])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            :Model contains another meeting at same date and time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if () then ([yes])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                :Throw CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                end"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                else ([no])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    :Given module contains all given participants;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    if () then ([no])"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        :Throw CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        end"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        else ([yes])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                            :Create new AddMeetingCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                            stop"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gloon99": 32
    }
  },
  {
    "path": "docs/diagrams/AddModuleActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ":User inputs add module command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ":AddModuleCommandParser checks input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "if () then ([not all required fields present])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    :Throw ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    end"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    :Parse all inputs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    :Model contains module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if () then ([yes])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            :Throw CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            end"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        else ([no])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            :Check all participants are valid;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            if () then ([yes])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                :Add Module to the model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            else ([no])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                :Throw CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                end"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 22
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"contact delete Alex Yeoh\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"contact delete Alex Yeoh\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : updatePersonInMeetingBook(p)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : updatePersonInModuleBoook(p)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveMeetingBook(meetingBook)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveModuleBook(moduleBook)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "royleochan": 36
    }
  },
  {
    "path": "docs/diagrams/AutocompleteActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ":User triggers Autocomplete Mode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ":User types out prefix;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ":Sets Prefix using Tab / Shift-Tab;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "while() is ([else])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ":Cycle through suggestions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "endwhile ([user accepts\\n suggestions])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ":Press Enter to lock in suggestion;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 14
    }
  },
  {
    "path": "docs/diagrams/AutocompleteClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "skinparam classAttributeFontColor WHITE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "show members"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "hide empty members"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Class TextField"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Class AutocompleteModule {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "-boolean isAutocompleteMode"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "-boolean hasSetPrefix"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "+void addSuggestions(commandPrefix, suggestionSupplier)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Class Suggestions {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "-String prefix"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "+void setPrefix(prefix)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "+String nextSuggestion(prefix)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "+String prevSuggestion(prefix)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "UiManager --\u003e MainWindow"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "MainWindow *--\u003e CommandBox"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "CommandBox -\u003e \"1\"TextField"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "AutocompleteModule --\u003e \"1\"TextField : attaches to \u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "AutocompleteModule -\u003e \"*\"Suggestions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gloon99": 29,
      "nopenotj": 7
    }
  },
  {
    "path": "docs/diagrams/AutocompleteExitFlowSequenceDiagram0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Actor User"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "participant \"commandTextField:TextField\" as TextField UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "participant \"acMod:AutocompleteModule\" as AutocompleteModule LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "User -\u003e TextField : Press \"Backspace\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "activate TextField"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "alt isAutocompleteMode"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    TextField -\u003e AutocompleteModule : unsetPrefix()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    activate AutocompleteModule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    AutocompleteModule --\u003e TextField"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    deactivate AutocompleteModule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "end"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "deactivate TextField"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    ||140||"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gloon99": 11,
      "nopenotj": 14
    }
  },
  {
    "path": "docs/diagrams/AutocompleteExitFlowSequenceDiagram1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Actor User"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "participant \"commandTextField:TextField\" as TextField UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "participant \"acMod:AutocompleteModule\" as AutocompleteModule LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "User -\u003e TextField : Press \"Enter\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "activate TextField"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "alt isAutocompleteMode"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    TextField -\u003e AutocompleteModule : unsetPrefix()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    activate AutocompleteModule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    AutocompleteModule --\u003e TextField"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    deactivate AutocompleteModule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    TextField -\u003e AutocompleteModule : toggleAutocompleteModeOff()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    activate AutocompleteModule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    AutocompleteModule --\u003e TextField"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    deactivate AutocompleteModule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    TextField -\u003e AutocompleteModule : removeCommandPrefixFromCompletion()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    activate AutocompleteModule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    AutocompleteModule -\u003e TextField : setText(textWithoutCmdPrefix)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    AutocompleteModule --\u003e TextField"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    deactivate AutocompleteModule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "end"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "deactivate TextField"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "||||"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gloon99": 14,
      "nopenotj": 22
    }
  },
  {
    "path": "docs/diagrams/AutocompleteFlowSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Actor User"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "participant \":TextField\" as TextField UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "participant \"acMod:AutocompleteModule\" as AutocompleteModule LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "participant \"cname:Suggestion\" as Suggestion LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "User -\u003e TextField : types \"cname/\" into commandBox\u0027s TextField"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    activate TextField"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "alt !isAutocompleteMode"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    TextField -\u003e AutocompleteModule : toggleAutocompleteModeOn()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    activate AutocompleteModule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    AutocompleteModule --\u003e TextField"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    deactivate AutocompleteModule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "end"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    deactivate TextField"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "loop isAutocompleteMode"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    User -\u003e TextField : Presses any key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    activate TextField"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    alt keyPressed \u003d\u003d TAB"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        alt !hasSetPrefix"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            TextField -\u003e AutocompleteModule : setPrefix(cname, prefix)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            AutocompleteModule -\u003e Suggestion : setPrefix(prefix)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            ||||"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        end"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        alt isShiftDown()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            TextField -\u003e Suggestion : prevSuggestion()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            activate Suggestion"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            Suggestion --\u003e TextField"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            deactivate Suggestion"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            ||||"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        else else"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            TextField -\u003e Suggestion : nextSuggestion()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            activate Suggestion"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            Suggestion --\u003e TextField"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            deactivate Suggestion"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            ||||"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        end"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    else"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    end"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    TextField-[hidden]-\u003eUser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    deactivate TextField"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "end"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gloon99": 31,
      "nopenotj": 26
    }
  },
  {
    "path": "docs/diagrams/AutocompleteInitializationSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "participant \"commandTextField:TextField\" as TextField UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "participant \"\u003c\u003cclass\u003e\u003e\\n:AutocompleteModule\" as AutocompleteModule LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "participant \"acMod:AutocompleteModule\" as AcModuleInstance LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "participant \"cname:Suggestion\" as Suggestion LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "MainWindow -\u003e AutocompleteModule : attachTo(commandTextField)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "activate AutocompleteModule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "create AcModuleInstance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "AutocompleteModule -\u003e AcModuleInstance : new AutocompleteModule(commandTextField)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "activate AcModuleInstance"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "AcModuleInstance -\u003e AcModuleInstance : setupAutocompleteActionKeys();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "activate AcModuleInstance"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "AcModuleInstance -\u003e TextField : addEventFilter(event, actionKeysHandler)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "AcModuleInstance --\u003e AcModuleInstance"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "deactivate AcModuleInstance"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "||||"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "AcModuleInstance -\u003e AcModuleInstance : disableFocusTraversal()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "activate AcModuleInstance"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "AcModuleInstance --\u003e AcModuleInstance"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "deactivate AcModuleInstance"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "AcModuleInstance --\u003e AutocompleteModule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "deactivate AcModuleInstance"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "AutocompleteModule --\u003e MainWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "deactivate AutocompleteModule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "MainWindow -\u003e AcModuleInstance : addSuggestions(\"cname/\",\\n () -\u003e List.of(\"Alice\",\"Bob\", \"Charlie\"))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "activate AcModuleInstance"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "create Suggestion"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "AcModuleInstance -\u003e Suggestion"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "activate Suggestion"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Suggestion --\u003e AcModuleInstance"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "deactivate Suggestion"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "deactivate AcModuleInstance"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gloon99": 21,
      "nopenotj": 32
    }
  },
  {
    "path": "docs/diagrams/CopyActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "!pragma useVerticalIf on"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":User inputs copy command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":CopyCommandParser checks input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "if() then ([input is \"copy email\"])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Set isEmail to **true**;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "elseif() then ([input is \"copy phone\"])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Set isEmail to **false**;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Throw ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "end"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "if() then ([input has name, module and tag prefix])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create predicate that checks if"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Person has any of the given names or"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "tags;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create CopyCommand with created"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate, isEmail and list of given"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "module names;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "elseif() then ([input has name, module prefix])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create predicate that checks if"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Person has any of the given names;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create CopyCommand with created"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate, isEmail and list of given"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "module names;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "elseif() then ([input has name, tag prefix])"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create predicate that checks if"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Person has any of the given names or"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create CopyCommand with created"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate, isEmail and empty list;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "elseif() then ([input has module, tag prefix])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create predicate that checks if"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Person has any of the given tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create CopyCommand with created"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate, isEmail and list of given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "module names;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "elseif() then ([input only has name prefix])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create predicate that checks if"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Person has any of the given names;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create CopyCommand with created"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate, isEmail and empty list;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "elseif() then ([input only has module prefix])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create CopyCommand with empty"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate, isEmail and list of given module"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "names;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "elseif() then ([input only has tag prefix])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create predicate that checks if"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Person has any of the given tags;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create CopyCommand with created"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate, isEmail and empty list;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Throw ParseException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "end"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "endif"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Execute the created CopyCommand;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Obtain list of Persons from Modduke"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "who pass the predicate or are in any of"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "the given modules;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "if() then ([isEmail])"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Obtain email address from Persons"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "in list;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Combine all email addresses into a"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "String;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Obtain phone numbers from Persons"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "in list;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Combine all phone numbers into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "String;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "endif"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Copy the resultant String into the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "user\u0027s system clipboard;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "stop"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gloon99": 74,
      "jerrylchong": 1
    }
  },
  {
    "path": "docs/diagrams/DeleteActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "!pragma useVerticalIf on"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":User inputs contact delete command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":DeleteCommandParser checks input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "if() then ([input has name, module and tag prefix])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create predicate that checks if"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Person has any of the given names or"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "tags;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create DeleteCommand with created"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate and list of given module"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "names;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "elseif() then ([input has name, module prefix])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create predicate that checks if"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Person has any of the given names;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create DeleteCommand with created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate and list of given module"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "names;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "elseif() then ([input has name, tag prefix])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create predicate that checks if"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Person has any of the given names or"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create DeleteCommand with created"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate and empty list;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "elseif() then ([input has module, tag prefix])"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create predicate that checks if"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Person has any of the given tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create DeleteCommand with created"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate and list of given module"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "names;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "elseif() then ([input only has name prefix])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create predicate that checks if"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Person has any of the given names;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create DeleteCommand with created"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate and empty list;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "elseif() then ([input only has module prefix])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create DeleteCommand with empty"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate and list of given module"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "names;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "elseif() then ([input only has tag prefix])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create predicate that checks if"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Person has any of the given tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create DeleteCommand with created"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate and empty list;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Throw ParseException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "end"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "endif"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Execute the created DeleteCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Obtain list of Persons from Modduke"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "who pass the predicate or are in any of"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "the given modules;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Delete all Persons in the list from the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "AddressBook, MeetingBook and"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "ModuleBook;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "stop"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gloon99": 56,
      "jerrylchong": 1
    }
  },
  {
    "path": "docs/diagrams/DeleteMeetingActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":User inputs delete meeting command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":DeleteMeetingCommandParser checks input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "if () then ([not all required fields present])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    :Throw ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    end"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    :Parse all inputs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    :Model contains module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    if () then ([no])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        :Throw CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        end"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    else ([yes])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        :Model contains meeting;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if () then ([no])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            :Throw CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            end"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        else ([yes])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            :Create new DeleteMeetingCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            stop"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gloon99": 22
    }
  },
  {
    "path": "docs/diagrams/DeleteModuleActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ":User inputs delete module command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ":DeleteModuleCommandParser checks input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "if () then ([not all required fields present])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    :Throw ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    end"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    :Parse all inputs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    :Model contains module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    if () then ([no])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        :Throw CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        end"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    else ([yes])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        : Delete meetings of the module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        : Delete module from the model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 18
    }
  },
  {
    "path": "docs/diagrams/EditMeetingActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":User inputs edit meeting command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":EditMeetingCommandParser checks input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "if () then ([not all required fields present])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    :Throw ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    end"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    :Parse all inputs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    :Model contains module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    if () then ([no])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        :Throw CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        end"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    else ([yes])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        :Model contains given meeting;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if () then ([no])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            :Throw CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            end"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        else ([yes])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            :Model contains another meeting that has same identity as edited meeting;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if () then ([yes])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            :Throw CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            end"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                else ([no])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            :Model contains another meeting at same date and time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if () then ([yes])"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                :Throw CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                end"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                else ([no])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    :Given module contains all edited participants;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    if () then ([no])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        :Throw CommandException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        end"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        else ([yes])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                            :Create new EditMeetingCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                            stop"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gloon99": 37
    }
  },
  {
    "path": "docs/diagrams/EditModuleActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ":User inputs edit meeting command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ":EditModuleCommandParser checks input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "if() then ([Not all inputs are valid])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    :Throw ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    end"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    :Parse all Inputs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    :Model contains module to edit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    if() then ([No])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        :Throw CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        end"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    else ([Yes])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        : Does module contain new name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if() then ([Yes])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            :Throw CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            end"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        else ([No])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            : Does module contain new participants;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            if() then ([No])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                :Throw CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                end"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            else ([Yes])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                :Is module same as module to edit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                if() then ([Yes])"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    :Throw CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    end"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                else ([No])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    : Edit module in model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    : Check if modules meetings have no participants;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    if() then ([Yes])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                        : Delete Meetings with no participants;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                        stop"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    else ([No])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                        stop"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 39
    }
  },
  {
    "path": "docs/diagrams/ExecuteAddTagCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "mainframe sd execute command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"c:AddTagCommand\" as AddTagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"taggedPerson:Person\" as Person LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e AddTagCommand : execute()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate AddTagCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create Person"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "AddTagCommand -\u003e Person"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Person"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Person --\u003e AddTagCommand : taggedPerson"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Person"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "AddTagCommand -\u003e Model : setPerson(p, taggedPerson)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model --\u003e AddTagCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "AddTagCommand -\u003e Model : updatePersonInMeetingBook(p, taggedPerson)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model --\u003e AddTagCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "AddTagCommand -\u003e Model : updatePersonInModuleBook(p, taggedPerson)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model --\u003e AddTagCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "AddTagCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "CommandResult --\u003e AddTagCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "AddTagCommand --\u003e[ : result"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "destroy AddTagCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 52
    }
  },
  {
    "path": "docs/diagrams/ExecuteClearCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "mainframe sd execute command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "participant \"c:ClearCommand\" as ClearCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e ClearCommand : execute()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "activate ClearCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearCommand -\u003e Model : setSelectedMeeting(null)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model -\u003e ClearCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "ClearCommand -\u003e Model : setAddressBook(new AddressBook())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Model -\u003e ClearCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearCommand -\u003e Model : setMeetingBook(new MeetingBook())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model -\u003e ClearCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearCommand -\u003e Model : setModuleBook(new ModuleBook())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model -\u003e ClearCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "ClearCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "CommandResult --\u003e ClearCommand : result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearCommand --\u003e[ : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "destroy ClearCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gloon99": 28,
      "jerrylchong": 22
    }
  },
  {
    "path": "docs/diagrams/ExecuteClearTagCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "mainframe sd execute command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"c:ClearTagCommand\" as ClearTagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"clearedPerson:Person\" as Person LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e ClearTagCommand : execute()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate ClearTagCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create Person"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearTagCommand -\u003e Person"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Person"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Person --\u003e ClearTagCommand : clearedPerson"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Person"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearTagCommand -\u003e Model : setPerson(p, clearedPerson)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model --\u003e ClearTagCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearTagCommand -\u003e Model : updatePersonInMeetingBook(p, clearedPerson)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model --\u003e ClearTagCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearTagCommand -\u003e Model : updatePersonInModuleBook(p, clearedPerson)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model --\u003e ClearTagCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearTagCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "CommandResult --\u003e ClearTagCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearTagCommand --\u003e[ : result"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "destroy ClearTagCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 52
    }
  },
  {
    "path": "docs/diagrams/ExecuteDeleteCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "mainframe sd execute command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteCommand -\u003e Model : getUpdatedFilteredPersonList(predicate)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model --\u003e DeleteCommand : people"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "loop for p in people"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteCommand -\u003e Model : deletePerson(p)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteCommand -\u003e Model : updatePersonInMeetingBook(p)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteCommand -\u003e Model : updatePersonInModuleBook(p)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteCommand --\u003e["
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "destroy DeleteCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 52
    }
  },
  {
    "path": "docs/diagrams/ExecuteDeleteTagCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "mainframe sd execute command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"c:DeleteTagCommand\" as DeleteTagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"editedPerson:Person\" as Person LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e DeleteTagCommand : execute()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate DeleteTagCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create Person"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteTagCommand -\u003e Person"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Person"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Person --\u003e DeleteTagCommand : editedPerson"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Person"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteTagCommand -\u003e Model : setPerson(p, editedPerson)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model --\u003e DeleteTagCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteTagCommand -\u003e Model : updatePersonInMeetingBook(p, editedPerson)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model --\u003e DeleteTagCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteTagCommand -\u003e Model : updatePersonInModuleBook(p, editedPerson)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model --\u003e DeleteTagCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteTagCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "CommandResult --\u003e DeleteTagCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteTagCommand --\u003e[ : result"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "destroy DeleteTagCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 52
    }
  },
  {
    "path": "docs/diagrams/ExecuteListCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "mainframe sd execute command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"c:ListCommand\" as ListCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e ListCommand : execute()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ListCommand -\u003e Model : updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Model -\u003e ListCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ListCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "CommandResult --\u003e ListCommand : result"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ListCommand --\u003e[ : result"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "destroy ListCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 32
    }
  },
  {
    "path": "docs/diagrams/FindActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "!pragma useVerticalIf on"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ":User inputs contact find command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":FindCommandParser checks input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "if() then ([input has name and tag prefix])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create predicate that checks if"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Person\u0027s name has any of the given"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "keywords or initials or Person has"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "any of the given tags;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create FindCommand with created"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "elseif() then ([input only has name prefix])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create predicate that checks if"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Person\u0027s name has any of the given"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "keywords or initials;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create FindCommand with created"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "elseif() then ([input only has tag prefix])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create predicate that checks if"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Person has any of the given tags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Create FindCommand with created"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Throw ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "end"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "endif"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Execute the created FindCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Obtain list of Persons from Modduke"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "who pass the predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": ":Display list of Persons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "stop"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gloon99": 26,
      "jerrylchong": 7
    }
  },
  {
    "path": "docs/diagrams/FzfQuerySequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Actor User"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "participant \"commandTextField:TextField\" as TextField UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "participant \"fzfMod:FzfModule\" as FzfModule LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "participant \"query:TextField\" as Query LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "loop isFzfMode"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    User -\u003e TextField : Presses any key"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    activate TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    TextField -\u003e Query : fireEvent(keyPress)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    TextField -\u003e Query  : getText()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    activate Query"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    Query --\u003e TextField : query"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    deactivate Query"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    TextField -\u003e FzfModule : refreshMenu(query)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    activate FzfModule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    FzfModule --\u003eTextField"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    deactivate FzfModule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    TextField-[hidden]-\u003eUser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    deactivate TextField"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "end"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 34
    }
  },
  {
    "path": "docs/diagrams/GetAddTagCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "mainframe sd get resultant command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":AddTagCommandParser\" as AddTagCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":ArgumentTokenizer\" as ArgumentTokenizer LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"argMultimap:ArgumentMultimap\" as ArgumentMultimap LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"tagPersonDescriptor: TagPersonDescriptor\" as TagPersonDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"c:AddTagCommand\" as AddTagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create AddTagCommandParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e AddTagCommandParser : AddTagCommandParser()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate AddTagCommandParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "AddTagCommandParser --\u003e["
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate AddTagCommandParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e AddTagCommandParser : parse(\"Alex Yeoh t/friends\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate AddTagCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "AddTagCommandParser -\u003e ArgumentTokenizer : tokenize(args, PREFIX_TAG)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate ArgumentTokenizer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create ArgumentMultimap"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ArgumentTokenizer -\u003e ArgumentMultimap : ArgumentMultimap()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ArgumentMultimap --\u003e ArgumentTokenizer : argMultimap"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate ArgumentMultimap"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ArgumentTokenizer --\u003e AddTagCommandParser : argMultimap"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate ArgumentTokenizer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create TagPersonDescriptor"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "AddTagCommandParser -\u003e TagPersonDescriptor : TagPersonDescriptor()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate TagPersonDescriptor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "TagPersonDescriptor --\u003e AddTagCommandParser : tagPersonDescriptor"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate TagPersonDescriptor"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "AddTagCommandParser -\u003e ArgumentMultimap : getAllValues(PREFIX_TAG)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ArgumentMultimap --\u003e AddTagCommandParser : tagList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate ArgumentMultimap"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "alt parseTagsForEdit(tagList).isPresent()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "AddTagCommandParser -\u003e TagPersonDescriptor : setTags(value)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate TagPersonDescriptor"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "TagPersonDescriptor --\u003e AddTagCommandParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate TagPersonDescriptor"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create AddTagCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "AddTagCommandParser -\u003e AddTagCommand : AddTagCommand(name, tagPersonDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate AddTagCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "AddTagCommand --\u003e AddTagCommandParser : c"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate AddTagCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "AddTagCommandParser --\u003e[ : c"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "destroy AddTagCommandParser"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 66
    }
  },
  {
    "path": "docs/diagrams/GetClearCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "mainframe sd get resultant command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"c:ClearCommand\" as ClearCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create ClearCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e ClearCommand : ClearCommand()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate ClearCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearCommand --\u003e[ : c"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate ClearCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 15
    }
  },
  {
    "path": "docs/diagrams/GetClearTagCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "mainframe sd get resultant command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":ClearTagCommandParser\" as ClearTagCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"c:ClearTagCommand\" as ClearTagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create ClearTagCommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e ClearTagCommandParser : ClearTagCommandParser()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate ClearTagCommandParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearTagCommandParser --\u003e["
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate ClearTagCommandParser"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e ClearTagCommandParser : parse(\"Alex Yeoh\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate ClearTagCommandParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearTagCommandParser -\u003e ParserUtil : parseName(\"Alex Yeoh\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ParserUtil --\u003e ClearTagCommandParser : name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create ClearTagCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearTagCommandParser -\u003e ClearTagCommand : ClearTagCommand(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate ClearTagCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearTagCommand --\u003e ClearTagCommandParser : c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate ClearTagCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ClearTagCommandParser --\u003e[ : c"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "destroy ClearTagCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 36
    }
  },
  {
    "path": "docs/diagrams/GetDeleteCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "mainframe sd get resultant command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "participant \":ArgumentTokenizer\" as ArgumentTokenizer LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "participant \"argMultimap:ArgumentMultimap\" as ArgumentMultimap LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "participant \":NameContainsKeywordsPredicate\" as NameContainsKeywordsPredicate LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e DeleteCommandParser : DeleteCommandParser()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteCommandParser --\u003e["
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e DeleteCommandParser : parse(\" n/Alex Yeoh\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "DeleteCommandParser -\u003e ArgumentTokenizer : tokenize(args, PREFIX_TAG)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "activate ArgumentTokenizer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "create ArgumentMultimap"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "ArgumentTokenizer -\u003e ArgumentMultimap : ArgumentMultimap()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "ArgumentMultimap --\u003e ArgumentTokenizer : argMultimap"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "deactivate ArgumentMultimap"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "ArgumentTokenizer --\u003e DeleteCommandParser : argMultimap"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "deactivate ArgumentTokenizer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "DeleteCommandParser -\u003e ArgumentMultimap : getAllValues(PREFIX_NAME)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "ArgumentMultimap -\u003e DeleteCommandParser : names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "deactivate ArgumentMultimap"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "create NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "DeleteCommandParser -\u003e NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "activate NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "NameContainsKeywordsPredicate --\u003e DeleteCommandParser : predicate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "deactivate NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteCommandParser --\u003e[: d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gloon99": 27,
      "jerrylchong": 7,
      "-": 24,
      "royleochan": 1
    }
  },
  {
    "path": "docs/diagrams/GetDeleteTagCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "mainframe sd get resultant command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":DeleteTagCommandParser\" as DeleteTagCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":ArgumentTokenizer\" as ArgumentTokenizer LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"argMultimap:ArgumentMultimap\" as ArgumentMultimap LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"c:DeleteTagCommand\" as DeleteTagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create DeleteTagCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e DeleteTagCommandParser : DeleteTagCommandParser()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate DeleteTagCommandParser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteTagCommandParser --\u003e["
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate DeleteTagCommandParser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e DeleteTagCommandParser : parse(\"Alex Yeoh t/friends\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate DeleteTagCommandParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteTagCommandParser -\u003e ArgumentTokenizer : tokenize(args, PREFIX_TAG)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate ArgumentTokenizer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create ArgumentMultimap"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ArgumentTokenizer -\u003e ArgumentMultimap : ArgumentMultimap()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ArgumentMultimap --\u003e ArgumentTokenizer : argMultimap"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate ArgumentMultimap"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ArgumentTokenizer --\u003e DeleteTagCommandParser : argMultimap"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate ArgumentTokenizer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteTagCommandParser -\u003e ArgumentMultimap : getAllValues(PREFIX_TAG)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate ArgumentMultimap"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ArgumentMultimap --\u003e DeleteTagCommandParser : tagList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate ArgumentMultimap"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create DeleteTagCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteTagCommandParser -\u003e DeleteTagCommand : DeleteTagCommand(name, tagsToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate DeleteTagCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteTagCommand --\u003e DeleteTagCommandParser : c"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate DeleteTagCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "DeleteTagCommandParser --\u003e[ : c"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "destroy DeleteTagCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 50
    }
  },
  {
    "path": "docs/diagrams/GetListCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "mainframe sd get resultant command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \"c:ListCommand\" as ListCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "create ListCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e ListCommand : ListCommand()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ListCommand --\u003e[ : c"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 15
    }
  },
  {
    "path": "docs/diagrams/HelpWindowActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ":User executes help command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "if () then ([command is invalid])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    :Throw ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    end"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    :Command is executed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    :HelpWindow removes existing stylesheet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    :HelpWindow checks for the current theme;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "if () then ([current theme is dark theme])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    :HelpWindow adds and uses dark theme stylesheet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else ([current theme is light theme])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    :HelpWindow adds and uses light theme stylesheet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": ":HelpWindow is shown;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "stop"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "royleochan": 21
    }
  },
  {
    "path": "docs/diagrams/ListModuleActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ":User inputs module list command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ":ListModuleCommandParser checks input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "if() then ([Not all inputs are valid])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    :Throw ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    end"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "else ([All inputs are valid])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    : Checks if module exists within model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    if() then ([No])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    : Throws CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    end"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    else ([Yes])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        : Filters all the contacts who exist within the module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        : Updates ContactListPanel in the UI;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 17
    }
  },
  {
    "path": "docs/diagrams/ShowTimelineSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"timeline\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(timeline)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "logic -[LOGIC_COLOR]\u003e ui : return CommandResult"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "alt isShowHelp"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    ui -\u003e ui : handleHelp()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "else isExit"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    ui-\u003e ui : handleExit()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "else isTriggerUpdate"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    ui-\u003e ui : update()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "else isShowTimeline"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    ui-\u003e ui : handleShowTimeline()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else isTriggerUpdateTimeline"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui-\u003e ui : updateTimeline()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else triggerLightTheme"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui-\u003e ui : setStyleSheet(Themes.LIGHT_THEME)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else triggerDarkTheme"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui-\u003e ui : setStyleSheet(Themes.DARK_THEME)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "else else"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "end"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "ui -[UI_COLOR]\u003e user : TimelineWindow shown or focused"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gloon99": 37,
      "royleochan": 12
    }
  },
  {
    "path": "docs/diagrams/SwitchThemeSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"light\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(light)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "logic -[LOGIC_COLOR]\u003e ui : return CommandResult"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "alt isShowHelp"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui -\u003e ui : handleHelp()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else isExit"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui-\u003e ui : handleExit()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else isTriggerUpdate"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui-\u003e ui : update()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else isShowTimeline"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui-\u003e ui : handleShowTimeline()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else isTriggerUpdateTimeline"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui-\u003e ui : updateTimeline()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else triggerLightTheme"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui-\u003e ui : setStyleSheet(Themes.LIGHT_THEME)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else triggerDarkTheme"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui-\u003e ui : setStyleSheet(Themes.DARK_THEME)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else else"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "end"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "ui -[UI_COLOR]\u003e user : Light theme set successfully"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "royleochan": 49
    }
  },
  {
    "path": "docs/diagrams/TimelineWindowClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Class TimelineWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Class TimelineSection"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Class TimelineMeetingCard"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "HiddenOutside .down.\u003e Ui"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "UiManager .up.|\u003e Ui"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "UiManager -right-\u003e MainWindow"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "MainWindow -right-\u003e TimelineWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "TimelineWindow -right-\u003e TimelineSection"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "TimelineSection -right-\u003e TimelineMeetingCard"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "MainWindow -up-|\u003e UiPart"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "TimelineWindow -up-|\u003e UiPart"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "TimelineSection -up-|\u003e UiPart"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "TimelineMeetingCard -up-|\u003e UiPart"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "UiManager --\u003e Logic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "MainWindow --\u003e Logic"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "TimelineWindow --\u003e Logic"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "TimelineMeetingCard ..\u003e Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gloon99": 46
    }
  },
  {
    "path": "docs/diagrams/UserInputSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[-\u003e LogicManager : execute(userInput)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(userInput)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ref over AddressBookParser : get resultant command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "AddressBookParser --\u003e LogicManager : command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "ref over LogicManager, Model : execute command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 28
    }
  },
  {
    "path": "docs/diagrams/ViewMeetingActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "if () then ([command is invalid])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    :Throw ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    end"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    :Command is executed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "if () then ([command is a edit"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": " or delete command])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    if () then ([command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    affects"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    selected meeting])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        :Set the selected meeting to be the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        meeting with updated details;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    else([else])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    :CommandResult is created"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    with triggerUpdate set to true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    :MeetingDetailsPanel Ui gets updated;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    :CommandResult is created"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    with triggerUpdate set to false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "stop"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "royleochan": 32
    }
  },
  {
    "path": "docs/diagrams/ViewMeetingClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "skinparam ClassFontColor black"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "skinparam ClassBorderColor black"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "skinparam ClassBackgroundColor skyblue"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "skinparam classAttributeFontColor black"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "show members"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "hide empty members"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    class \"MeetingName\" as MeetingName {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    class \"Module\" as Module {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    class \"Meeting\" as Meeting {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    class \"ModelManager\" as ModelManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        +getSelectedMeeting(): Meeting"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        +setSelectedMeeting(target: Meeting)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    class \"LogicManager\" as LogicManager {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        +getSelectedMeeting(): Meeting"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    class \"CommandResult\" as CommandResult {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        - triggerUpdate: boolean"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    class \"ViewMeetingCommand\" as ViewMeetingCommand {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        - targetModuleName: ModuleName"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        - targetMeetingName: MeetingName"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        + execute(model: Model): CommandResult"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    class \"MeetingBookParser\" as MeetingBookParser {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        +parseCommand(userInput: String): Command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    class \"ViewMeetingCommandParser\" as ViewMeetingCommandParser {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        +parse(args: String): ViewMeetingCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    class \"{abstract}\\nCommand\" as Command {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package Ui \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    class \"MainWindow\" as MainWindow {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        - executeCommand(commandText: String): CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        + updateSelectedMeeting()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    class \"MeetingDetailsPanel\" as MeetingDetailsPanel {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        + meeting: Meeting"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "LogicManager --\u003e \"1\"ModelManager"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "LogicManager ..\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Command ..\u003e ModelManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Meeting --\u003e \"1\"MeetingName"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Meeting --\u003e \"1\"Module"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "ModelManager --\u003e \"1\"Meeting"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "ViewMeetingCommand -|\u003e Command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Command ..\u003e CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "MainWindow ..\u003e MeetingDetailsPanel : creates \u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "ViewMeetingCommandParser ..\u003e ViewMeetingCommand : creates \u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "MainWindow --\u003e \"1\"LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "LogicManager --\u003e \"1\"MeetingBookParser"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "MeetingBookParser ..\u003e ViewMeetingCommandParser : creates \u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "royleochan": 81
    }
  },
  {
    "path": "docs/diagrams/ViewMeetingSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"meeting view m/CS2100 n/Report Discussion\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "ui -[UI_COLOR]\u003e logic : commandExecute(meeting view m/CS2100 n/Report Discussion)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : setSelectedMeeting(meetingToView)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "alt isShowHelp"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui -\u003e ui : handleHelp()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else isExit"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui-\u003e ui : handleExit()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else isTriggerUpdate"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui-\u003e ui : updateSelectedMeeting()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else isShowTimeline"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui-\u003e ui : handleShowTimeline()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else isTriggerUpdateTimeline"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui-\u003e ui : updateTimeline()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else triggerLightTheme"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui-\u003e ui : setStyleSheet(Themes.LIGHT_THEME)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else triggerDarkTheme"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    ui-\u003e ui : setStyleSheet(Themes.DARK_THEME)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    activate ui UI_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    deactivate ui UI_COLOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "else else"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "end"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "ui--[UI_COLOR]\u003e user : update selected meeting"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "royleochan": 57
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "title: Modduke"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-F10-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F10-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103-F10-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "**Modduke is a integrated addressbook with scheduler functionalities targeted at NUS Students.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* If you are interested in using Modduke, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* If you are interested about developing Modduke, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5), [TestFx](https://github.com/TestFX/TestFX)"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 1,
      "-": 12,
      "royleochan": 6
    }
  },
  {
    "path": "docs/team/ekamsinghpandher.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "title: Ekam Singh\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "## Project: Modduke"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Modduke - Modduke is a desktop app targeted towards NUS students. It allows them to easily manage their contacts, modules and meetings during the semester. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* **New Feature**: Added a module add command that allows users to add modules to the Modduke. (Pull Request: [\\#113](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/113))"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * What it does: It is a feature where users are able to create and add Modules to Modduke and store them in the module book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Justification: This feature was implemented for the target audience of NUS students who may want to store contacts of all modules together"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Highlights: This feature allows users to group contacts together based on shared modules. The implementation required the extensive use of object oriented paradigms as well as a good understanding of the codebase."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* **New Feature**: Added a module list command that allows users to list all the contacts within a selected module.(Pull Request: [\\#118](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/118))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * What it does: Allows the user to list all the contacts within a given module in order to quickly find contacts that are specific to the module."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Justification: This feature improved the user experience drastically as it provided users a method to quickly filtered their contacts in a manner that was especially relevant to them. As contact lists could get long, this command made it much easier to identify contacts within a certain module."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Highlights: The implementation of this command required a solid understanding of the code base and required refactoring old module commands in order to ensure no duplicity of modules."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* **New Feature**: Added a module delete command that allowed users to delete modules in Modduke.(Pull Request: [\\#158](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/158))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * What it does: Allows users to delete modules from the module book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Justification: This feature was necessary to delete old modules or modules the user did not want in the module book anymore."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Highlights: This feature was technically complicated as it also effected meetings and the UI."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* **New Feature**: Added a module edit command that allowed users to edit modules in Modduke. (Pull Request: [\\#157](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/157)) "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * What it does: Allows users to edit modules in order to update contacts stored within the module or to edit any mistakes made during the module add command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Justification: This feature improved the user experience drastically as now users are able to edit modules and are able to add contacts to pre-existing modules."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Highlights: This implementation proposed challenges with the design of other features, especially meetings, where editing a module needed to update the relevant meetings as well. It also required design choices for how meetings would be affected when all participants within the meetings were changed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* **New Feature**: Added a command history feature to the UI."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * What it does: Allows users to toggle to previous commands using the up and down keys similar to command lines.(Pull Request: [\\#254](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/254))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Justification: This feature improved the user experience and made adding similar commands much easier as they could toggle to a similar command and simply edit the details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Highlights: This was a complex feature to implement as it required a way to maintain the state of user\u0027s commands as well as toggle capability that traversed through the history."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Updated the UI for modules to show professors and TA\u0027s when listing participants in the module"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Added Classmates Badges to the modules list UI"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Wrote Tests for module commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Modified the argument multi-mapper to check for duplicate prefixes when not allowed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* **Code contributed**: [RepoSense Link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dekamsinghpandher\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dEkamSinghPandher\u0026tabRepo\u003dAY2021S1-CS2103-F10-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    * Added documentation for the commands   `module add`, `module delete`, `module edit`, `module list` and the command history feature"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    * Added documentation for the commands   `module add`, `module delete`, `module edit`, `module list` and the command history feature"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 52
    }
  },
  {
    "path": "docs/team/gloon99.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "title: Yee Loon\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "## Project: Modduke"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Modduke - Modduke is a desktop app targeted towards NUS students. It allows them to easily manage their contacts, modules and meetings during the semester. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* **New Feature**: Added a meeting add command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * What it does: Users are able to create and add new meetings of a module with contacts from that module at a specified date and time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Justification: This feature improves the product significantly for an NUS student with multiple modules that have many group based projects so they are able to easily keep tabs on their schedule."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Highlights: This enchancement required a good understanding of the various architectural components of the code as extensive additions were made to the logic and model components."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  It was also extremely challenging because the command is heavily dependent on person and module, and good integration of each part was needed for the feature to function properly."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Credits: Code inspiration was taken from AB3\u0027s existing add contact feature."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* **New Feature**: Added a meeting delete command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * What it does: Users are able to delete existing meetings."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Justification: This feature improves the product significantly for an NUS student with a changing schedule so that they are able to remove any meetings that have been cancelled."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  Additionally, meetings that have been completed or are overdue can also be removed to facilitate organization in the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Credits: Code inspiration was taken from AB3\u0027s existing delete contact feature."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* **New Feature**: Added a meeting edit command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * What it does: Users are able to edit an existing command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Justification: This feature improves the product significantly for an NUS student with a changing schedule so that they are able to edit important details of their meetings to keep the application updated."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  Additionally, it allows any mistakes made when adding the meeting to be rectified."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  All the constraints of person and module has to also be accomodated for, and therefore required in-depth understanding of how those features are implemented."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Credits: Code inspiration was taken from AB3\u0027s existing edit contact feature."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* **New Feature**: Added a timeline feature so that users can view their meetings in a visual form"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * What it does: Users are able to visualise their meetings in a timeline format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Justification: This feature improves the product significantly because a NUS student with many meetings is able to have a bird eye\u0027s view of their meetings and also know when meetings are overdue."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Highlights: This enhancement not only required understanding of good UI/UX design, but also comprehensive knowledge of the logic component so that the command to trigger the timeline window can be implemented."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dgloon99\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dgloon99\u0026tabRepo\u003dAY2021S1-CS2103-F10-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  **Note**: Large chunks of code were accidentally deleted and a pull request revert had to be committed. Hence, a large portion of code attributed to this developer was not actually written by them."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  The pull request revert in question is [\\#170](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/170)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  The following includes a list of the features and enhancements (including documentation) detected by reposense that are not written by this developer:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * contact list, clear, delete, find"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * label add, clear, delete"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * copy"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * meeting view"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * autocomplete"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Wrote tests for the meeting model, meeting add, meeting delete and meeting edit (Pull requests [\\#233](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/233), [\\#234](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/234))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Made minor tweaks to timeline GUI for light and dark mode to make it more aesthetically pleasing (Pull request [\\##260](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/260))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    * Added documentation for the features `meeting add`, `meeting delete`, `meeting edit`, `meeting list` and `timeline` (Pull requests [\\##181](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/181), [\\#276](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/234))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    * Added implementation details of the `meeting add`, `meeting delete`, `meeting edit`, `meeting list` and `timeline` features (Pull request [\\##237](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/237) [\\#276](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/276))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gloon99": 61
    }
  },
  {
    "path": "docs/team/jerrylchong.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "title: Jerryl Chong\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "## Project: Modduke"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Modduke is a desktop app targeted towards NUS students. It allows them to easily manage their contacts, modules and meetings during the semester. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* **New Feature**: Added the feature where users can copy email address or phone numbers of multiple contacts to their system clipboard using the copy command. ([\\#155](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/155))"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * What it does: Allows the user to copy email address or phone numbers of multiple contacts to their system clipboard."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can allow the app copy the information for them. This prevents typing mistakes and helps make copying information from multiple contacts more convenient."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * Highlights: This enhancement required understanding of how FilteredLists work and understanding of how contacts are stored in meetings and modules. It required analysis of design alternatives."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * Changed `list` command to `contact list` ([\\#81](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/81))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * Changed `clear` command to `contact clear` ([\\#82](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/82))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * Added commands specifically for tagging, such as `tag add`, `tag delete` and `tag clear` for more flexibility when using tags ([\\#83](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/83), [\\#144](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/144), [\\#241](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/241))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * Changed `find` command to `contact find` ([\\#226](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/226))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * Allowed finding of contacts by tags and initials in addition to keywords ([\\#105](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/105), [\\#226](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/226))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * Added ability for user to delete multiple contacts by specifying names, tags or modules ([\\#156](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/156))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * Update `contact clear` to delete all modules and meetings ([\\#224](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/224))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djerrylchong\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * Regularly updated user guide and test cases upon adding new functional code"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    * Added documentation for the commands  `contact delete`, `contact clear`, `contact list`, `contact find`, `tag add`, `tag delete`, `tag clear`, `copy email` and `copy phone`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    * Standardised parameter of contact\u0027s name to `CONTACT_NAME`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    * Added implementation details of the `contact delete`, `contact clear`, `contact list`, `contact find`, `tag add`, `tag delete`, `tag clear`, `copy email` and `copy phone` features."
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 37
    }
  },
  {
    "path": "docs/team/nopenotj.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "title: Jay Chua\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "## Project: Modduke"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Modduke is a desktop app targeted towards NUS students. It allows them to easily manage their contacts, modules and meetings during the semester. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 13 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* **New Feature**: Autocomplete TextField Module (Pull Requests [\\#143](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/143), [\\#249](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/249), [\\#265](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/265))"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * What it does: Allows users to generate suggestions for contact names, module names and meeting names."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * Justification: This feature improves the product significantly because some of our commands require the full names of contacts, meetings or modules"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  that may be laborious to type it all out. This feature saves the user time and effort."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * Highlights: Because the feature does not follow the existing AB3 command pattern, this enhancement required some preliminary research into the JavaFX\u0027s"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  TextField library to figure out how to trigger and execute autocompletion. As such it required an in-depth analysis of design alternatives, and a lot of time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  doing trial and error with different implementations. Additionally, the implementation required an understanding of the JavaFx\u0027s event handling mechanisms which"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  was challenging especially when it came to dealing with edge cases."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * Credits: Took inspiration from the zsh autocomplete function."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* **New Feature**: Fuzzy Find Completion TextField Module (Pull Requests [\\#236](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/236))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * What it does: Allows users to generate suggestions for any user input. This feature was made available in v1.4 and provide all the benefits of the Autocomplete module and more."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * Justification: This feature improves the product significantly compared to the autocomplete function released in v1.3 because the command prefix for Autocomplete may be unintuitive to fill in for some users"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  and also there was a lack of a GUI to show available suggestions. This feature greatly improves the UX."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * Highlights: While searching online, found a very interesting solution on Stack Overflow (Link stated in credits), however it was not just a plug and play solution as the solution only supported"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  the autocompletion of only 1 word for the whole field and it is not ideal for Modduke. So in coming up with a solution, I made this new Fuzzy Find Completion (fzf) module that injects fzf capabilities to a JavaFx TextField."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  It was quite a difficult task because I wanted the menu to appear right at caret\u0027s position where the FZF was triggered and also allow users to continue to use the arrow keys to navigate the fzf suggestions. The most arduous part of this implementation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  was finetuning how the fzf was triggered and how to properly detect the \"query\" with which the suggestions will be generated on. This includes edge cases where users activate fzf in the middle of a String of text."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  Additionally, setting up testFx and getting it to work was also very time-consuming."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * Credits: Took inspiration from [this solution](https://stackoverflow.com/questions/36861056/javafx-textfield-auto-suggestions)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dnopenotj\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * Updated the GUI to show Meeting and Module Panels (Pull requests [\\#109](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/109), [\\#93](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/93))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * Made Datetime in Meetings to be more user-friendly for readers and sort it by date and time (Pull requests [\\#114](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/114), [\\#120](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/120))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * Wrote tests for meetings to increase coverage from 51% to 52% (Pull requests [\\#121](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/121))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * Wrote tests for FZF and Autocomplete Modules to increase coverage from 0% to ~100% for these 2 classes (Pull requests [\\#264](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/264) , [\\#249](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/249))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * Add shortcuts for CommandBox (Pull requests [\\#143](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/143), [\\#236](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/236))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    * Added documentation for the features `Autocompletion` and `Fuzzy Find Completion` [\\#143](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/143) , [\\#236](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/236)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    * Added implementation details of the `Autocomplete` feature. [\\#161](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/161) , [\\#271](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/271)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    * Added implementation details of the `Fuzzy Find Completion` feature. [\\#278](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/278)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  * Integrated a TestFx to the project ([\\#249](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/249))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nopenotj": 54
    }
  },
  {
    "path": "docs/team/royleochan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "title: Roy Chan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "## Project: Modduke"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Modduke - Modduke is a desktop app targeted towards NUS students. It allows them to easily manage their contacts, modules and meetings during the semester. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* **New Feature**: Added the feature where users can manage agendas and notes for meetings in the meeting add and meeting view command. ([\\#159](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/159))"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * What it does: Allows the user to add and edit both agendas and notes for meetings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Justification: This feature improves the product significantly for a NUS student who have to manage agendas and notes regarding project meetings or consultations for a module."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Highlights: This enhancement required understanding across several architectural components which includes the logic, model and storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* **New Feature**: Added a meeting view command that allows users to view a selected meeting\u0027s full details. ([\\#159](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/159), [\\#163](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/163))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * What it does: Allows the user to view all the details for the selected meeting. The user can toggle between viewing the meeting\u0027s agendas and the meeting\u0027s notes using the GUI\u0027s tab pane. Any updates to the meeting will also be immediately reflected and updated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Justification: This feature improves the product significantly because a NUS student can make reference to the meeting\u0027s agendas and notes during the meeting to stay on track throughout the meeting or before the meeting to prepare adequately for the meeting. This was a challenging feature because the user interface had to observe for any changes to the selected meeting such that it will get updated immediately."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. Hence, it required an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* **New Feature**: Added a light command and dark command that allows users to switch between light and dark theme in Modduke. ([\\#244](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/244))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * What it does: Allows the user to switch between dark and light themes according to their preference."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Justification: This feature improves the product by enhancing overall user experience. Many applications allow users the flexibility to change between their preferred mode since for some users, dark mode reduces eye strain. There were altogether 3 separate windows which needed to be styled and updated upon a change of theme: the main window, the help window as well as the timeline window. The implementation required the application to support dynamic styling for all 3 windows where the command would activate and update each window with the correct stylesheet. Additionally, it required significant experimentation with color palettes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Highlights: This enhancement not only required understanding of good UI/UX design, but also  consideration of the appropriate design pattern since there might be more themes that can be added in the future making extensibility of the design important."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Updated the GUI dark color scheme according to Material UI design standards ([\\#110](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/110/files))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Changed add command to contact add command ([\\#77](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/77))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Updated contact names to be unique and changed edit and delete commands to contact edit and contact delete commands. Also switched from index-based commands to name-based commands. ([\\#80](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/80), [\\#87](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/87))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Ensured that editing or deleting a contact is integrated correctly with modules and meetings if the edited or deleted contact is part of any module or meeting. ([\\#134](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/134))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Extended the person class to have 3 types: Contact, Professor and TA. ([\\#147](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/147))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Extended help command to give a clickable link to Modduke\u0027s user guide. ([\\#160](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/160))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* **Refactoring**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Removed address from the application ([\\#76](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/76)))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Refactored and standardised the command formats ([\\#77](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/77/files))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003droyleochan\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Set up the GitHub team organisation and repository"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Managed releases `v1.2.1` - `v1.3` (2 releases) on GitHub"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Edited and uploaded video demonstrations for release `v1.2` - `v1.3` ([v1.2](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/110/files), [v1.3](https://www.youtube.com/watch?v\u003d3WY8xRT7VIg\u0026ab_channel\u003dRoyChan))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Managed issue tracker"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Regularly updated user guide and test cases upon adding new functional code"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Modduke Product Website:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    * Changed website theme to use solarized minima skin ([\\#64](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/64/files))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    * Added documentation for the commands  `light`, `dark`, `contact add`, `contact delete`, `contact edit` and `meeting view`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    * Added implementation details of the `meeting view` feature including alternative design considerations."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    * Added implementation details of the `light` and `dark` feature."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Contributed to forum discussions (examples: [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/36#issuecomment-677478476), [2](https://github.com/nus-cs2103-AY2021S1/forum/issues/52#issuecomment-678850772), [3](https://github.com/nus-cs2103-AY2021S1/forum/issues/147#issuecomment-684919663), [4](https://github.com/nus-cs2103-AY2021S1/forum/issues/173#issuecomment-687621301))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  * Integrated jekyll-remote-theme to the project ([\\#64](https://github.com/AY2021S1-CS2103-F10-2/tp/pull/64/files))"
      }
    ],
    "authorContributionMap": {
      "royleochan": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.application.HostServices;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.storage.JsonMeetingBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.storage.JsonModuleBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.storage.MeetingBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.storage.ModuleBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Modduke ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingBookStorage meetingBookStorage \u003d new JsonMeetingBookStorage(userPrefs.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ModuleBookStorage moduleBookStorage \u003d new JsonModuleBookStorage(userPrefs.getModuleBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, meetingBookStorage, moduleBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        //@@author royleochan"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        HostServices hostServices \u003d getHostServices();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ui \u003d new UiManager(logic, hostServices);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        ReadOnlyAddressBook addressBookInitialData;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            addressBookInitialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            addressBookInitialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            addressBookInitialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Optional\u003cReadOnlyMeetingBook\u003e meetingBookOptional;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        ReadOnlyMeetingBook meetingBookInitialData;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            meetingBookOptional \u003d storage.readMeetingBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (!meetingBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            meetingBookInitialData \u003d meetingBookOptional.orElseGet(SampleDataUtil::getSampleMeetingBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            meetingBookInitialData \u003d new MeetingBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            meetingBookInitialData \u003d new MeetingBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Optional\u003cReadOnlyModuleBook\u003e moduleBookOptional;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ReadOnlyModuleBook moduleBookInitialData;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            moduleBookOptional \u003d storage.readModuleBook();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            if (!moduleBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            moduleBookInitialData \u003d moduleBookOptional.orElseGet(SampleDataUtil::getSampleModuleBook);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            moduleBookInitialData \u003d new ModuleBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            moduleBookInitialData \u003d new ModuleBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return new ModelManager(addressBookInitialData, meetingBookInitialData, moduleBookInitialData, userPrefs);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 22,
      "EkamSinghPandher": 21,
      "nopenotj": 1,
      "-": 180,
      "royleochan": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1200;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private static final String LOG_FILE \u003d \"modduke.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED \u003d \"The person provided is not in your contacts\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_INVALID_MEETING_DISPLAYED \u003d \"The meeting provided is not in your meeting list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_DISPLAYED \u003d \"The module provided is not in your module list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PREFIX \u003d \"You have entered a duplicate prefix : %s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 2,
      "EkamSinghPandher": 1,
      "-": 12,
      "royleochan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns the user prefs\u0027 meeting book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns the MeetingBook."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @see seedu.address.model.Model#getMeetingBook()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    ReadOnlyMeetingBook getMeetingBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns the selected Meeting."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @see seedu.address.model.Model#getSelectedMeeting()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    Meeting getSelectedMeeting();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of meetings */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    ObservableList\u003cMeeting\u003e getFilteredMeetingList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of modules */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns the user prefs\u0027 module book file path."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Path getModuleBookFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns the ModuleBook."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @see seedu.address.model.Model#getModuleBook()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    ReadOnlyModuleBook getModuleBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 17,
      "EkamSinghPandher": 15,
      "nopenotj": 3,
      "-": 50,
      "royleochan": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.parser.MeetingBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.parser.ModuleBookParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final MeetingBookParser meetingBookParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final ModuleBookParser moduleBookParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetingBookParser \u003d new MeetingBookParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        moduleBookParser \u003d new ModuleBookParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String firstWord \u003d commandText.split(\" \")[0];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (firstWord.equals(\"meeting\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            command \u003d meetingBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        } else if (firstWord.equals(\"module\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            command \u003d moduleBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            storage.saveMeetingBook(model.getMeetingBook());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            storage.saveModuleBook(model.getModuleBook());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return model.getMeetingBookFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public ReadOnlyMeetingBook getMeetingBook() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return model.getMeetingBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Meeting getSelectedMeeting() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return model.getSelectedMeeting(); }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ReadOnlyModuleBook getModuleBook() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return model.getModuleBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return model.getFilteredMeetingList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return model.getModuleBookFilePath();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 29,
      "EkamSinghPandher": 23,
      "-": 80,
      "royleochan": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contact add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "royleochan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGENDA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.commons.SpecialName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": " * Adds a meeting to the meeting book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class AddMeetingCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"meeting add\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a meeting to the meeting book. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_MODULE + \"MODULE \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_NAME + \"MEETING NAME \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_TIME + \"TIME \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_PARTICIPANT + \"PARTICIPANTS... \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + \"[\" + PREFIX_AGENDA + \"AGENDAS]... \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + \"[\" + PREFIX_NOTE + \"NOTES]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_MODULE + \"CS2103 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_NAME + \"weekly meeting \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_DATE + \"2020-09-20 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_TIME + \"10:00 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_PARTICIPANT + \"Alex \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + PREFIX_PARTICIPANT + \"Roy \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + PREFIX_AGENDA + \"Discuss project direction \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + PREFIX_NOTE + \"Alex will be coming late \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New meeting added: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"The meeting [%s] %s already exists in the meeting book\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_PERSON \u003d \"The following person(s): %s are not in the module %s\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_MODULE \u003d \"The given module is not in your module list\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_CONFLICTING_MEETING_TIMES \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            \"The meeting [%s] %s is already occurring at the same date and time\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final ModuleName moduleName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final MeetingName meetingName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final Set\u003cName\u003e nameList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final Set\u003cSpecialName\u003e agendaList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final Set\u003cSpecialName\u003e noteList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Creates an AddMeetingCommand to add a meeting with specified params"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public AddMeetingCommand(ModuleName moduleName, MeetingName meetingName, Date date, Time time, Set\u003cName\u003e nameList,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                             Set\u003cSpecialName\u003e agendaList, Set\u003cSpecialName\u003e noteList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireAllNonNull(moduleName, meetingName, date, time, nameList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.meetingName \u003d meetingName;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.nameList \u003d nameList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.agendaList \u003d agendaList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.noteList \u003d noteList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Creates an AddMeetingCommand to add the specified {@code Meeting}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * For Testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public AddMeetingCommand(Meeting toAdd) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        requireAllNonNull(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.moduleName \u003d toAdd.getModule().getModuleName();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.meetingName \u003d toAdd.getMeetingName();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.date \u003d toAdd.getDate();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.time \u003d toAdd.getTime();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.agendaList \u003d toAdd.getAgendas();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.noteList \u003d toAdd.getNotes();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.nameList \u003d toAdd.getParticipants().stream().map(Person::getName).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!model.hasModuleName(moduleName)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_MODULE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        List\u003cModule\u003e filteredModuleList \u003d model.getFilteredModuleList().stream()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .filter(module -\u003e module.isSameName(moduleName)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Module module \u003d filteredModuleList.get(0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (Meeting meeting : model.getFilteredMeetingList()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (meeting.getModule().equals(module) \u0026\u0026 meeting.getMeetingName().equals(meetingName)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                throw new CommandException("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        String.format(MESSAGE_DUPLICATE_MEETING, module.getModuleName(), meetingName));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (meeting.getDate().equals(date) \u0026\u0026 meeting.getTime().equals(time)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                throw new CommandException("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        String.format(MESSAGE_CONFLICTING_MEETING_TIMES, meeting.getModule().getModuleName(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                meeting.getMeetingName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        List\u003cName\u003e nonExistentPersonNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (Name name : nameList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (!module.hasClassmate(name)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                nonExistentPersonNames.add(name);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!nonExistentPersonNames.isEmpty()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            for (Name name : nonExistentPersonNames) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                sb.append(name + \", \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            String nonExistentPersonNamesString \u003d sb.substring(0, sb.length() - 2);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NONEXISTENT_PERSON, nonExistentPersonNamesString,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    moduleName));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Set\u003cPerson\u003e personSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (Name name : nameList) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            List\u003cPerson\u003e filteredList \u003d model.getFilteredPersonList().stream()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    .filter(person -\u003e person.isSameName(name)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            personSet.addAll(filteredList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Meeting toAdd \u003d new Meeting(module, meetingName, date, time, personSet, agendaList, noteList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        model.addMeeting(toAdd);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                false, false, false, false, true);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                || (other instanceof AddMeetingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 moduleName.equals(((AddMeetingCommand) other).moduleName)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 meetingName.equals(((AddMeetingCommand) other).meetingName)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 date.equals(((AddMeetingCommand) other).date)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 time.equals(((AddMeetingCommand) other).time)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 nameList.equals(((AddMeetingCommand) other).nameList));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gloon99": 138,
      "nopenotj": 12,
      "royleochan": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": " * Adds a meeting to the meeting book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"module add\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module to the timetable. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + PREFIX_NAME + \"MODULE NAME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + PREFIX_PARTICIPANT + \"PARTICIPANT...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"[\" + PREFIX_PARTICIPANT + \"PARTICIPANTS]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + PREFIX_NAME + \"CS2103 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_PARTICIPANT + \"Jay \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_PARTICIPANT + \"Roy\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module is already in the timetable\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_PERSON \u003d \"The following person(s): %s are not in your contacts\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final ModuleName moduleName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final Set\u003cName\u003e nameList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public AddModuleCommand(ModuleName moduleName, Set\u003cName\u003e nameList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(moduleName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(nameList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.nameList \u003d nameList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public AddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.moduleName \u003d module.getModuleName();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.nameList \u003d module.getClassmates().stream().map(Person::getName).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (model.hasModuleName(moduleName)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        List\u003cName\u003e nonExistentPersonNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        for (Name name : nameList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            if (!model.hasPersonName(name)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                nonExistentPersonNames.add(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!nonExistentPersonNames.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            for (Name name : nonExistentPersonNames) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                sb.append(name + \", \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            String nonExistentPersonNamesString \u003d sb.substring(0, sb.length() - 2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NONEXISTENT_PERSON, nonExistentPersonNamesString));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Set\u003cPerson\u003e personList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        for (Name name : nameList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            List\u003cPerson\u003e filteredList \u003d model.getFilteredPersonList().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    .filter(person -\u003e person.isSameName(name)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            personList.addAll(filteredList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module toAdd \u003d new Module(moduleName, personList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            model.addModule(toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        } catch (DuplicateModuleException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                || (other instanceof AddModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                \u0026\u0026 moduleName.equals(((AddModuleCommand) other).moduleName)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                \u0026\u0026 nameList.equals(((AddModuleCommand) other).nameList));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 4,
      "EkamSinghPandher": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.exceptions.PersonTagConstraintException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag add\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a tag to the person specified.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"Parameters: NAME (must be name of person existing in ModDuke) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"Roy \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + PREFIX_TAG + \"classmate\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Tagged Person: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final Name targetName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final TagPersonDescriptor tagPersonDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param targetName of the person in the filtered person list to tag"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tagPersonDescriptor of the tag to be added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public AddTagCommand(Name targetName, TagPersonDescriptor tagPersonDescriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(targetName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(tagPersonDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.targetName \u003d targetName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.tagPersonDescriptor \u003d new TagPersonDescriptor(tagPersonDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        boolean isValidContact \u003d model.hasPersonName(targetName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (!isValidContact) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cPerson\u003e filteredList \u003d model.getFilteredPersonList().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .filter(person -\u003e person.isSameName(targetName)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person personToTag \u003d filteredList.get(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Person taggedPerson \u003d createTaggedPerson(personToTag, tagPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (!personToTag.isSamePerson(taggedPerson) \u0026\u0026 model.hasPerson(taggedPerson)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            model.setPerson(personToTag, taggedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // update meeting book"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            model.updatePersonInMeetingBook(personToTag, taggedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // update module book"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            model.updatePersonInModuleBook(personToTag, taggedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, taggedPerson));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (PersonTagConstraintException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new CommandException(e.getMessage(), e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToTag}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * edited with {@code tagPersonDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Person createTaggedPerson(Person personToTag, TagPersonDescriptor tagPersonDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assert personToTag !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e(personToTag.getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (tagPersonDescriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            updatedTags.addAll(tagPersonDescriptor.getTags().get());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new Person(personToTag.getName(), personToTag.getPhone(), personToTag.getEmail(), updatedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (!(other instanceof AddTagCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        AddTagCommand e \u003d (AddTagCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return targetName.equals(e.targetName)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \u0026\u0026 tagPersonDescriptor.equals(e.tagPersonDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static class TagPersonDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        public TagPersonDescriptor() {}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        public TagPersonDescriptor(TagPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (!(other instanceof TagPersonDescriptor)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            TagPersonDescriptor e \u003d (TagPersonDescriptor) other;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 177
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contact clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All contacts have been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        //@@author jerrylchong"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.setSelectedMeeting(null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.setMeetingBook(new MeetingBook());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.setModuleBook(new ModuleBook());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true, false, true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "jerrylchong": 11,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ClearTagCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag clear\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears all tags of the person specified.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"Parameters: NAME (must be name of person existing in ModDuke) \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"Roy\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final Name targetName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param targetName the specified person"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public ClearTagCommand(Name targetName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(targetName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.targetName \u003d targetName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // check if Person exists in address book"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        boolean isValidContact \u003d model.hasPersonName(targetName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (!isValidContact) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cPerson\u003e filteredList \u003d model.getFilteredPersonList().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .filter(person -\u003e person.isSameName(targetName)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person personToClear \u003d filteredList.get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person clearedPerson \u003d createClearedPerson(personToClear); // clears all tags from Person"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.setPerson(personToClear, clearedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // update meeting book"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.updatePersonInMeetingBook(personToClear, clearedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // update module book"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.updatePersonInModuleBook(personToClear, clearedPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new CommandResult(String.format(\"All tags of person \u0027%s\u0027 have been cleared!\", targetName.toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToClear}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * but with cleared Tags."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Person createClearedPerson(Person personToClear) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assert personToClear !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new Person(personToClear.getName(), personToClear.getPhone(), personToClear.getEmail(), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (!(other instanceof ClearTagCommand)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ClearTagCommand e \u003d (ClearTagCommand) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return targetName.equals(e.targetName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /** Ui should trigger update. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final boolean triggerUpdate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /** The view of the timeline window should be shown. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final boolean showTimeline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /** Ui should trigger update in timeline window. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final boolean triggerUpdateTimeline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /** Ui should set to light theme. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final boolean triggerLightTheme;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /** Ui should set to light theme. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final boolean triggerDarkTheme;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean triggerUpdate,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                         boolean showTimeline, boolean triggerUpdateTimeline) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.triggerUpdate \u003d triggerUpdate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.showTimeline \u003d showTimeline;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.triggerUpdateTimeline \u003d triggerUpdateTimeline;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.triggerLightTheme \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.triggerDarkTheme \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code triggerLightTheme} and {@code triggerDarkTHeme},"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean triggerLightTheme, boolean triggerDarkTheme) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.triggerUpdate \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.showTimeline \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.triggerUpdateTimeline \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.triggerLightTheme \u003d triggerLightTheme;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.triggerDarkTheme \u003d triggerDarkTheme;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public boolean isTriggerUpdate() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return triggerUpdate;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean isShowTimeline() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return showTimeline;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean isTriggerUpdateTimeline() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return triggerUpdateTimeline;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public boolean isTriggerLightTheme() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return triggerLightTheme;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public boolean isTriggerDarkTheme() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return triggerDarkTheme;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 22,
      "-": 71,
      "royleochan": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CopyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.awt.datatransfer.Clipboard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.awt.datatransfer.StringSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class CopyCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"copy\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Copies the email/phone number of the persons \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"who have the specified names, modules or tags.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"Parameters: email/phone (depending on what is to be copied) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"FULL_NAME] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"[\" + PREFIX_MODULE + \"MODULE] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"email \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + PREFIX_TAG + \"classmate\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String MESSAGE_EMAIL_COPIED_TO_CLIPBOARD \u003d \"Contact emails have been copied to your clipboard.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String MESSAGE_PHONE_COPIED_TO_CLIPBOARD \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            \"Contact phone numbers have been copied to your clipboard.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final PersonPredicate predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final boolean isEmail;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final List\u003cModuleName\u003e moduleNames;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param predicate the predicate based on the names, modules and tags given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param isEmail boolean to check if email or phone number is to be copied"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public CopyCommand(PersonPredicate predicate, boolean isEmail, List\u003cModuleName\u003e moduleNames) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.isEmail \u003d isEmail;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.moduleNames \u003d moduleNames;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cPerson\u003e people;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (moduleNames.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // finds Persons that match the predicate only"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            people \u003d model.getUpdatedFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // finds Persons that match the predicate and Persons that have the given Modules"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            people \u003d model.getUpdatedFilteredPersonList(predicate, moduleNames);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (people.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new CommandException(\"No contact has the given arguments.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String results;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (isEmail) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // gets email addresses from Persons in people"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            results \u003d people.stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    .map(p -\u003e p.getEmail().toString())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    .reduce(\"\", (x, y) -\u003e x + \" \" + y);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // gets phone numbers from Persons in people"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            results \u003d people.stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    .map(p -\u003e p.getPhone().toString())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    .reduce(\"\", (x, y) -\u003e x + \" \" + y);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // copies results to clipboard"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        StringSelection selection \u003d new StringSelection(results);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Clipboard clipboard \u003d Toolkit.getDefaultToolkit().getSystemClipboard();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        clipboard.setContents(selection, selection);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (isEmail) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new CommandResult(MESSAGE_EMAIL_COPIED_TO_CLIPBOARD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new CommandResult(MESSAGE_PHONE_COPIED_TO_CLIPBOARD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (other instanceof CopyCommand) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            CopyCommand that \u003d (CopyCommand) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return predicate.equals(that.predicate)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    \u0026\u0026 isEmail \u003d\u003d that.isEmail"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    \u0026\u0026 moduleNames.equals(that.moduleNames);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DarkThemeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Sets the theme to dark theme."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class DarkThemeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"dark\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String SUCCESS_MESSAGE \u003d \"Dark theme set successfully.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new CommandResult(SUCCESS_MESSAGE, false, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contact delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \": Deletes the persons who have the specified names, modules or tags.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"FULL_NAME] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"[\" + PREFIX_MODULE + \"MODULE] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/Roy Chan t/friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted People: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final PersonPredicate predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final List\u003cModuleName\u003e moduleNames;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param predicate the predicate based on the names, modules and tags given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public DeleteCommand(PersonPredicate predicate, List\u003cModuleName\u003e moduleNames) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.moduleNames \u003d moduleNames;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cPerson\u003e people;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (moduleNames.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // finds Persons that match the predicate only"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            people \u003d new ArrayList\u003c\u003e(model.getUpdatedFilteredPersonList(predicate));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // finds Persons that match the predicate and Persons that have the given Modules"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            people \u003d new ArrayList\u003c\u003e(model.getUpdatedFilteredPersonList(predicate, moduleNames));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (people.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new CommandException(\"No contact has the given arguments.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cPerson\u003e peopleCopy \u003d new ArrayList\u003c\u003e(people);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // Update address book"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        people.stream().forEach(p -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            model.deletePerson(p); // delete in AddressBook"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            model.updatePersonInMeetingBook(p); // delete in MeetingBook"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            model.updatePersonInModuleBook(p); // delete in ModuleBook"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String deletedNames \u003d peopleCopy.stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .map(p -\u003e p.getName().toString())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .reduce(\"\", (x, y) -\u003e x + y + \", \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        deletedNames \u003d deletedNames.substring(0, deletedNames.length() - 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedNames),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                false, false, true, false, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \u0026\u0026 predicate.equals(((DeleteCommand) other).predicate)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \u0026\u0026 moduleNames.equals(((DeleteCommand) other).moduleNames)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 6,
      "jerrylchong": 40,
      "-": 37,
      "royleochan": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class DeleteMeetingCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"meeting delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \": Deletes the meeting identified by the [MODULE] and name used in the displayed meeting list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_MODULE + \"MODULE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_NAME + \"MEETING NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_MODULE + \"CS2103 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_NAME + \"weekly meeting\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_DELETE_MEETING_SUCCESS \u003d \"Deleted Meeting: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final ModuleName targetModuleName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final MeetingName targetMeetingName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @param targetModuleName name of the module that the soon to be deleted meeting belongs to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @param targetMeetingName name of the soon to be deleted meeting"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public DeleteMeetingCommand(ModuleName targetModuleName, MeetingName targetMeetingName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.targetModuleName \u003d targetModuleName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.targetMeetingName \u003d targetMeetingName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Creates a DeleteMeetingCommand to delete the specified {@code Meeting}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * For Testing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public DeleteMeetingCommand(Meeting meeting) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.targetModuleName \u003d meeting.getModule().getModuleName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.targetMeetingName \u003d meeting.getMeetingName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        boolean isValidModule \u003d model.hasModuleName(targetModuleName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!isValidModule) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        List\u003cModule\u003e filteredMeetingList \u003d model.getFilteredModuleList().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .filter(module -\u003e module.isSameName(targetModuleName)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Module module \u003d filteredMeetingList.get(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        boolean isValidMeeting \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting meetingToDelete \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (Meeting meeting : model.getFilteredMeetingList()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (meeting.getModule().equals(module) \u0026\u0026 meeting.getMeetingName().equals(targetMeetingName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                isValidMeeting \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                meetingToDelete \u003d meeting;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!isValidMeeting) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEETING_DISPLAYED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assert meetingToDelete !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        model.deleteMeeting(meetingToDelete);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MEETING_SUCCESS, meetingToDelete),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                false, false, true, false, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                || (other instanceof DeleteMeetingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 targetModuleName.equals(((DeleteMeetingCommand) other).targetModuleName)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 targetMeetingName.equals(((DeleteMeetingCommand) other).targetMeetingName)); // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "//@@author EkamSinghPandher"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"module delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + \": Deletes the module identified by the module name\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + PREFIX_MODULE + \"MODULE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + PREFIX_MODULE + \"CS2103 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"Deleted Module: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final ModuleName targetModuleName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @param targetModuleName name of the module that is to be deleted."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public DeleteModuleCommand(ModuleName targetModuleName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.targetModuleName \u003d targetModuleName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        boolean isValidModule \u003d model.hasModuleName(targetModuleName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!isValidModule) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        List\u003cModule\u003e filteredMeetingList \u003d model.getFilteredModuleList().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .filter(module -\u003e module.isSameName(targetModuleName)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assert filteredMeetingList.size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module module \u003d filteredMeetingList.get(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assert module !\u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        model.deleteModule(module);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        model.updateModuleInMeetingBook(module);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, module),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                false, false, true, false, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                || (other instanceof DeleteModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                \u0026\u0026 targetModuleName.equals(((DeleteModuleCommand) other).targetModuleName)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DeleteTagCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \": Deletes the given tag(s) from the person identified by the name used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"Parameters: NAME (must be name of person existing in ModDuke) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"Roy \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + PREFIX_TAG + \"classmate\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Tagged Person: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final Name targetName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param targetName of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tags the set of tags to be removed from the person"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public DeleteTagCommand(Name targetName, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.targetName \u003d targetName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        boolean isValidContact \u003d model.hasPersonName(targetName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // check if Person exists in address book"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (!isValidContact) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Update address book"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cPerson\u003e filteredList \u003d model.getFilteredPersonList().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .filter(person -\u003e person.isSameName(targetName)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person personToEdit \u003d filteredList.get(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, tags); // deletes the given tags from Person"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // update meeting book"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.updatePersonInMeetingBook(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // update module book"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.updatePersonInModuleBook(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * with tags in {@code tags} removed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, Set\u003cTag\u003e tags) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (tags.stream().allMatch(tag -\u003e personToEdit.getTags().contains(tag))) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // Person has all tags to be deleted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e(personToEdit.getTags());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            updatedTags.removeAll(tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(), updatedTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // Person does not have all tags to be deleted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    String.format(\"The person \u0027%s\u0027 does not have all the tags provided.\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                            personToEdit.getName().toString()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                || (other instanceof DeleteTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \u0026\u0026 targetName.equals(((DeleteTagCommand) other).targetName)); // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.exceptions.PersonTagConstraintException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contact edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + \"by the name of the person in the displayed person list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + \"Parameters: NAME (must be name of person existing in ModDuke) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NEW_NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" john doe \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param name of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public EditCommand(Name name, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        boolean isValidContact \u003d model.hasPersonName(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (!isValidContact) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        List\u003cPerson\u003e filteredList \u003d lastShownList.stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .filter(person -\u003e person.isSameName(name)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assert filteredList.size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Person personToEdit \u003d filteredList.get(0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            // update address book"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            // update meeting book"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            model.updatePersonInMeetingBook(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // update module book"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            model.updatePersonInModuleBook(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    false, false, true, false, true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (PersonTagConstraintException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new CommandException(e.getMessage(), e);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return name.equals(e.name)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 2,
      "jerrylchong": 4,
      "-": 194,
      "royleochan": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGENDA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEWNAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEETINGS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.commons.SpecialName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class EditMeetingCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"meeting edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the meeting identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"by the name of the meeting in the displayed meeting list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_MODULE + \"MODULE \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_NAME + \"MEETING NAME \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"[\" + PREFIX_NEWNAME + \"NEW_MEETINGNAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"NEW_DATE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"NEW_TIME] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + \"[\" + PREFIX_PARTICIPANT + \"NEW_MEMBERS]... \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + \"[\" + PREFIX_AGENDA + \"NEW_AGENDA]... \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + \"[\" + PREFIX_NOTE + \"NEW_NOTE]...\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" m/CS2103 n/Project Meeting \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + PREFIX_DATE + \"2020-10-10 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + PREFIX_TIME + \"11:30 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + PREFIX_AGENDA + \"Discuss project direction \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + PREFIX_NOTE + \"Alex will be coming late\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_EDIT_MEETING_SUCCESS \u003d \"Edited Meeting: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEETING \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            \"The meeting [%s] %s already exists in the meeting book\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_PERSON \u003d \"The following person(s): %s are not in the module %s\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_CONFLICTING_MEETING_TIMES \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            \"The meeting [%s] %s is already occurring at the same date and time\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final ModuleName targetModuleName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final MeetingName targetMeetingName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final EditMeetingCommand.EditMeetingDescriptor editMeetingDescriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @param targetModuleName name of the module that the soon to be edited meeting belongs to"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @param targetMeetingName name of the soon to be edited meeting"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @param editMeetingDescriptor details to edit the meeting with"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public EditMeetingCommand(ModuleName targetModuleName, MeetingName targetMeetingName,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                              EditMeetingCommand.EditMeetingDescriptor editMeetingDescriptor) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(targetModuleName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(targetMeetingName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(editMeetingDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.targetModuleName \u003d targetModuleName;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.targetMeetingName \u003d targetMeetingName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.editMeetingDescriptor \u003d new EditMeetingCommand.EditMeetingDescriptor(editMeetingDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        boolean isValidModule \u003d model.hasModuleName(targetModuleName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!isValidModule) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        List\u003cModule\u003e filteredMeetingList \u003d model.getFilteredModuleList().stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .filter(module -\u003e module.isSameName(targetModuleName)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Module module \u003d filteredMeetingList.get(0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        boolean isValidMeeting \u003d false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting meetingToEdit \u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (Meeting meeting : model.getFilteredMeetingList()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (meeting.getModule().equals(module) \u0026\u0026 meeting.getMeetingName().equals(targetMeetingName)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                isValidMeeting \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                meetingToEdit \u003d meeting;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!isValidMeeting) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEETING_DISPLAYED);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assert meetingToEdit !\u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting editedMeeting \u003d createEditedMeeting(meetingToEdit, editMeetingDescriptor, model, module);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!meetingToEdit.isSameMeeting(editedMeeting) \u0026\u0026 model.hasMeeting(editedMeeting)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_MEETING, module.getModuleName(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    meetingToEdit.getMeetingName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (editMeetingDescriptor.getDate().isPresent() || editMeetingDescriptor.getTime().isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            for (Meeting meeting : model.getFilteredMeetingList()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                if (((editMeetingDescriptor.getDate().isPresent())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        \u0026\u0026 (meeting.getDate().equals(editMeetingDescriptor.getDate().get())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                \u0026\u0026 meeting.getTime().equals(editedMeeting.getTime())))"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    || ((editMeetingDescriptor.getTime().isPresent())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        \u0026\u0026 (meeting.getDate().equals(editedMeeting.getDate())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                \u0026\u0026 meeting.getTime().equals(editMeetingDescriptor.getTime().get())))"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    || ((editMeetingDescriptor.getDate().isPresent() \u0026\u0026 editMeetingDescriptor.getTime().isPresent())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        \u0026\u0026 (meeting.getDate().equals(editMeetingDescriptor.getDate().get())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                \u0026\u0026 meeting.getTime().equals(editMeetingDescriptor.getTime().get())))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    throw new CommandException("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                            String.format(MESSAGE_CONFLICTING_MEETING_TIMES, meeting.getModule().getModuleName(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                    meeting.getMeetingName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        model.setMeeting(meetingToEdit, editedMeeting);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        model.updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MEETING_SUCCESS, editedMeeting),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                false, false, true, false, true);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Creates and returns a {@code Meeting} with the details of {@code meetingToEdit}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * edited with {@code editMeetingDescriptor}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private static Meeting createEditedMeeting(Meeting meetingToEdit,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                               EditMeetingCommand.EditMeetingDescriptor editMeetingDescriptor,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                               Model model, Module module) throws CommandException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assert meetingToEdit !\u003d null;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingName updatedMeetingName \u003d editMeetingDescriptor.getMeetingName().orElse(meetingToEdit.getMeetingName());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Date updatedDate \u003d editMeetingDescriptor.getDate().orElse(meetingToEdit.getDate());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Time updatedTime \u003d editMeetingDescriptor.getTime().orElse(meetingToEdit.getTime());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Set\u003cName\u003e updatedMemberNames \u003d editMeetingDescriptor.getMemberNames().orElse(null);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Set\u003cSpecialName\u003e updatedAgendas \u003d editMeetingDescriptor.getAgendas().orElse(meetingToEdit.getAgendas());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Set\u003cSpecialName\u003e updatedNotes \u003d editMeetingDescriptor.getNotes().orElse(meetingToEdit.getNotes());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Set\u003cPerson\u003e updatedMembers \u003d getUpdatedMembers(meetingToEdit, updatedMemberNames, module, model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new Meeting(meetingToEdit.getModule(), updatedMeetingName, updatedDate, updatedTime, updatedMembers,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                updatedAgendas, updatedNotes);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private static Set\u003cPerson\u003e getUpdatedMembers(Meeting meetingToEdit,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                                 Set\u003cName\u003e updatedMemberNames,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                                 Module module,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                                 Model model) throws CommandException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Set\u003cPerson\u003e updatedMembers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (updatedMemberNames !\u003d null) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            List\u003cName\u003e nonExistentPersonNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            for (Name name : updatedMemberNames) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                if (!module.hasClassmate(name)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    nonExistentPersonNames.add(name);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (!nonExistentPersonNames.isEmpty()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                for (Name name : nonExistentPersonNames) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    sb.append(name + \", \");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                String nonExistentPersonNamesString \u003d sb.substring(0, sb.length() - 2);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_NONEXISTENT_PERSON, nonExistentPersonNamesString,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        module.getModuleName()));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            for (Name name : updatedMemberNames) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                List\u003cPerson\u003e filteredList \u003d model.getFilteredPersonList().stream()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        .filter(person -\u003e person.isSameName(name)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                updatedMembers.addAll(filteredList);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            updatedMembers \u003d meetingToEdit.getParticipants();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assert updatedMembers !\u003d null;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return updatedMembers;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!(other instanceof EditMeetingCommand)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand e \u003d (EditMeetingCommand) other;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return targetModuleName.equals(e.targetModuleName)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 targetMeetingName.equals(e.targetMeetingName)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 editMeetingDescriptor.equals(e.editMeetingDescriptor);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Stores the details to edit the meeting with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * corresponding field value of the meeting."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static class EditMeetingDescriptor {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        private MeetingName meetingName;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        private Time time;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        private Set\u003cName\u003e memberNames;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        private Set\u003cSpecialName\u003e agendas;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        private Set\u003cSpecialName\u003e notes;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public EditMeetingDescriptor() {}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public EditMeetingDescriptor(EditMeetingCommand.EditMeetingDescriptor toCopy) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            setMeetingName(toCopy.meetingName);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            setMemberNames(toCopy.memberNames);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            setAgendas(toCopy.agendas);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            setNotes(toCopy.notes);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return CollectionUtil.isAnyNonNull(meetingName, date, time, memberNames, agendas, notes);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public void setMeetingName(MeetingName meetingName) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            this.meetingName \u003d meetingName;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public Optional\u003cMeetingName\u003e getMeetingName() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return Optional.ofNullable(meetingName);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public void setTime(Time time) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         * Sets {@code members} to this object\u0027s {@code members}."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         * A defensive copy of {@code members} is used internally."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public void setMemberNames(Set\u003cName\u003e memberNames) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            this.memberNames \u003d (memberNames !\u003d null) ? new HashSet\u003c\u003e(memberNames) : null;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         * Sets {@code agendas} to this object\u0027s {@code agendas}."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         * A defensive copy of {@code agendas} is used internally."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setAgendas(Set\u003cSpecialName\u003e agendas) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            this.agendas \u003d (agendas !\u003d null) ? new HashSet\u003c\u003e(agendas) : null;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         * Sets {@code notes} to this object\u0027s {@code notes}."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         * A defensive copy of {@code notes} is used internally."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setNotes(Set\u003cSpecialName\u003e notes) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            this.notes \u003d (notes !\u003d null) ? new HashSet\u003c\u003e(notes) : null;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         * Returns an unmodifiable person set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code memberNames} is null."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public Optional\u003cSet\u003cName\u003e\u003e getMemberNames() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return (memberNames !\u003d null) ? Optional.of(Collections.unmodifiableSet(memberNames)) : Optional.empty();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         * Returns an unmodifiable agenda set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code agendas} is null."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public Optional\u003cSet\u003cSpecialName\u003e\u003e getAgendas() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return (agendas !\u003d null) ? Optional.of(Collections.unmodifiableSet(agendas)) : Optional.empty();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         * Returns an unmodifiable note set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code notes} is null."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public Optional\u003cSet\u003cSpecialName\u003e\u003e getNotes() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return (notes !\u003d null) ? Optional.of(Collections.unmodifiableSet(notes)) : Optional.empty();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (!(other instanceof EditMeetingCommand.EditMeetingDescriptor)) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            EditMeetingCommand.EditMeetingDescriptor e \u003d (EditMeetingCommand.EditMeetingDescriptor) other;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return getMeetingName().equals(e.getMeetingName())"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    \u0026\u0026 getMemberNames().equals(e.getMemberNames());"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 297,
      "royleochan": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "//@@author EkamSinghPandher"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEETINGS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class EditModuleCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"module edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the module identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + \"by the name of the module in the displayed module list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + PREFIX_MODULE + \"MODULE \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NEW_MODULE_NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + \"[\" + PREFIX_PARTICIPANT + \"NEW_MEMBERS]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" m/CS2103 n/CS2103T \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"Edited Module: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the address book.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_PERSON \u003d \"The following person(s): %s are not in your contacts\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final ModuleName targetModuleName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final EditModuleCommand.EditModuleDescriptor editModuleDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @param targetModuleName name of the module that the soon to be edited meeting belongs to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @param targetModuleName name of the soon to be edited meeting"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @param editModuleDescriptor details to edit the meeting with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public EditModuleCommand(ModuleName targetModuleName,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                             EditModuleCommand.EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(targetModuleName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(editModuleDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.targetModuleName \u003d targetModuleName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.editModuleDescriptor \u003d new EditModuleCommand.EditModuleDescriptor(editModuleDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        boolean isValidModule \u003d model.hasModuleName(targetModuleName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!isValidModule) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        List\u003cModule\u003e filteredModuleList \u003d model.getFilteredModuleList().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .filter(module -\u003e module.isSameName(targetModuleName)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module moduleToEdit \u003d filteredModuleList.get(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module editedModule \u003d createEditedModule(moduleToEdit, editModuleDescriptor, model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (moduleToEdit.isSameModule(editedModule)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ReadOnlyModuleBook moduleBook \u003d model.getModuleBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ObservableList\u003cModule\u003e moduleList \u003d moduleBook.getModuleList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        List\u003cModule\u003e modules \u003d moduleList.stream().filter(module-\u003e module.getModuleName()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .equals(editedModule.getModuleName())).collect(Collectors.toList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assert modules.size() \u003c 2;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (modules.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            if (!modules.get(0).getModuleName().equals(moduleToEdit.getModuleName())) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        model.setModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        model.updateModuleInMeetingBook(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        model.updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MODULE_SUCCESS, editedModule), false, false,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                true, false, true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Creates and returns a {@code Module} with the details of {@code moduleToEdit}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private static Module createEditedModule(Module moduleToEdit,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                                               EditModuleCommand.EditModuleDescriptor editModuleDescriptor,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                                               Model model) throws CommandException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ModuleName updatedModuleName \u003d editModuleDescriptor.getModuleName().orElse(moduleToEdit.getModuleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Set\u003cName\u003e updatedMemberNames \u003d editModuleDescriptor.getMemberNames().orElse(null);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Set\u003cPerson\u003e updatedMembers \u003d getUpdatedMembers(moduleToEdit, updatedMemberNames, model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return new Module(updatedModuleName, updatedMembers);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private static Set\u003cPerson\u003e getUpdatedMembers(Module moduleToEdit,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                                                 Set\u003cName\u003e updatedMemberNames,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                                                 Model model) throws CommandException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Set\u003cPerson\u003e updatedMembers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (updatedMemberNames !\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            List\u003cName\u003e nonExistentPersonNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            for (Name name : updatedMemberNames) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                if (!model.hasPersonName(name)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    nonExistentPersonNames.add(name);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            if (!nonExistentPersonNames.isEmpty()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                for (Name name : nonExistentPersonNames) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    sb.append(name + \", \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                String nonExistentPersonNamesString \u003d sb.substring(0, sb.length() - 2);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_NONEXISTENT_PERSON, nonExistentPersonNamesString));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            for (Name name : updatedMemberNames) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                List\u003cPerson\u003e filteredList \u003d model.getAddressBook().getPersonList().stream()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                        .filter(person -\u003e person.isSameName(name)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                updatedMembers.addAll(filteredList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            updatedMembers \u003d moduleToEdit.getClassmates();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assert updatedMembers !\u003d null;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return updatedMembers;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!(other instanceof EditModuleCommand)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        EditModuleCommand e \u003d (EditModuleCommand) other;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return targetModuleName.equals(e.targetModuleName)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                \u0026\u0026 editModuleDescriptor.equals(e.editModuleDescriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Stores the details to edit the module with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * corresponding field value of the module."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static class EditModuleDescriptor {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        private ModuleName moduleName;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        private Set\u003cName\u003e memberNames;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public EditModuleDescriptor() {}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public EditModuleDescriptor(EditModuleCommand.EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            setModuleName(toCopy.moduleName);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            setMemberNames(toCopy.memberNames);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return CollectionUtil.isAnyNonNull(moduleName, memberNames);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public void setModuleName(ModuleName moduleName) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public Optional\u003cModuleName\u003e getModuleName() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return Optional.ofNullable(moduleName);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "         * Sets {@code members} to this object\u0027s {@code members}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "         * A defensive copy of {@code members} is used internally."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "         */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public void setMemberNames(Set\u003cName\u003e memberNames) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            this.memberNames \u003d (memberNames !\u003d null) ? new HashSet\u003c\u003e(memberNames) : null;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "         * Returns an unmodifiable person set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "         */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public Optional\u003cSet\u003cName\u003e\u003e getMemberNames() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return (memberNames !\u003d null) ? Optional.of(Collections.unmodifiableSet(memberNames)) : Optional.empty();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            if (!(other instanceof EditModuleCommand.EditModuleDescriptor)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            EditModuleCommand.EditModuleDescriptor e \u003d (EditModuleCommand.EditModuleDescriptor) other;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return getModuleName().equals(e.getModuleName())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    \u0026\u0026 getMemberNames().equals(e.getMemberNames());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 242
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contact find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"the specified keywords/initials (case-insensitive) or tags \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/alice n/bob t/classmate\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final PersonPredicate predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public FindCommand(PersonPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 12,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LightThemeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Sets the theme to light theme."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class LightThemeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"light\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String SUCCESS_MESSAGE \u003d \"Light theme set successfully.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new CommandResult(SUCCESS_MESSAGE, true, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contact list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEETINGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class ListMeetingCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"meeting list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all meetings\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        model.updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class ListModuleCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"module list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module to the timetable. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + PREFIX_MODULE + \"MODULE NAME \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + PREFIX_MODULE + \"CS2103 \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed Contacts in module\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final ModuleName moduleName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ListModuleCommand(ModuleName moduleName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        model.getPersonsInModule(moduleName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowTimelineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class ShowTimelineCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"timeline\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_SHOWTIMELINE_ACKNOWLEDGEMENT \u003d \"The timeline view of the app is shown\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new CommandResult(MESSAGE_SHOWTIMELINE_ACKNOWLEDGEMENT, false, false,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "//@@author royleochan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Updates the user interface to view the agendas and notes of the selected meeting if valid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class ViewMeetingCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"meeting view\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + \": Views the meeting identified by the [MODULE] and name used in the displayed meeting list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + PREFIX_MODULE + \"MODULE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + PREFIX_NAME + \"MEETING NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + PREFIX_MODULE + \"CS2103 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + PREFIX_NAME + \"Weekly Meeting\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String MESSAGE_VIEW_MEETING_SUCCESS \u003d \"Viewing selected meeting: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final ModuleName targetModuleName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final MeetingName targetMeetingName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Views the selected meeting, showing the agenda and notes of the meeting."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param targetModuleName Name of the module that the meeting belongs to."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param targetMeetingName Name of the meeting."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public ViewMeetingCommand(ModuleName targetModuleName, MeetingName targetMeetingName) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        requireNonNull(targetModuleName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        requireNonNull(targetMeetingName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.targetModuleName \u003d targetModuleName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.targetMeetingName \u003d targetMeetingName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        boolean isValidModule \u003d model.hasModuleName(targetModuleName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (!isValidModule) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        List\u003cModule\u003e filteredMeetingList \u003d model.getFilteredModuleList().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .filter(module -\u003e module.isSameName(targetModuleName)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Module module \u003d filteredMeetingList.get(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        boolean isValidMeeting \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Meeting meetingToView \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        for (Meeting meeting : model.getFilteredMeetingList()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            if (meeting.getModule().equals(module) \u0026\u0026 meeting.getMeetingName().equals(targetMeetingName)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                isValidMeeting \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                meetingToView \u003d meeting;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (!isValidMeeting) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEETING_DISPLAYED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        model.setSelectedMeeting(meetingToView);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_MEETING_SUCCESS, meetingToView), false, false,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                || (other instanceof ViewMeetingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u0026\u0026 targetMeetingName.equals(((ViewMeetingCommand) other).targetMeetingName)); // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.exceptions.PersonTagConstraintException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        argMultimap.checkDuplicatePrefix(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            Person person \u003d new Person(name, phone, email, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (PersonTagConstraintException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new ParseException(e.getMessage(), e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 1,
      "-": 54,
      "royleochan": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddMeetingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGENDA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.AddMeetingCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.commons.SpecialName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class AddMeetingCommandParser implements Parser\u003cAddMeetingCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddMeetingCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public AddMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_NAME, PREFIX_DATE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        PREFIX_TIME, PREFIX_PARTICIPANT, PREFIX_AGENDA, PREFIX_NOTE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_NAME, PREFIX_DATE, PREFIX_TIME, PREFIX_PARTICIPANT)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        argMultimap.checkDuplicatePrefix(PREFIX_MODULE, PREFIX_NAME, PREFIX_DATE, PREFIX_TIME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        ModuleName moduleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingName meetingName \u003d ParserUtil.parseMeetingName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Set\u003cName\u003e nameList \u003d ParserUtil.parseNames(argMultimap.getAllValues(PREFIX_PARTICIPANT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Set\u003cSpecialName\u003e agendaList \u003d ParserUtil.parseSpecialNames(argMultimap.getAllValues(PREFIX_AGENDA));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Set\u003cSpecialName\u003e noteList \u003d ParserUtil.parseSpecialNames(argMultimap.getAllValues(PREFIX_NOTE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new AddMeetingCommand(moduleName, meetingName, date, time, nameList, agendaList, noteList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 51,
      "EkamSinghPandher": 1,
      "royleochan": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "//@@author EkamSinghPandher"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class AddModuleCommandParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PARTICIPANT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PARTICIPANT)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        argMultimap.checkDuplicatePrefix(PREFIX_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ModuleName moduleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Set\u003cName\u003e nameList \u003d ParserUtil.parseNames(argMultimap.getAllValues(PREFIX_PARTICIPANT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return new AddModuleCommand(moduleName, nameList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand.TagPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTagCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * and returns an AddTagCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public AddTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Name name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        name \u003d ParserUtil.parseName(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        TagPersonDescriptor tagPersonDescriptor \u003d new AddTagCommand.TagPersonDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(tagPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (tagPersonDescriptor.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new AddTagCommand(name, tagPersonDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.ClearTagCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.CopyCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.logic.commands.DarkThemeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.logic.commands.LightThemeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.ShowTimelineCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandCategory\u003e\\\\S+)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            + \"(?\u003ccommandVerb\u003e\\\\s\\\\S+)?(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        final String commandCategory \u003d matcher.group(\"commandCategory\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        final String commandVerb \u003d matcher.group(\"commandVerb\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        final String commandWord \u003d commandVerb !\u003d null ? commandCategory + commandVerb : commandCategory;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        switch (commandCategory) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        case ShowTimelineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return new ShowTimelineCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case CopyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new CopyCommandParser().parse(commandVerb + arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case LightThemeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return new LightThemeCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case DarkThemeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return new DarkThemeCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new AddTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case DeleteTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new DeleteTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case ClearTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new ClearTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new FindCommandParser().parse(commandVerb + arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 4,
      "jerrylchong": 17,
      "-": 67,
      "royleochan": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PREFIX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Checks for Duplicate prefixes that are not allowed by the command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @param prefixes"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void checkDuplicatePrefix(Prefix ... prefixes) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        for (Prefix prefix : prefixes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            if (getAllValues(prefix).size() \u003e 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_DUPLICATE_PREFIX, prefix.getPrefix()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 18,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClearTagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.ClearTagCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ClearTagCommandParser implements Parser\u003cClearTagCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClearTagCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * and returns a ClearTagCommand object for execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public ClearTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Name targetName \u003d ParserUtil.parseName(args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new ClearTagCommand(targetName);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Prefix PREFIX_MODULE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Prefix PREFIX_PARTICIPANT \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Prefix PREFIX_NEWNAME \u003d new Prefix(\"nn/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final Prefix PREFIX_AGENDA \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final Prefix PREFIX_NOTE \u003d new Prefix(\"no/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 6,
      "-": 14,
      "royleochan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CopyCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.CopyCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.FullNameMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonHasTagsAndNamePredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonHasTagsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class CopyCommandParser implements Parser\u003cCopyCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CopyCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * and returns a CopyCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public CopyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG, PREFIX_MODULE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        boolean isEmail;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String preamble \u003d argMultimap.getPreamble().trim().toLowerCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (preamble.equals(\"email\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            isEmail \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (preamble.equals(\"phone\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            isEmail \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // invalid preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TAG, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cString\u003e nameSet \u003d ParserUtil.parseAllNames(argMultimap.getAllValues(PREFIX_NAME));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d parseTagsForFind(argMultimap.getAllValues(PREFIX_TAG)).orElse(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            List\u003cString\u003e moduleNames \u003d argMultimap.getAllValues(PREFIX_MODULE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // check if any of the collections are empty (no text after prefixes)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if ((nameSet.size() \u003d\u003d 1 \u0026\u0026 nameSet.contains(\"\"))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    || tagSet.isEmpty()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    || (moduleNames.size() \u003d\u003d 1 \u0026\u0026 moduleNames.contains(\"\"))) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cModuleName\u003e moduleNameSet \u003d ParserUtil.parseAllModules(moduleNames);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new CopyCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new PersonHasTagsAndNamePredicate(new ArrayList\u003c\u003e(nameSet), new ArrayList\u003c\u003e(tagSet)),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    isEmail, new ArrayList\u003c\u003e(moduleNameSet));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cString\u003e nameSet \u003d ParserUtil.parseAllNames(argMultimap.getAllValues(PREFIX_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d parseTagsForFind(argMultimap.getAllValues(PREFIX_TAG)).orElse(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // check if any of the collections are empty (no text after prefixes)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if ((nameSet.size() \u003d\u003d 1 \u0026\u0026 nameSet.contains(\"\")) || tagSet.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new CopyCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new PersonHasTagsAndNamePredicate(new ArrayList\u003c\u003e(nameSet), new ArrayList\u003c\u003e(tagSet)),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    isEmail, new ArrayList\u003cModuleName\u003e());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cString\u003e nameSet \u003d ParserUtil.parseAllNames(argMultimap.getAllValues(PREFIX_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            List\u003cString\u003e moduleNames \u003d argMultimap.getAllValues(PREFIX_MODULE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // check if any of the collections are empty (no text after prefixes)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if ((nameSet.size() \u003d\u003d 1 \u0026\u0026 nameSet.contains(\"\"))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    || (moduleNames.size() \u003d\u003d 1 \u0026\u0026 moduleNames.contains(\"\"))) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cModuleName\u003e moduleNameSet \u003d ParserUtil.parseAllModules(moduleNames);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new CopyCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new FullNameMatchesKeywordPredicate(new ArrayList\u003c\u003e(nameSet)),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    isEmail, new ArrayList\u003c\u003e(moduleNameSet));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d parseTagsForFind(argMultimap.getAllValues(PREFIX_TAG)).orElse(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            List\u003cString\u003e moduleNames \u003d argMultimap.getAllValues(PREFIX_MODULE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // check if any of the collections are empty (no text after prefixes)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (tagSet.isEmpty() || (moduleNames.size() \u003d\u003d 1 \u0026\u0026 moduleNames.contains(\"\"))) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cModuleName\u003e moduleNameSet \u003d ParserUtil.parseAllModules(moduleNames);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new CopyCommand("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new PersonHasTagsPredicate(new ArrayList\u003c\u003e(tagSet)),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    isEmail, new ArrayList\u003c\u003e(moduleNameSet));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cString\u003e nameSet \u003d ParserUtil.parseAllNames(argMultimap.getAllValues(PREFIX_NAME));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // check if any of the collections are empty (no text after prefixes)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (nameSet.size() \u003d\u003d 1 \u0026\u0026 nameSet.contains(\"\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new CopyCommand("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new FullNameMatchesKeywordPredicate(new ArrayList\u003c\u003e(nameSet)),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    isEmail, new ArrayList\u003cModuleName\u003e());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d parseTagsForFind(argMultimap.getAllValues(PREFIX_TAG))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    .orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                            String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new CopyCommand("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new PersonHasTagsPredicate(new ArrayList\u003c\u003e(tagSet)),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    isEmail, new ArrayList\u003cModuleName\u003e());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            List\u003cString\u003e moduleNames \u003d argMultimap.getAllValues(PREFIX_MODULE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // check if any of the collections are empty (no text after prefixes)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (moduleNames.size() \u003d\u003d 1 \u0026\u0026 moduleNames.contains(\"\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cModuleName\u003e moduleNameSet \u003d ParserUtil.parseAllModules(moduleNames);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new CopyCommand("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new PersonHasTagsPredicate(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    isEmail, new ArrayList\u003c\u003e(moduleNameSet));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // no valid prefixes provided"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForFind(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (tags.isEmpty() || (tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\"))) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.FullNameMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonHasTagsAndNamePredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonHasTagsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG, PREFIX_MODULE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        argMultimap.checkDuplicatePrefix(PREFIX_NAME, PREFIX_MODULE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TAG, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cString\u003e nameSet \u003d ParserUtil.parseAllNames(argMultimap.getAllValues(PREFIX_NAME));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d parseTagsForFind(argMultimap.getAllValues(PREFIX_TAG)).orElse(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            List\u003cString\u003e moduleNames \u003d argMultimap.getAllValues(PREFIX_MODULE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // check if any of the collections are empty (no text after prefixes)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if ((nameSet.size() \u003d\u003d 1 \u0026\u0026 nameSet.contains(\"\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    || tagSet.isEmpty()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    || (moduleNames.size() \u003d\u003d 1 \u0026\u0026 moduleNames.contains(\"\"))) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cModuleName\u003e moduleNameSet \u003d ParserUtil.parseAllModules(moduleNames);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new DeleteCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new PersonHasTagsAndNamePredicate(new ArrayList\u003c\u003e(nameSet), new ArrayList\u003c\u003e(tagSet)),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new ArrayList\u003c\u003e(moduleNameSet));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cString\u003e nameSet \u003d ParserUtil.parseAllNames(argMultimap.getAllValues(PREFIX_NAME));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d parseTagsForFind(argMultimap.getAllValues(PREFIX_TAG)).orElse(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // check if any of the collections are empty (no text after prefixes)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if ((nameSet.size() \u003d\u003d 1 \u0026\u0026 nameSet.contains(\"\")) || tagSet.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new DeleteCommand("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new PersonHasTagsAndNamePredicate(new ArrayList\u003c\u003e(nameSet), new ArrayList\u003c\u003e(tagSet)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new ArrayList\u003cModuleName\u003e());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cString\u003e nameSet \u003d ParserUtil.parseAllNames(argMultimap.getAllValues(PREFIX_NAME));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            List\u003cString\u003e moduleNames \u003d argMultimap.getAllValues(PREFIX_MODULE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // check if any of the collections are empty (no text after prefixes)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if ((nameSet.size() \u003d\u003d 1 \u0026\u0026 nameSet.contains(\"\"))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    || (moduleNames.size() \u003d\u003d 1 \u0026\u0026 moduleNames.contains(\"\"))) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cModuleName\u003e moduleNameSet \u003d ParserUtil.parseAllModules(moduleNames);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new DeleteCommand("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new FullNameMatchesKeywordPredicate(new ArrayList\u003c\u003e(nameSet)),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new ArrayList\u003c\u003e(moduleNameSet));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d parseTagsForFind(argMultimap.getAllValues(PREFIX_TAG)).orElse(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            List\u003cString\u003e moduleNames \u003d argMultimap.getAllValues(PREFIX_MODULE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // check if any of the collections are empty (no text after prefixes)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (tagSet.isEmpty() || (moduleNames.size() \u003d\u003d 1 \u0026\u0026 moduleNames.contains(\"\"))) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cModuleName\u003e moduleNameSet \u003d ParserUtil.parseAllModules(moduleNames);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new DeleteCommand("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new PersonHasTagsPredicate(new ArrayList\u003c\u003e(tagSet)),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new ArrayList\u003c\u003e(moduleNameSet));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cString\u003e nameSet \u003d ParserUtil.parseAllNames(argMultimap.getAllValues(PREFIX_NAME));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // check if any of the collections are empty (no text after prefixes)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (nameSet.size() \u003d\u003d 1 \u0026\u0026 nameSet.contains(\"\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new DeleteCommand("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new FullNameMatchesKeywordPredicate(new ArrayList\u003c\u003e(nameSet)),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new ArrayList\u003cModuleName\u003e());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d parseTagsForFind(argMultimap.getAllValues(PREFIX_TAG))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    .orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new DeleteCommand("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new PersonHasTagsPredicate(new ArrayList\u003c\u003e(tagSet)),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new ArrayList\u003cModuleName\u003e());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            List\u003cString\u003e moduleNames \u003d argMultimap.getAllValues(PREFIX_MODULE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // check if any of the collections are empty (no text after prefixes)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (moduleNames.size() \u003d\u003d 1 \u0026\u0026 moduleNames.contains(\"\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cModuleName\u003e moduleNameSet \u003d ParserUtil.parseAllModules(moduleNames);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new DeleteCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new PersonHasTagsPredicate(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new ArrayList\u003c\u003e(moduleNameSet));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // no valid prefixes provided"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForFind(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (tags.isEmpty() || (tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\"))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteMeetingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.DeleteMeetingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class DeleteMeetingCommandParser implements Parser\u003cDeleteMeetingCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteMeetingCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * and returns a DeleteMeetingCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public DeleteMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        argMultimap.checkDuplicatePrefix(PREFIX_MODULE, PREFIX_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        ModuleName targetModuleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingName targetMeetingName \u003d ParserUtil.parseMeetingName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new DeleteMeetingCommand(targetModuleName, targetMeetingName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 42,
      "EkamSinghPandher": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "//@@author EkamSinghPandher"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class DeleteModuleCommandParser implements Parser\u003cDeleteModuleCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteModuleCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * and returns a DeleteModuleCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public DeleteModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        argMultimap.checkDuplicatePrefix(PREFIX_MODULE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ModuleName targetModuleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return new DeleteModuleCommand(targetModuleName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DeleteTagCommandParser implements Parser\u003cDeleteTagCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public DeleteTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // check if required prefixes are present"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Name name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        name \u003d ParserUtil.parseName(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Set\u003cTag\u003e tagsToDelete \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // retrieve tags to delete"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(tags -\u003e tagsToDelete.addAll(tags));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (tagsToDelete.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new DeleteTagCommand(name, tagsToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            // no tags were given in user input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Name name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        argMultimap.checkDuplicatePrefix(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            name \u003d ParserUtil.parseName(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new EditCommand(name, editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 1,
      "-": 74,
      "royleochan": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditMeetingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGENDA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEWNAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.EditMeetingCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class EditMeetingCommandParser implements Parser\u003cEditMeetingCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public EditMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_NAME, PREFIX_NEWNAME, PREFIX_DATE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        PREFIX_TIME, PREFIX_PARTICIPANT, PREFIX_AGENDA, PREFIX_NOTE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        argMultimap.checkDuplicatePrefix(PREFIX_NAME, PREFIX_MODULE, PREFIX_NEWNAME, PREFIX_DATE, PREFIX_TIME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        ModuleName moduleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingName meetingName \u003d ParserUtil.parseMeetingName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand.EditMeetingDescriptor editMeetingDescriptor \u003d new EditMeetingCommand.EditMeetingDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NEWNAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            editMeetingDescriptor.setMeetingName(ParserUtil.parseMeetingName("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    argMultimap.getValue(PREFIX_NEWNAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            editMeetingDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            editMeetingDescriptor.setTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AGENDA).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            editMeetingDescriptor.setAgendas(ParserUtil.parseSpecialNames(argMultimap.getAllValues(PREFIX_AGENDA)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            editMeetingDescriptor.setNotes(ParserUtil.parseSpecialNames(argMultimap.getAllValues(PREFIX_NOTE)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        parseMemberNamesForEdit(argMultimap.getAllValues(PREFIX_PARTICIPANT))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .ifPresent(editMeetingDescriptor::setMemberNames);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!editMeetingDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new ParseException(EditMeetingCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new EditMeetingCommand(moduleName, meetingName, editMeetingDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e members} into a {@code Set\u003cPerson\u003e} if {@code members} is non-empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * If {@code members} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * {@code Set\u003cPerson\u003e} containing zero members."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Optional\u003cSet\u003cName\u003e\u003e parseMemberNamesForEdit(Collection\u003cString\u003e memberNames) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assert memberNames !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (memberNames.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Collection\u003cString\u003e memberNamesSet \u003d memberNames.size() \u003d\u003d 1 \u0026\u0026 memberNames.contains(\"\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                ? Collections.emptySet() : memberNames;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return Optional.of(ParserUtil.parseNames(memberNamesSet));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 87,
      "EkamSinghPandher": 2,
      "royleochan": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "//@@author EkamSinghPandher"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.EditModuleCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class EditModuleCommandParser implements Parser\u003cEditModuleCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public EditModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_NAME, PREFIX_PARTICIPANT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        argMultimap.checkDuplicatePrefix(PREFIX_MODULE, PREFIX_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ModuleName moduleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        EditModuleCommand.EditModuleDescriptor editModuleDescriptor \u003d new EditModuleCommand.EditModuleDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            editModuleDescriptor.setModuleName(ParserUtil.parseModuleName("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        parseMemberNamesForEdit(argMultimap.getAllValues(PREFIX_PARTICIPANT))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .ifPresent(editModuleDescriptor::setMemberNames);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!editModuleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new ParseException(EditModuleCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return new EditModuleCommand(moduleName, editModuleDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e members} into a {@code Set\u003cPerson\u003e} if {@code members} is non-empty."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * If {@code members} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * {@code Set\u003cPerson\u003e} containing zero members."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private Optional\u003cSet\u003cName\u003e\u003e parseMemberNamesForEdit(Collection\u003cString\u003e memberNames) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assert memberNames !\u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (memberNames.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Collection\u003cString\u003e memberNamesSet \u003d memberNames.size() \u003d\u003d 1 \u0026\u0026 memberNames.contains(\"\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                ? Collections.emptySet() : memberNames;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return Optional.of(ParserUtil.parseNames(memberNamesSet));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonHasTagsAndKeywordInNamePredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonHasTagsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cString\u003e nameSet \u003d ParserUtil.parseAllNames(argMultimap.getAllValues(PREFIX_NAME));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d parseTagsForFind(argMultimap.getAllValues(PREFIX_TAG)).orElse(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if ((nameSet.size() \u003d\u003d 1 \u0026\u0026 nameSet.contains(\"\")) || tagSet.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new FindCommand("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new PersonHasTagsAndKeywordInNamePredicate(new ArrayList\u003c\u003e(nameSet), new ArrayList\u003c\u003e(tagSet)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cString\u003e nameSet \u003d ParserUtil.parseAllNames(argMultimap.getAllValues(PREFIX_NAME));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (nameSet.size() \u003d\u003d 1 \u0026\u0026 nameSet.contains(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new FindCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new NameContainsKeywordsPredicate(new ArrayList\u003c\u003e(nameSet)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d parseTagsForFind(argMultimap.getAllValues(PREFIX_TAG)).orElse(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new FindCommand("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    new PersonHasTagsPredicate(new ArrayList\u003c\u003e(tagSet)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForFind(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.ListModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class ListModuleCommandParser implements Parser\u003cListModuleCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ListModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        argMultimap.checkDuplicatePrefix(PREFIX_MODULE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ModuleName moduleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return new ListModuleCommand(moduleName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MeetingBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.AddMeetingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.DeleteMeetingCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.EditMeetingCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.ListMeetingCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.logic.commands.ViewMeetingCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class MeetingBookParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandCategory\u003e\\\\S+)\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"(?\u003ccommandVerb\u003e\\\\s\\\\S+)?(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        final String commandCategory \u003d matcher.group(\"commandCategory\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        final String commandVerb \u003d matcher.group(\"commandVerb\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        final String commandWord \u003d commandVerb !\u003d null ? commandCategory + commandVerb : commandCategory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        case AddMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return new AddMeetingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        case DeleteMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return new DeleteMeetingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        case ListMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return new ListMeetingCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        case EditMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return new EditMeetingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case ViewMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return new ViewMeetingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 53,
      "royleochan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ModuleBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "//@@author EkamSinghPandher"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.EditModuleCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.ListModuleCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class ModuleBookParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandCategory\u003e\\\\S+)\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            + \"(?\u003ccommandVerb\u003e\\\\s\\\\S+)?(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        final String commandCategory \u003d matcher.group(\"commandCategory\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        final String commandVerb \u003d matcher.group(\"commandVerb\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        final String commandWord \u003d commandVerb !\u003d null ? commandCategory + commandVerb : commandCategory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return new AddModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        case ListModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return new ListModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        case EditModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return new EditModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return new DeleteModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.commons.SpecialName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Parses a {@code String name} into a {@code SpecialName}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static SpecialName parseSpecialName(String name) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (!SpecialName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new ParseException(SpecialName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new SpecialName(trimmedName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e names} into a {@code Set\u003cString\u003e}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static Set\u003cString\u003e parseAllNames(Collection\u003cString\u003e names) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(names);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Set\u003cString\u003e nameSet \u003d new HashSet\u003c\u003e(names);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return nameSet;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Parses a {@code String meetingName} into a {@code MeetingName}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @throws ParseException if the given {@code meetingName} is invalid."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static MeetingName parseMeetingName(String meetingName) throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(meetingName);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String trimmedName \u003d meetingName.trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!MeetingName.isValidMeetingName(trimmedName)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new ParseException(MeetingName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new MeetingName(trimmedName);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Parses a {@code String moduleName} into a {@code moduleName}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @throws ParseException if the given {@code moduleName} is invalid."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static ModuleName parseModuleName(String moduleName) throws ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(moduleName);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        String trimmedName \u003d moduleName.trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!ModuleName.isValidModuleName(trimmedName)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new ParseException(ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return new ModuleName(trimmedName);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e modules} into a {@code Set\u003cModuleName\u003e}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static Set\u003cModuleName\u003e parseAllModules(Collection\u003cString\u003e modules) throws ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(modules);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        boolean isValid \u003d modules.stream()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .allMatch(name -\u003e ModuleName.isValidModuleName(name.trim()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (!isValid) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new ParseException(ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return modules.stream().map(ModuleName::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!Date.isValidDateInput(trimmedDate)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Parses a {@code String time} into a {@code Time}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!Time.isValidTimeInput(trimmedTime)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new Time(trimmedTime);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e names} into a {@code Set\u003cName\u003e}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static Set\u003cName\u003e parseNames(Collection\u003cString\u003e personNames) throws ParseException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(personNames);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        final Set\u003cName\u003e personNameSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (String personName : personNames) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            personNameSet.add(parseName(personName));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return personNameSet;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e names} into a {@code Set\u003cSpecialName\u003e}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static Set\u003cSpecialName\u003e parseSpecialNames(Collection\u003cString\u003e names) throws ParseException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        requireNonNull(names);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        final Set\u003cSpecialName\u003e nameSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        for (String name : names) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            nameSet.add(parseSpecialName(name));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return nameSet;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 59,
      "jerrylchong": 25,
      "EkamSinghPandher": 16,
      "-": 108,
      "royleochan": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewMeetingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.logic.commands.ViewMeetingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Parses input arguments and creates a new ViewMeetingCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class ViewMeetingCommandParser implements Parser\u003cViewMeetingCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewMeetingCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * and returns a ViewMeetingCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public ViewMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        argMultimap.checkDuplicatePrefix(PREFIX_MODULE, PREFIX_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ModuleName targetModuleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        MeetingName targetMeetingName \u003d ParserUtil.parseMeetingName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new ViewMeetingCommand(targetModuleName, targetMeetingName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 2,
      "royleochan": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/textfieldmodules/AutocompleteModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package seedu.address.logic.textfieldmodules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class AutocompleteModule {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public static final String AC_MODE_STYLE_CLASS \u003d \"autocomplete-mode\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private HashMap\u003cString, Suggestions\u003e suggestionsList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private boolean isAutocompleteMode \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private boolean hasSetPrefix \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private String modeType \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private int commandPrefixPos;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private final TextField attachedTextField;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private AutocompleteModule(TextField textField) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        attachedTextField \u003d textField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        suggestionsList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        disableFocusTraversal();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        setupAutocompleteTriggers();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        setupAutocompleteActionKeys();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        setupBlockOtherKeystrokesInAcMode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        setupExitKeys();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Attaches autocomplete module to a TextField component which generates suggestions from the supplied list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @param tf  TextField to be attached."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public static AutocompleteModule attachTo(TextField tf) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        requireNonNull(tf);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return new AutocompleteModule(tf);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Setups Autocompletion Generator for stipulated command prefix."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void addSuggestions(String commandPrefix, Supplier\u003cList\u003cString\u003e\u003e suggestionsDataGenerator) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        requireNonNull(commandPrefix);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        requireNonNull(suggestionsDataGenerator);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        Suggestions suggestions \u003d new Suggestions(suggestionsDataGenerator);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        suggestionsList.put(commandPrefix, suggestions);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void setupAutocompleteTriggers() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        attachedTextField.caretPositionProperty().addListener((unused1, unused2, newPosition) -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            String userInput \u003d attachedTextField.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            int caretPos \u003d newPosition.intValue();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (isAutocompleteMode) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                if (caretPos \u003c commandPrefixPos) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    toggleAutocompleteModeOff();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    unsetPrefix();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            for (String cmdP : suggestionsList.keySet().toArray(new String[]{})) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                int prefixLength \u003d cmdP.length();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                if (userInput.length() \u003e\u003d prefixLength \u0026\u0026 caretPos \u003e\u003d prefixLength) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    String substring \u003d userInput.substring(caretPos - prefixLength);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    if (!isAutocompleteMode \u0026\u0026 substring.equals(cmdP)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        commandPrefixPos \u003d caretPos;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        toggleAutocompleteModeOn(cmdP);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void setupAutocompleteActionKeys() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        attachedTextField.addEventFilter(KeyEvent.KEY_PRESSED, (event) -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (isAutocompleteMode \u0026\u0026 event.getCode() \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                Suggestions suggestions \u003d suggestionsList.get(modeType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                if (!hasSetPrefix) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    String prefix \u003d attachedTextField.getText().substring(commandPrefixPos);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    setPrefix(suggestions, prefix);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                if (event.isShiftDown()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    // Shift + TAB : Previous Suggestion"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    String prev \u003d suggestions.prevSuggestion();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    int endIndex \u003d attachedTextField.caretPositionProperty().getValue();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    attachedTextField.replaceText(commandPrefixPos, endIndex, prev);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    // TAB : Next Suggestion"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    String next \u003d suggestions.nextSuggestion();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    int endIndex \u003d attachedTextField.caretPositionProperty().getValue();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    attachedTextField.replaceText(commandPrefixPos, endIndex, next);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                if (suggestions.isBackToPrefix()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    unsetPrefix();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void setupBlockOtherKeystrokesInAcMode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        attachedTextField.addEventFilter(KeyEvent.ANY, (event) -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (hasSetPrefix"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    \u0026\u0026 event.getCode() !\u003d KeyCode.TAB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    \u0026\u0026 event.getCode() !\u003d KeyCode.ENTER"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            ) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void setupExitKeys() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // Exit Autocomplete Mode when backspace / enter is pressed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        attachedTextField.addEventFilter(KeyEvent.KEY_PRESSED, (event -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (isAutocompleteMode \u0026\u0026 ("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    event.getCode() \u003d\u003d KeyCode.BACK_SPACE"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                            || event.getCode() \u003d\u003d KeyCode.ENTER"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                            || (event.getCode() \u003d\u003d KeyCode.W \u0026\u0026 event.isControlDown()))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                unsetPrefix();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                if (event.getCode() \u003d\u003d KeyCode.ENTER) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    toggleAutocompleteModeOff();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    removeCommandPrefixFromCompletion();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    event.consume();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void disableFocusTraversal() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        attachedTextField.addEventFilter(KeyEvent.KEY_PRESSED, (event) -\u003e {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (!isAutocompleteMode) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                if (event.getCode() \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    event.consume();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void toggleAutocompleteModeOn(String commandPrefix) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (isAutocompleteMode) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        logger.info(\"Autocomplete Mode toggled ON\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        setStyleToIndicateAutocompleteMode();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        isAutocompleteMode \u003d true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        modeType \u003d commandPrefix;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void toggleAutocompleteModeOff() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (!isAutocompleteMode) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        isAutocompleteMode \u003d false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        logger.info(\"Autocomplete Mode toggled OFF\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        attachedTextField.getStyleClass().remove(AC_MODE_STYLE_CLASS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void removeCommandPrefixFromCompletion() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String currentText \u003d attachedTextField.getText();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String result \u003d currentText.substring(0 , commandPrefixPos - modeType.length())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                + currentText.substring(commandPrefixPos);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        int caretPosition \u003d attachedTextField.getCaretPosition();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        attachedTextField.setText(result);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        attachedTextField.positionCaret(caretPosition - modeType.length());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void unsetPrefix() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (hasSetPrefix) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            hasSetPrefix \u003d false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            logger.info(\"Autocomplete prefix has been unset\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void setPrefix(Suggestions suggestions, String prefix) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        suggestions.setPrefix(prefix);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        hasSetPrefix \u003d true;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        logger.info(\"Autocomplete prefix has set to :\" + prefix);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Sets the command box style to indicate a Autocomplete Mode."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void setStyleToIndicateAutocompleteMode() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d attachedTextField.getStyleClass();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (styleClass.contains(AC_MODE_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        styleClass.add(AC_MODE_STYLE_CLASS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Class that generates suggestions based on given prefix and given list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public class Suggestions {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        private List\u003cString\u003e suggestions;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        private String prefix \u003d \"\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        private int index \u003d 0;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        private final Supplier\u003cList\u003cString\u003e\u003e listSupplier;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "         * Encapsulations a Suggestions object that allows users to generate suggestions based on"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "         * given prefix"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "         * @param listSupplier  List supplier from which suggestions will be generated"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        public Suggestions(Supplier\u003cList\u003cString\u003e\u003e listSupplier) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            this.listSupplier \u003d listSupplier;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            this.suggestions \u003d listSupplier.get().stream().sorted().collect(Collectors.toList());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        private void nextIndex() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            index \u003d index + 1 \u003c suggestions.size() ? index + 1 : 0;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        private void prevIndex() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            index \u003d index - 1 \u003c 0 ? suggestions.size() - 1 : index - 1;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "         * Generates the next best suggestion."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        public String nextSuggestion() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (!hasSuggestion()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                return prefix;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            nextIndex();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return suggestions.get(index);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "         * Generates the previous best suggestion."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        public String prevSuggestion() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (!hasSuggestion()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                return prefix;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            prevIndex();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return suggestions.get(index);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        private boolean hasSuggestion() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return suggestions.size() !\u003d 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        private void setPrefix(String prefix) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            this.index \u003d 0;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            suggestions \u003d listSupplier.get().stream().filter(x -\u003e x.toLowerCase().startsWith(prefix.toLowerCase()))"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            suggestions.sort((o1, o2) -\u003e o1.compareTo(o2));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            suggestions.add(0, prefix);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        private boolean isBackToPrefix() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return index \u003d\u003d 0;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 260
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/textfieldmodules/FzfModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package seedu.address.logic.textfieldmodules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.geometry.Point2D;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class FzfModule {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private Supplier\u003cList\u003cString\u003e\u003e optionSupplier;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private boolean isFzfMode \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private int fzfStartPos; // caret position where fzf was triggered"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private double menuX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private double menuY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private TextField query \u003d new TextField() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            setSkin(createDefaultSkin());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private final TextField attachedTextField;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private ContextMenu menu;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private FzfModule(TextField tf, Supplier\u003cList\u003cString\u003e\u003e supplier) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.optionSupplier \u003d supplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.attachedTextField \u003d tf;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        menu \u003d new ContextMenu();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        setupFzf();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Attaches FZF module to a TextField component which generates suggestions from the supplied list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @param textField  TextField to be attached."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @param supplier  Supplies the list from which suggestions will be generated"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public static FzfModule attachTo(TextField textField, Supplier\u003cList\u003cString\u003e\u003e supplier) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        requireNonNull(textField);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        requireNonNull(supplier);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return new FzfModule(textField, supplier);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void setupFzf() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        setupExitPoints();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        setupEntryPoints();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        setupMainLogic();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void setupMainLogic() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        attachedTextField.addEventFilter(KeyEvent.ANY, (event) -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (isFzfMode) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                if (event.getCode() \u003d\u003d KeyCode.DOWN || event.getCode() \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    menu.fireEvent(event.copyFor(menu, menu));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    event.consume();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                // Redirect Event to query TextField"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                query.fireEvent(event.copyFor(query, query));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                refreshMenu(query.getText());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                if (menu.getItems().isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    menu.hide();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                if (!menu.isShowing()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    menu.show(attachedTextField, menuX, menuY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void setupEntryPoints() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        attachedTextField.addEventFilter(KeyEvent.KEY_PRESSED, (event) -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (event.isControlDown() \u0026\u0026 event.getCode() \u003d\u003d KeyCode.SPACE) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                TextInputControl control \u003d (TextInputControl) event.getSource();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                Point2D pos \u003d control.getInputMethodRequests().getTextLocation(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                toggleFzfOff();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                toggleFzfOn(control.getCaretPosition(), pos.getX(), pos.getY());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void setupExitPoints() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        attachedTextField.caretPositionProperty().addListener((unused1, unused2, newPosition) -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (newPosition.intValue() \u003c fzfStartPos"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    || newPosition.intValue() \u003e fzfStartPos + query.getText().length()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                toggleFzfOff();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        attachedTextField.addEventFilter(KeyEvent.ANY, (event) -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (isFzfMode \u0026\u0026 event.getCode() \u003d\u003d KeyCode.ESCAPE) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                toggleFzfOff();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (!isFzfMode) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                menu.hide();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void refreshMenu(String queryText) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        menu.getItems().clear();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        menu.getItems().addAll(optionSupplier"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .get()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .filter(x -\u003e x.toLowerCase().contains(queryText.toLowerCase()))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .map(x -\u003e buildMenuItem(x, queryText))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private MenuItem buildMenuItem(String option, String query) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        MenuItem item \u003d new MenuItem(\"\", buildTextFlow(option, query));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        item.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            attachedTextField.replaceText(fzfStartPos, fzfStartPos + this.query.getText().length(), option);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            toggleFzfOff();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private TextFlow buildTextFlow(String text, String query) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (query.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            Text t \u003d new Text(text);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            t.setFill(Color.GRAY);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return new TextFlow(t);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        int filterIndex \u003d text.toLowerCase().indexOf(query.toLowerCase());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        Text textBefore \u003d new Text(text.substring(0, filterIndex));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        Text textAfter \u003d new Text(text.substring(filterIndex + query.length()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        Text textFilter \u003d new Text(text.substring(filterIndex, filterIndex + query.length()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        textBefore.setFill(Color.GRAY);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        textAfter.setFill(Color.GRAY);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        textFilter.setFill(Color.DARKORANGE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return new TextFlow(textBefore, textFilter, textAfter);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void toggleFzfOn(int caretPos, double x, double y) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (!isFzfMode) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            logger.info(\"Fzf mode toggled ON\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            fzfStartPos \u003d caretPos;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            isFzfMode \u003d true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            menuX \u003d x;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            menuY \u003d y;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void toggleFzfOff() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (isFzfMode) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            logger.info(\"Fzf mode toggled OFF\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            isFzfMode \u003d false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            query.setText(\"\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public ContextMenu getMenu() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return menu;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 170,
      "royleochan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns true if a person with the same name as {@code person} exists in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public boolean hasPersonName(Name name) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return persons.contains(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 120,
      "royleochan": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/MeetingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.UniqueMeetingList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class MeetingBook implements ReadOnlyMeetingBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final UniqueMeetingList meetings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetings \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Creates a MeetingBook using the Meetings in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingBook(ReadOnlyMeetingBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Replaces the contents of the meeting list with {@code meetings}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * {@code meetings} must not contain duplicate meetings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeetings(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.meetings.setMeetings(meetings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Resets the existing data of this {@code MeetingBook} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void resetData(ReadOnlyMeetingBook newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        setMeetings(newData.getMeetingList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    //// meeting-level operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns true if a meeting with the same identity as {@code meeting} exists in the meeting book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return meetings.contains(meeting);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns true if a meeting with the same name as {@code meeting} exists in the meeting book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean hasMeetingName(MeetingName meetingName) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(meetingName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return meetings.contains(meetingName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Adds a meeting to the meeting book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * The meeting must not already exist in the meeting book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void addMeeting(Meeting m) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetings.add(m);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Replaces the given meeting {@code target} in the list with {@code editedMeeting}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * {@code target} must exist in the meeting book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * The meeting identity of {@code editedMeeting} must not be the same as another"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * existing meeting in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(editedMeeting);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetings.setMeeting(target, editedMeeting);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Removes {@code key} from this {@code MeetingBook}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * {@code key} must exist in the meeting book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void removeMeeting(Meeting key) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetings.remove(key);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return meetings.asUnmodifiableObservableList().size() + \" meetings\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Returns meetingList sorted from earliest meeting to latest meeting"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getMeetingList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return new SortedList\u003cMeeting\u003e("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                meetings.asUnmodifiableObservableList(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                Comparator.comparing(o -\u003e LocalDateTime.of(o.getDate().date, o.getTime().time)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                || (other instanceof MeetingBook // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 meetings.equals(((MeetingBook) other).meetings));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return meetings.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 122,
      "nopenotj": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Predicate\u003cMeeting\u003e PREDICATE_SHOW_ALL_MEETINGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    void setMeetingBookFilePath(Path meetingBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    void setMeetingBook(ReadOnlyMeetingBook meetingBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    ReadOnlyMeetingBook getMeetingBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns true if a person with the same name as {@code person} exists in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    boolean hasPersonName(Name name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    ObservableList\u003cPerson\u003e getUpdatedFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    ObservableList\u003cPerson\u003e getUpdatedFilteredPersonList(Predicate\u003cPerson\u003e predicate,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                                                        List\u003cModuleName\u003e modules) throws CommandException;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    boolean hasMeeting(Meeting meeting);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    void addMeeting(Meeting meeting);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns true if a meeting with the same meeting name as {@code meeting} exists in the meeting book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    boolean hasMeetingName(MeetingName meetingName);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Deletes the given meeting."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * The person must exist in the meeting book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    void deleteMeeting(Meeting targetMeeting);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Replaces the given meeting {@code target} with {@code editedMeeting}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * {@code target} must exist in the meeting book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * The meeting identity of {@code editedMeeting} must not be the same"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * as another existing meeting in the meeting book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    void setMeeting(Meeting target, Meeting editedMeeting);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Updates all meetings in the meeting book if the required person was part of any meeting."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param persons First argument is the person to update which is either deleted or replaced. If replaced, there"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * is a second argument which is the edited person who will replace the deleted person."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    void updatePersonInMeetingBook(Person ...persons);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Sets the selected Meeting for the model manager."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param selectedMeeting The selected meeting, can be null."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    void setSelectedMeeting(Meeting selectedMeeting);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns a selected Meeting in an observable list. Can return a null value representing that there is no"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * selected meeting."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    Meeting getSelectedMeeting();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered meeting list */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    ObservableList\u003cMeeting\u003e getFilteredMeetingList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Updates the filter of the filtered meeting list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns true if a module with the same module name as {@code module} exists in the address book."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    boolean hasModuleName(ModuleName moduleName);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /** Returns the ModuleBook */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    ReadOnlyModuleBook getModuleBook();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Replaces module book data with the data in {@code moduleBook}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    void setModuleBook(ReadOnlyModuleBook moduleBook);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns the user prefs\u0027 module book file path."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Path getModuleBookFilePath();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    void setModuleBookFilePath(Path moduleBookFilePath);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    void getPersonsInModule(ModuleName moduleName) throws CommandException;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Updates all modules in the module book if the required person was part of any module."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param persons First argument is the person to update which is either deleted or replaced. If replaced,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * second argument is the edited person who will replace the deleted person."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    void updatePersonInModuleBook(Person ...persons);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Updates all meetings in the module book if the required module was part of any meetings. Will delete the meeting"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * if all the members of the new module are not in the meeting or if the module is deleted."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @param modules First argument is the module to update which is either deleted or replaced. If replaced,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * second argument is the edited module who will replace the deleted module."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    void updateModuleInMeetingBook(Module ...modules);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * {@code target} must exist in the module book."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * as another existing module in the module book."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    void setModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * The module must exist in the module book."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 52,
      "jerrylchong": 13,
      "EkamSinghPandher": 66,
      "-": 87,
      "royleochan": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final MeetingBook meetingBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final ModuleBook moduleBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final FilteredList\u003cMeeting\u003e filteredMeetings;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Meeting selectedMeeting;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyMeetingBook meetingBook,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                        ReadOnlyModuleBook moduleBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireAllNonNull(addressBook, meetingBook, userPrefs, moduleBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + \" and meetingBook \" + meetingBook"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + \" and moduleBook \" + moduleBook"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.meetingBook \u003d new MeetingBook(meetingBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.moduleBook \u003d new ModuleBook(moduleBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        filteredMeetings \u003d new FilteredList\u003c\u003e(this.meetingBook.getMeetingList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(this.moduleBook.getModuleList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // set selected meeting to first meeting in list on launch"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (filteredMeetings.size() \u003e 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            selectedMeeting \u003d filteredMeetings.get(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this(new AddressBook(), new MeetingBook(), new ModuleBook(), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return userPrefs.getMeetingBookFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeetingBookFilePath(Path meetingBookFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(meetingBookFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        userPrefs.setMeetingBookFilePath(meetingBookFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return userPrefs.getModuleBookFilePath();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModuleBookFilePath(Path moduleBookFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(moduleBookFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        userPrefs.setMeetingBookFilePath(moduleBookFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public boolean hasPersonName(Name name) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return addressBook.hasPersonName(name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Meetings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeetingBook(ReadOnlyMeetingBook meetingBook) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.meetingBook.resetData(meetingBook);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public ReadOnlyMeetingBook getMeetingBook() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return meetingBook;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return meetingBook.hasMeeting(meeting);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean hasMeetingName(MeetingName meetingName) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(meetingName);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return meetingBook.hasMeetingName(meetingName);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void deleteMeeting(Meeting targetMeeting) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetingBook.removeMeeting(targetMeeting);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // set selected meeting to be null if it is deleted"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (selectedMeeting !\u003d null) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (targetMeeting.equals(selectedMeeting)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                setSelectedMeeting(null);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetingBook.addMeeting(meeting);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        requireAllNonNull(target, editedMeeting);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // replace selecting meeting to be the edited meeting if it has been edited"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (target.equals(selectedMeeting)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            setSelectedMeeting(editedMeeting);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        meetingBook.setMeeting(target, editedMeeting);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void setSelectedMeeting(Meeting target) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        logger.fine(\"Setting selected meeting\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        selectedMeeting \u003d target;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Meeting getSelectedMeeting() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        logger.fine(\"Retrieving selected meeting\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return selectedMeeting;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void updatePersonInMeetingBook(Person... persons) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        requireNonNull(persons);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Person personToUpdate \u003d persons[0];"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        boolean isReplacement \u003d persons.length \u003e 1;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cMeeting\u003e meetings \u003d new ArrayList\u003c\u003e(filteredMeetings);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        meetings.stream().filter(meeting -\u003e meeting.getParticipants()"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .contains(personToUpdate)).forEach(meeting -\u003e {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    Set\u003cPerson\u003e updatedMembers \u003d new HashSet\u003c\u003e(meeting.getParticipants());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    logger.fine(\"Removing contact from relevant meeting.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    updatedMembers.remove(personToUpdate);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    if (isReplacement) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        assert persons.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        Person editedPerson \u003d persons[1];"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        logger.fine(\"Adding edited contact to relevant meeting.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        updatedMembers.add(editedPerson);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    if (updatedMembers.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        deleteMeeting(meeting);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        Meeting updatedMeeting \u003d new Meeting(meeting.getModule(), meeting.getMeetingName(),"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                                meeting.getDate(), meeting.getTime(), updatedMembers, meeting.getAgendas(),"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                                meeting.getNotes());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        setMeeting(meeting, updatedMeeting);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                });"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Modules \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        moduleBook.addModule(module);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns true if a module with the same module name as {@code module} exists in the address book."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public boolean hasModuleName(ModuleName moduleName) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(moduleName);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return moduleBook.hasModuleName(moduleName);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ReadOnlyModuleBook getModuleBook() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return moduleBook;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModuleBook(ReadOnlyModuleBook newBook) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.moduleBook.resetData(newBook);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void updatePersonInModuleBook(Person ...persons) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(persons);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person personToUpdate \u003d persons[0];"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        boolean isReplacement \u003d persons.length \u003e 1;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e(filteredModules);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        modules.stream()"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .filter(module -\u003e module.getClassmates().contains(personToUpdate))"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .forEach(module -\u003e {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    Set\u003cPerson\u003e updatedClassmates \u003d new HashSet\u003c\u003e(module.getClassmates());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    logger.fine(\"Removing contact from relevant module.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    updatedClassmates.remove(personToUpdate);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    if (isReplacement) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        assert persons.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        Person editedPerson \u003d persons[1];"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        logger.fine(\"Adding edited contact to relevant module.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        updatedClassmates.add(editedPerson);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    if (updatedClassmates.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        deleteModule(module);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        Module updatedModule \u003d new Module(module.getModuleName(), updatedClassmates);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        moduleBook.setModule(module, updatedModule);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                });"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void updateModuleInMeetingBook(Module... modules) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(modules);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module moduleToUpdate \u003d modules[0];"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        boolean isReplacement \u003d modules.length \u003e 1;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        List\u003cMeeting\u003e meetingList \u003d filteredMeetings.stream().filter(meeting -\u003e meeting.getModule()"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .equals(moduleToUpdate)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        for (Meeting filteredMeeting: meetingList) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            Set\u003cPerson\u003e updatedMembers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            if (isReplacement) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                assert modules.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                Module editedmodule \u003d modules[1];"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                for (Person person : editedmodule.getClassmates()) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    if (filteredMeeting.getParticipants().contains(person)) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                        updatedMembers.add(person);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            if (updatedMembers.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                deleteMeeting(filteredMeeting);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                Meeting updatedMeeting \u003d new Meeting(modules[1], filteredMeeting.getMeetingName(),"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        filteredMeeting.getDate(), filteredMeeting.getTime(), updatedMembers,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        filteredMeeting.getAgendas(), filteredMeeting.getNotes());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                setMeeting(filteredMeeting, updatedMeeting);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        moduleBook.setModule(target, editedModule);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        moduleBook.removeModule(target);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cMeeting\u003e meetingList \u003d filteredMeetings.stream().filter(meeting -\u003e meeting.getModule()"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .equals(target)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        for (Meeting m : meetingList) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            deleteMeeting(m);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns an unmodifiable view of the updated list of {@code Person} without changing the internal list"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * of {@code versionedAddressBook}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param predicate Predicate to filter and update list"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return filtered list of {@code Person} that match the given Predicate"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public ObservableList\u003cPerson\u003e getUpdatedFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new FilteredList\u003c\u003e(filteredPersons, predicate);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns an unmodifiable view of the updated list of {@code Person} without changing the internal list"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * of {@code versionedAddressBook}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param predicate Predicate to filter and update list"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param modules List of {@code ModuleName} of Modules"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return filtered list of {@code Person} that match the given Predicate or are in the given modules"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public ObservableList\u003cPerson\u003e getUpdatedFilteredPersonList(Predicate\u003cPerson\u003e predicate, List\u003cModuleName\u003e modules)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        for (ModuleName name : modules) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Module m \u003d moduleBook.getModule(name)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    .orElseThrow(() -\u003e new CommandException("
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                            String.format(\"Module %s does not exist.\", name.toString())));"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            moduleList.add(m);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Predicate\u003cPerson\u003e combined \u003d x -\u003e predicate.test(x)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                || moduleList.stream()"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .anyMatch(m -\u003e m.getClassmates().contains(x));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new FilteredList\u003c\u003e(filteredPersons, combined);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Meeting List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return filteredMeetings;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        filteredMeetings.setPredicate(predicate);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void getPersonsInModule(ModuleName moduleName) throws CommandException {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireAllNonNull(moduleName);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Optional\u003cModule\u003e module \u003d moduleBook.getModule(moduleName);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (module.isEmpty()) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new CommandException(\"This module does not exist\");"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            Module mod \u003d module.get();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            Predicate\u003cPerson\u003e predicate \u003d person -\u003e mod.getClassmates().contains(person);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u0026\u0026 meetingBook.equals(other.meetingBook)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u0026\u0026 moduleBook.equals(other.moduleBook)"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 90,
      "jerrylchong": 76,
      "EkamSinghPandher": 119,
      "-": 144,
      "royleochan": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModuleBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class ModuleBook implements ReadOnlyModuleBook {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ModuleBook() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Creates a ModuleBook using the Modules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ModuleBook(ReadOnlyModuleBook toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Resets the existing data of this {@code ModuleBook} with {@code newData}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void resetData(ReadOnlyModuleBook newData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the module book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns true if a module with the same name as {@code module} exists in the module book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public boolean hasModuleName(ModuleName moduleName) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(moduleName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return modules.contains(moduleName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Adds a module to the module book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * The module must not already exist in the module book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void addModule(Module m) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        modules.add(m);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * {@code target} must exist in the module book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * existing module in the module book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Removes {@code key} from this {@code ModuleBook}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * {@code key} must exist in the module book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Optional\u003cModule\u003e getModule(ModuleName name) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return modules.getModule(name);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" modules\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                || (other instanceof ModuleBook // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                \u0026\u0026 modules.equals(((ModuleBook) other).modules));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return modules.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyMeetingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public interface ReadOnlyMeetingBook {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    ObservableList\u003cMeeting\u003e getMeetingList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gloon99": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyModuleBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public interface ReadOnlyModuleBook {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Path getModuleBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Path meetingBookFilePath \u003d Paths.get(\"data\" , \"meetingbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private Path moduleBookFilePath \u003d Paths.get(\"data\" , \"modulebook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return meetingBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeetingBookFilePath(Path meetingBookFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(meetingBookFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.meetingBookFilePath \u003d meetingBookFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return moduleBookFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModuleBookFilePath(Path moduleBookFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(moduleBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.moduleBookFilePath \u003d meetingBookFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 10,
      "EkamSinghPandher": 10,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/SpecialName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents a special Name that allows any characters. However, the special name should not be a string with only"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * white spaces and should not be empty."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class SpecialName {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \"Names should not be empty or only have whitespaces\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Constructs a {@code SpecialName}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param name A valid special name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public SpecialName(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns true if a given string is a valid special name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Guarantees: String has been trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param test String to be tested."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return test.length() !\u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_FORMAT_CONSTRAINTS \u003d \"Dates should be in the format yyyy-mm-dd\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"The date given should be a valid date\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates should be in the format yyyy-mm-dd and \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"the date given should be a valid date\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]{4}[-]{1}[0-9]{2}[-]{1}[0-9]{2}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public static final DateTimeFormatter INPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public static final DateTimeFormatter OUTPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"d LLL (EEE)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    // For DB storage. See Json AdaptedMeeting for use."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public final LocalDate date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        checkArgument(isValidFormat(date), MESSAGE_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.value \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.date \u003d LocalDate.parse(date, INPUT_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public LocalDate getLocalDateFormat() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns true if a given string is in a valid date format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static boolean isValidFormat(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            LocalDate.parse(test);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (test.startsWith(\"0000\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static boolean isValidDateInput(String test) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return isValidFormat(test) \u0026\u0026 isValidDate(test);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return date.format(OUTPUT_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 66,
      "nopenotj": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/Meeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.commons.SpecialName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class Meeting {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final Module module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final MeetingName meetingName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final Set\u003cPerson\u003e members \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final Set\u003cSpecialName\u003e agendas \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final Set\u003cSpecialName\u003e notes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Meeting(Module module, MeetingName name, Date date, Time time, Set\u003cPerson\u003e members,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                   Set\u003cSpecialName\u003e agendas, Set\u003cSpecialName\u003e notes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireAllNonNull(module, name, date, time, members);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.meetingName \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.members.addAll(members);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.agendas.addAll(agendas);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.notes.addAll(notes);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Module getModule() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this.module;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingName getMeetingName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this.meetingName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Set\u003cPerson\u003e getParticipants() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return Collections.unmodifiableSet(members);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Set\u003cSpecialName\u003e getAgendas() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return Collections.unmodifiableSet(agendas);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Set\u003cSpecialName\u003e getNotes() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return Collections.unmodifiableSet(notes);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public List\u003cSpecialName\u003e getAgendasAsList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new ArrayList\u003c\u003e(agendas);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public List\u003cSpecialName\u003e getNotesAsList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new ArrayList\u003c\u003e(notes);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns true if both meetings have the same name, date and time."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean isSameMeeting(Meeting otherMeeting) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (otherMeeting \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return otherMeeting !\u003d null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 otherMeeting.getModule().equals(getModule())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 otherMeeting.getMeetingName().equals(getMeetingName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean isSameMeetingName(MeetingName otherMeetingName) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return meetingName.equals(otherMeetingName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns a string representation of the meeting with surrounding square brackets."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String getBracketNotation() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"[\" + this.module.getModuleName() + \"] \" + this.meetingName;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns true if both meetings have the same identity and data fields."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * This defines a stronger notion of equality between two meetings."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!(other instanceof Meeting)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting otherMeeting \u003d (Meeting) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return otherMeeting.getModule().equals(getModule())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 otherMeeting.getMeetingName().equals(getMeetingName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 otherMeeting.getDate().equals(getDate())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 otherMeeting.getTime().equals(getTime())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 otherMeeting.getParticipants().equals(getParticipants());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return Objects.hash(module, meetingName, date, time, members);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        builder.append(\"[\" + getModule().getModuleName() + \"] \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .append(getMeetingName())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .append(getTime())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .append(\" Members: \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        getParticipants().forEach(member -\u003e builder.append(member.getName() + \", \"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        builder.append(\" Agendas: \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        getAgendas().forEach(agenda -\u003e builder.append(agenda.toString() + \", \"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        builder.append(\" Notes: \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        getNotes().forEach(note -\u003e builder.append(note.toString() + \", \"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return builder.substring(0, builder.length() - 2);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 107,
      "nopenotj": 5,
      "royleochan": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/MeetingName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class MeetingName {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public final String meetingName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @param meetingMame A valid meeting name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingName(String meetingMame) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(meetingMame);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        checkArgument(isValidMeetingName(meetingMame), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetingName \u003d meetingMame;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static boolean isValidMeetingName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return meetingName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                || (other instanceof MeetingName // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 meetingName.equals(((MeetingName) other).meetingName)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return meetingName.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/MeetingNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class MeetingNameContainsKeywordsPredicate implements Predicate\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean test(Meeting meeting) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(meeting.getMeetingName().meetingName, keyword));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                || (other instanceof MeetingNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 keywords.equals(((MeetingNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_FORMAT_CONSTRAINTS \u003d \"Times should be in the format hh:mm\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d \"The time given should be a valid time\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Times should be in the format hh:mm \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            + \"the time given should be a valid time\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]{2}[:]{1}[0-9]{2}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final DateTimeFormatter INPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"kk:mm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public static final DateTimeFormatter OUTPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"h:mm a\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    // For DB storage. See Json AdaptedMeeting for use."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public final LocalTime time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        checkArgument(isValidFormat(time), MESSAGE_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.value \u003d time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.time \u003d LocalTime.parse(time, INPUT_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public LocalTime getLocalTimeFormat() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns true if a given string is in a valid time format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static boolean isValidFormat(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            LocalTime.parse(test);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static boolean isValidTimeInput(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return isValidFormat(test) \u0026\u0026 isValidTime(test);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return time.format(OUTPUT_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                \u0026\u0026 time.equals(((Time) other).time)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return time.hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 66,
      "nopenotj": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/UniqueMeetingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.exceptions.DuplicateMeetingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.exceptions.MeetingNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class UniqueMeetingList implements Iterable\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final ObservableList\u003cMeeting\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final ObservableList\u003cMeeting\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns true if the list contains an equivalent meeting as the given argument."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean contains(Meeting toCheck) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMeeting);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns true if the list contains a meeting with the same meeting name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean contains(MeetingName toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return internalList.stream().anyMatch(meeting -\u003e meeting.isSameMeetingName(toCheck));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Adds a meeting to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * The meeting must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void add(Meeting toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Replaces the meeting {@code target} in the list with {@code editedMeeting}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * The meeting identity of {@code editedMeeting} must not be the same as another existing meeting in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireAllNonNull(target, editedMeeting);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!target.isSameMeeting(editedMeeting) \u0026\u0026 contains(editedMeeting)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        internalList.set(index, editedMeeting);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Removes the equivalent meeting from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * The meeting must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void remove(Meeting toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Removes the meeting from the list according to index."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * The index must be valid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (index \u003e\u003d internalList.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        internalList.remove(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns size of the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeetings(UniqueMeetingList replacement) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeetings(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireAllNonNull(meetings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!meetingsAreUnique(meetings)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        internalList.setAll(meetings);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public ObservableList\u003cMeeting\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Iterator\u003cMeeting\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                || (other instanceof UniqueMeetingList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueMeetingList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private boolean meetingsAreUnique(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (int i \u003d 0; i \u003c meetings.size() - 1; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c meetings.size(); j++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                if (meetings.get(i).isSameMeeting(meetings.get(j))) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 128,
      "royleochan": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/exceptions/DuplicateMeetingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model.meeting.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class DuplicateMeetingException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public DuplicateMeetingException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        super(\"Operation would result in duplicate meetings\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/exceptions/MeetingNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model.meeting.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class MeetingNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final ModuleName moduleName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final Set\u003cPerson\u003e classmates;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Module(ModuleName moduleName, Set\u003cPerson\u003e classmates) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireAllNonNull(moduleName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.classmates \u003d classmates;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ModuleName getModuleName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this.moduleName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Set\u003cPerson\u003e getClassmates() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return Collections.unmodifiableSet(classmates);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * checks if the module contains the classmate of the given name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @param name name of the classmate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @return true if classmate is in module, false otherwise"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean hasClassmate(Name name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (Person person : getClassmates()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (person.isSameName(name)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns true if both modules have the same name and members."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                \u0026\u0026 otherModule.getModuleName().getModuleName().equals(getModuleName().getModuleName())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                \u0026\u0026 otherModule.getClassmates().equals(getClassmates());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns true if both modules have the same name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean isSameName(ModuleName otherModuleName) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return moduleName.equals(otherModuleName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns true if both modules have the same identity and data fields."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return otherModule.getModuleName().equals(getModuleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return Objects.hash(moduleName, classmates);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        builder.append(\"Module: \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .append(getModuleName())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .append(\" Members: \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        getClassmates().forEach(member -\u003e builder.append(member.getName() + \", \"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return builder.substring(0, builder.length() - 2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 22,
      "EkamSinghPandher": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class ModuleName {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final String moduleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @param moduleName A valid meeting name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ModuleName(String moduleName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(moduleName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        checkArgument(isValidModuleName(moduleName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static boolean isValidModuleName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public String getModuleName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return this.moduleName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                || (other instanceof ModuleName"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                \u0026\u0026 moduleName.equals(((ModuleName) other).getModuleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return moduleName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "class ModuleNameContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ModuleNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .anyMatch(keyword"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    -\u003e StringUtil.containsWordIgnoreCase(module.getModuleName().getModuleName(), keyword));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                || (other instanceof ModuleNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                \u0026\u0026 keywords.equals(((ModuleNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public boolean contains(Module newMod) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(newMod);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return internalList.stream().anyMatch(newMod::isSameModule);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns true if the list contains a meeting with the same meeting name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public boolean contains(ModuleName toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return internalList.stream().anyMatch(module -\u003e module.isSameName(toCheck));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Adds a module to the module list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void add(Module newMod) throws DuplicateModuleException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(newMod);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (contains(newMod)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        internalList.add(newMod);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModule(Module target, Module editedModule) throws RuntimeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!target.isSameModule(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * The meeting must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!isAllModuleUnique(modules)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Optional\u003cModule\u003e getModule(ModuleName name) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return internalList.stream().filter(mod-\u003emod.getModuleName().equals(name)).findFirst();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Checks to make sure all modules are unique within the list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private boolean isAllModuleUnique(List\u003cModule\u003e mods) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        for (int i \u003d 0; i \u003c mods.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            for (int j \u003d i + 1; j \u003c mods.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                if (mods.get(i).isSameModule(mods.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException{}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/FullNameMatchesKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class FullNameMatchesKeywordPredicate implements PersonPredicate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public FullNameMatchesKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .anyMatch(keyword -\u003e person.getName().fullName.equals(keyword));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                || (other instanceof FullNameMatchesKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \u0026\u0026 keywords.equals(((FullNameMatchesKeywordPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String getFirstName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        int spaceIndex \u003d fullName.indexOf(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return spaceIndex \u003d\u003d -1 ? fullName : fullName.substring(0, spaceIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "nopenotj": 2,
      "-": 58,
      "royleochan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class NameContainsKeywordsPredicate implements PersonPredicate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    //@@author jerrylchong"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .anyMatch(keyword -\u003e ("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        person.getName().fullName.toLowerCase().contains(keyword.toLowerCase())"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        || hasInitials(person, keyword)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    //@@author jerrylchong"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private boolean hasInitials(Person person, String keyword) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String fullName \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String[] splitName \u003d fullName.split(\"\\\\s\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String initials \u003d Arrays.stream(splitName).reduce(\"\", (x, y) -\u003e x + y.substring(0, 1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return initials.toLowerCase().equals(keyword.toLowerCase());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 21,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.exceptions.PersonTagConstraintException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public enum PersonType {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        CONTACT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        PROFESSOR,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        TA"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final PersonType personType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        requireAllNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.personType \u003d parseTags(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Mark a person as Professor or TA if there\u0027s a prof tag or ta tag. Otherwise set PersonType as CONTACT."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws PersonTagConstraintException if there is both prof tag and ta tag."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private PersonType parseTags(Set\u003cTag\u003e tags) throws PersonTagConstraintException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Tag profTag \u003d new Tag(Tag.PROF_TAG_NAME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Tag taTag \u003d new Tag(Tag.TA_TAG_NAME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (tags.contains(profTag) \u0026\u0026 tags.contains(taTag)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new PersonTagConstraintException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } else if (tags.contains(profTag)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return PersonType.PROFESSOR;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } else if (tags.contains(taTag)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return PersonType.TA;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return PersonType.CONTACT;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public PersonType getPersonType() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return personType;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns true if both persons have the same name."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns true if both persons have the same name."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public boolean isSameName(Name otherName) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return name.equals(otherName);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return Objects.hash(name, phone, email, tags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 106,
      "royleochan": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonHasTagsAndKeywordInNamePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the names given"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * and a {@code Person}\u0027s {@code Tags} matches all of the tags given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class PersonHasTagsAndKeywordInNamePredicate implements PersonPredicate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final List\u003cString\u003e names;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final List\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Constructs a {@code PersonHasTagsAndKeywordInNamePredicate}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param names to be searched for."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tags to be searched for."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public PersonHasTagsAndKeywordInNamePredicate(List\u003cString\u003e names, List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.names \u003d names;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return names.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .anyMatch(keyword -\u003e ("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        person.getName().fullName.toLowerCase().contains(keyword.toLowerCase())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        || hasInitials(person, keyword)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ||"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                tags.stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        .anyMatch(tag -\u003e person.getTags().contains(tag));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                || (other instanceof PersonHasTagsAndKeywordInNamePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \u0026\u0026 names.equals(((PersonHasTagsAndKeywordInNamePredicate) other).names)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \u0026\u0026 tags.equals(((PersonHasTagsAndKeywordInNamePredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private boolean hasInitials(Person person, String keyword) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String fullName \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String[] splitName \u003d fullName.split(\"\\\\s\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String initials \u003d Arrays.stream(splitName).reduce(\"\", (x, y) -\u003e x + y.substring(0, 1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return initials.toLowerCase().equals(keyword.toLowerCase());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonHasTagsAndNamePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the names given"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * and a {@code Person}\u0027s {@code Tags} matches all of the tags given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class PersonHasTagsAndNamePredicate implements PersonPredicate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final List\u003cString\u003e names;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final List\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Constructs a {@code PersonHasTagsAndNamePredicate}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param names to be searched for."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tags to be searched for."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public PersonHasTagsAndNamePredicate(List\u003cString\u003e names, List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.names \u003d names;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return names.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .anyMatch(keyword -\u003e person.getName().fullName.equals(keyword))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ||"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                tags.stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .anyMatch(tag -\u003e person.getTags().contains(tag));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                || (other instanceof PersonHasTagsAndNamePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \u0026\u0026 names.equals(((PersonHasTagsAndNamePredicate) other).names)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \u0026\u0026 tags.equals(((PersonHasTagsAndNamePredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonHasTagsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the names given"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * and a {@code Person}\u0027s {@code Tags} matches all of the tags given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class PersonHasTagsPredicate implements PersonPredicate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private final List\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public PersonHasTagsPredicate(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return tags.stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .anyMatch(tag -\u003e person.getTags().contains(tag));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                || (other instanceof PersonHasTagsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \u0026\u0026 tags.equals(((PersonHasTagsPredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public interface PersonPredicate extends Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long and not longer than \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    + \"20 digits\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,20}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "royleochan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns true if the list contains a person with the name to be checked."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param toCheck name to check."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public boolean contains(Name toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return internalList.stream().anyMatch(person -\u003e person.isSameName(toCheck));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 137,
      "royleochan": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PersonTagConstraintException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class PersonTagConstraintException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public PersonTagConstraintException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super(\"Person can only have either prof or ta tag but not both.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Special tags that will determine the PersonType to be PROFESSOR, TA, or CONTACT. A person can only have either"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * the prof tag or ta tag but not both."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String PROF_TAG_NAME \u003d \"prof\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String TA_TAG_NAME \u003d \"ta\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "royleochan": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.commons.SpecialName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                getTagSet(\"prof\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                getTagSet(\"ta\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static Module[] getSampleModules() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return new Module[] {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            new Module(new ModuleName(\"CS1100\"), getPersonSet(\"Alex Yeoh\", \"Bernice Yu\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            new Module(new ModuleName(\"CS1101\"), getPersonSet(\"Bernice Yu\", \"David Li\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            new Module(new ModuleName(\"CS1102\"), getPersonSet(\"David Li\", \"Charlotte Oliveiro\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            new Module(new ModuleName(\"CS1103\"), getPersonSet(\"Roy Balakrishnan\", \"Bernice Yu\"))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static Meeting[] getSampleMeetings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new Meeting[] {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            new Meeting(getModule(\"CS1100\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    new MeetingName(\"Weekly Meeting\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    new Date(\"2020-09-20\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    new Time(\"10:00\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    getPersonSet(\"Alex Yeoh\", \"Bernice Yu\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    getSpecialNameSet(\"Discuss observer pattern.\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    getSpecialNameSet(\"Refer to textbook.\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            new Meeting(getModule(\"CS1101\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    new MeetingName(\"Project Meeting\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    new Date(\"2020-10-19\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    new Time(\"17:30\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    getPersonSet(\"Bernice Yu\", \"David Li\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    getSpecialNameSet(\"Discuss application layer.\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    getSpecialNameSet(\"Talk about http and dns.\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            new Meeting(getModule(\"CS1102\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    new MeetingName(\"Emergency Meeting\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    new Date(\"2020-10-10\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    new Time(\"16:00\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    getPersonSet(\"David Li\", \"Charlotte Oliveiro\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    getSpecialNameSet(\"Resolve merge conflicts.\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    getSpecialNameSet(\"Bug with my commit\")),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            new Meeting(getModule(\"CS1103\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    new MeetingName(\"Report Discussion\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    new Date(\"2020-09-08\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    new Time(\"08:00\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    getPersonSet(\"Roy Balakrishnan\", \"Bernice Yu\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    getSpecialNameSet(\"Discuss about pipelining\", \"Change the presentation slides\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                            \"Add more content about cache concepts\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    getSpecialNameSet(\"Arrange for consult if needed.\"))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns a special name (Agenda or Notes) set containing the list of strings given."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static Set\u003cSpecialName\u003e getSpecialNameSet(String... strings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .map(SpecialName::new)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static ReadOnlyMeetingBook getSampleMeetingBook() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingBook sampleMb \u003d new MeetingBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (Meeting sampleMeeting : getSampleMeetings()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            sampleMb.addMeeting(sampleMeeting);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return sampleMb;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static ReadOnlyModuleBook getSampleModuleBook() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ModuleBook sampleMb \u003d new ModuleBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        for (Module sampleModule : getSampleModules()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            sampleMb.addModule(sampleModule);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return sampleMb;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static Set\u003cPerson\u003e getPersonSet(String... strings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Set\u003cPerson\u003e personSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (String string : strings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            Name name \u003d new Name(string);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            for (Person person : getSamplePersons()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                if (person.isSameName(name)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                    personSet.add(person);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return personSet;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static Module getModule(String string) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (Module module: getSampleModules()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (module.isSameName(new ModuleName(string))) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 61,
      "EkamSinghPandher": 19,
      "-": 51,
      "royleochan": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMeeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.commons.SpecialName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class JsonAdaptedMeeting {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final JsonAdaptedModule module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final String meetingName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e memberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final List\u003cString\u003e agendaList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final List\u003cString\u003e noteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public JsonAdaptedMeeting(@JsonProperty(\"module\") JsonAdaptedModule module,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                              @JsonProperty(\"meeting name\") String meetingName,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                              @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                              @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                              @JsonProperty(\"members\") List\u003cJsonAdaptedPerson\u003e memberList,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                              @JsonProperty(\"agendas\") List\u003cString\u003e agendaList,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                              @JsonProperty(\"notes\") List\u003cString\u003e noteList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.meetingName \u003d meetingName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (memberList !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            this.memberList.addAll(memberList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (agendaList !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            this.agendaList.addAll(agendaList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (noteList !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            this.noteList.addAll(noteList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Constructs a {@code JsonAdaptedMeeting} with the given meeting details."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public JsonAdaptedMeeting(Meeting source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        module \u003d new JsonAdaptedModule(source.getModule());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetingName \u003d source.getMeetingName().meetingName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        date \u003d source.getDate().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        time \u003d source.getTime().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        memberList.addAll(source.getParticipants().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        agendaList.addAll(source.getAgendas().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .map(SpecialName::toString).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        noteList.addAll(source.getNotes().stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .map(SpecialName::toString).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Converts this Jackson-friendly adapted meeting object into the model\u0027s {@code Meeting} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted meeting."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Meeting toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        final List\u003cPerson\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (JsonAdaptedPerson person : memberList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            members.add(person.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        final List\u003cSpecialName\u003e agendas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        for (String agenda : agendaList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            agendas.add(new SpecialName(agenda));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        final List\u003cSpecialName\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        for (String note : noteList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            notes.add(new SpecialName(note));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Module modelModule \u003d module.toModelType();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (meetingName \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                                            MeetingName.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!MeetingName.isValidMeetingName(meetingName)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new IllegalValueException(MeetingName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        final MeetingName modelName \u003d new MeetingName(meetingName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!Date.isValidDateInput(date)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!Time.isValidTimeInput(time)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        final Time modelTime \u003d new Time(time);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        final Set\u003cPerson\u003e modelMembers \u003d new HashSet\u003c\u003e(members);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        final Set\u003cSpecialName\u003e modelAgendas \u003d new HashSet\u003c\u003e(agendas);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        final Set\u003cSpecialName\u003e modelNotes \u003d new HashSet\u003c\u003e(notes);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new Meeting(modelModule, modelName, modelDate, modelTime, modelMembers, modelAgendas, modelNotes);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 102,
      "royleochan": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class JsonAdaptedModule {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final String moduleName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e memberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given person details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"module name\") String moduleName,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                              @JsonProperty(\"members\") List\u003cJsonAdaptedPerson\u003e memberList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (memberList !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            this.memberList.addAll(memberList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given meeting details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        moduleName \u003d source.getModuleName().getModuleName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        memberList.addAll(source.getClassmates().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        final List\u003cPerson\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        for (JsonAdaptedPerson person : memberList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            members.add(person.toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (moduleName \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    ModuleName.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!ModuleName.isValidModuleName(moduleName)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new IllegalValueException(ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        final ModuleName modelName \u003d new ModuleName(moduleName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        final Set\u003cPerson\u003e modelMembers \u003d new HashSet\u003c\u003e(members);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return new Module(modelName, modelMembers);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 94,
      "royleochan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonMeetingBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class JsonMeetingBookStorage implements MeetingBookStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMeetingBookStorage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public JsonMeetingBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return readMeetingBook(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Similar to {@link #readMeetingBook()}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Optional\u003cJsonSerializableMeetingBook\u003e jsonMeetingBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                filePath, JsonSerializableMeetingBook.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!jsonMeetingBook.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return Optional.of(jsonMeetingBook.get().toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        saveMeetingBook(meetingBook, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Similar to {@link #saveMeetingBook(ReadOnlyMeetingBook)}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(meetingBook);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMeetingBook(meetingBook), filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonModuleBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class JsonModuleBookStorage implements ModuleBookStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonModuleBookStorage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public JsonModuleBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Optional\u003cReadOnlyModuleBook\u003e readModuleBook() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return readModuleBook(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Similar to {@link #readModuleBook()}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Optional\u003cReadOnlyModuleBook\u003e readModuleBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Optional\u003cJsonSerializableModuleBook\u003e jsonModuleBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                filePath, JsonSerializableModuleBook.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (!jsonModuleBook.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return Optional.of(jsonModuleBook.get().toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void saveModuleBook(ReadOnlyModuleBook moduleBook) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        saveModuleBook(moduleBook, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Similar to {@link #saveModuleBook(ReadOnlyModuleBook)}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void saveModuleBook(ReadOnlyModuleBook moduleBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(moduleBook);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableModuleBook(moduleBook), filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableMeetingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class JsonSerializableMeetingBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"Meetings list contains duplicate meeting(s).\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final List\u003cJsonAdaptedMeeting\u003e meetings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public JsonSerializableMeetingBook(@JsonProperty(\"meetings\") List\u003cJsonAdaptedMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.meetings.addAll(meetings);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public JsonSerializableMeetingBook(ReadOnlyMeetingBook source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetings.addAll(source.getMeetingList().stream().map(JsonAdaptedMeeting::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Converts this meeting book into the model\u0027s {@code MeetingBook} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingBook meetingBook \u003d new MeetingBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (JsonAdaptedMeeting jsonAdaptedMeeting : meetings) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            Meeting meeting \u003d jsonAdaptedMeeting.toModelType();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (meetingBook.hasMeeting(meeting)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            meetingBook.addMeeting(meeting);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return meetingBook;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableModuleBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class JsonSerializableModuleBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"Module list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public JsonSerializableModuleBook(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public JsonSerializableModuleBook(ReadOnlyModuleBook source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Converts this module book into the model\u0027s {@code ModuleBook} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ModuleBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            if (moduleBook.hasModule(module)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            moduleBook.addModule(module);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return moduleBook;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/MeetingBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public interface MeetingBookStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    void saveMeetingBook(ReadOnlyMeetingBook meetingBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ModuleBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public interface ModuleBookStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Path getModuleBookFilePath();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Optional\u003cReadOnlyModuleBook\u003e readModuleBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Optional\u003cReadOnlyModuleBook\u003e readModuleBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    void saveModuleBook(ReadOnlyModuleBook moduleBook) throws IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    void saveModuleBook(ReadOnlyModuleBook moduleBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public interface Storage extends AddressBookStorage, MeetingBookStorage, UserPrefsStorage, ModuleBookStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Path getModuleBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    Optional\u003cReadOnlyModuleBook\u003e readModuleBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    void saveModuleBook(ReadOnlyModuleBook meetingBook) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 8,
      "EkamSinghPandher": 12,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private MeetingBookStorage meetingBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private ModuleBookStorage moduleBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                          MeetingBookStorage meetingBookStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                          ModuleBookStorage moduleBookStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.moduleBookStorage \u003d moduleBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.meetingBookStorage \u003d meetingBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MeetingBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return meetingBookStorage.getMeetingBookFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return readMeetingBook(meetingBookStorage.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return meetingBookStorage.readMeetingBook(filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        saveMeetingBook(meetingBook, meetingBookStorage.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetingBookStorage.saveMeetingBook(meetingBook, filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ModuleBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return moduleBookStorage.getModuleBookFilePath();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Optional\u003cReadOnlyModuleBook\u003e readModuleBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return readModuleBook(moduleBookStorage.getModuleBookFilePath());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Optional\u003cReadOnlyModuleBook\u003e readModuleBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return moduleBookStorage.readModuleBook(filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void saveModuleBook(ReadOnlyModuleBook moduleBook) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        saveModuleBook(moduleBook, moduleBookStorage.getModuleBookFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void saveModuleBook(ReadOnlyModuleBook moduleBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        moduleBookStorage.saveModuleBook(moduleBook, filePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 34,
      "EkamSinghPandher": 32,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        setKeyboardShortcut(\"CTRL\", KeyCode.U, () -\u003e commandTextField.clear());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        setKeyboardShortcut(\"CTRL\", KeyCode.W, () -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            commandTextField.selectPreviousWord();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            commandTextField.deleteNextChar();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Adds keyboard shortcut to execute functions"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void setKeyboardShortcut(String modifier, KeyCode keyCode, Runnable runnable) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        commandTextField.addEventFilter(KeyEvent.KEY_PRESSED, (event -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            boolean isModifierDown;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            switch (modifier) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            case \"CTRL\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                isModifierDown \u003d event.isControlDown();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            case \"ALT\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                isModifierDown \u003d event.isAltDown();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                isModifierDown \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (event.getCode() \u003d\u003d keyCode \u0026\u0026 isModifierDown) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                runnable.run();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public TextField getCommandTextField() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return commandTextField;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setCommandTextField(String text) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.commandTextField.clear();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.commandTextField.replaceSelection(text);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 6,
      "nopenotj": 35,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "//@@author EkamSinghPandher"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private List\u003cString\u003e commandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private int index \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private int length \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private boolean isFirstUp \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Adds the command entered into the command history"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @param command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void addCommand(String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        commandList.add(command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        length \u003d commandList.size();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        index \u003d length - 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        isFirstUp \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Finds the previous command in the command history."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @return Command text if there is any"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Optional\u003cString\u003e up() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        } else if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return Optional.of(commandList.get(index));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        } else if (isFirstUp) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            Optional\u003cString\u003e result \u003d Optional.of(commandList.get(index));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            isFirstUp \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            index \u003d index - 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            Optional\u003cString\u003e result \u003d Optional.of(commandList.get(index));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Finds the next command in the command history"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * @return Command text if there is any"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Optional\u003cString\u003e down() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        if (length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        } else if (index \u003d\u003d length - 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return Optional.of(commandList.get(index));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            index \u003d index + 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            Optional\u003cString\u003e result \u003d Optional.of(commandList.get(index));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "//@@author royleochan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.application.HostServices;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.control.Hyperlink;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103-f10-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private HBox helpContainer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Hyperlink hyperlink;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        hyperlink.setText(USERGUIDE_URL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void show(HostServices hostServices, String theme) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        hyperlink.setOnAction(event -\u003e hostServices.showDocument(hyperlink.getText()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ObservableList\u003cString\u003e helpContainerStylesheets \u003d helpContainer.getStylesheets();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (helpContainerStylesheets.size() !\u003d 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            helpContainerStylesheets.remove(0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        switch (theme) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case Themes.DARK_THEME_FILE:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            helpContainerStylesheets.add(getClass().getResource(Themes.DARK_THEME_PATH).toExternalForm());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case Themes.LIGHT_THEME_FILE:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            helpContainerStylesheets.add(getClass().getResource(Themes.LIGHT_THEME_PATH).toExternalForm());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            assert false : theme;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.application.HostServices;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.logic.textfieldmodules.AutocompleteModule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.logic.textfieldmodules.FzfModule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private HostServices hostServices;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private MeetingListPanel meetingListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private TimelineWindow timelineWindow;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private VBox mainContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private MenuItem lightThemeMenuItem;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private MenuItem darkThemeMenuItem;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private StackPane meetingListPanelPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private StackPane selectedMeetingPlaceholder;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic, HostServices hostServices) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.hostServices \u003d hostServices;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        timelineWindow \u003d new TimelineWindow(logic);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // default theme is dark"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        setStylesheet(Themes.DARK_THEME, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        setAccelerator(lightThemeMenuItem, KeyCombination.valueOf(\"F2\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        setAccelerator(darkThemeMenuItem, KeyCombination.valueOf(\"F3\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Sets the stylesheet to be used by the main container."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param theme the theme to be used. Can be light or dark."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Guarantees that theme is a valid theme."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private void setStylesheet(String theme, boolean triggerResultDisplay) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        logger.info(\"Switching to \" + theme + \" theme\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assert theme.equals(Themes.LIGHT_THEME) || theme.equals(Themes.DARK_THEME);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ObservableList\u003cString\u003e mainContainerStylesheets \u003d mainContainer.getStylesheets();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (mainContainerStylesheets.size() !\u003d 0) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            mainContainerStylesheets.remove(0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        switch (theme) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case Themes.DARK_THEME:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            mainContainerStylesheets.add(getClass().getResource(Themes.DARK_THEME_PATH).toExternalForm());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            feedbackToUser \u003d \"Dark theme set successfully.\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case Themes.LIGHT_THEME:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            mainContainerStylesheets.add(getClass().getResource(Themes.LIGHT_THEME_PATH).toExternalForm());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            feedbackToUser \u003d \"Light theme set successfully.\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            assert false : theme;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            feedbackToUser \u003d \"Theme does not exist\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (triggerResultDisplay) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            resultDisplay.setFeedbackToUser(feedbackToUser);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Theme of the application"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private String getTheme() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String[] stylesheet \u003d mainContainer.getStylesheets().get(0).split(\"/\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return stylesheet[stylesheet.length - 1];"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        meetingListPanel \u003d new MeetingListPanel(logic.getFilteredMeetingList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        meetingListPanelPlaceholder.getChildren().add(meetingListPanel.getRoot());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        setupTextFieldModules(commandBox.getCommandTextField());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        commandBox.getCommandTextField().addEventFilter(KeyEvent.KEY_PRESSED, (event) -\u003e {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                Optional\u003cString\u003e historyText \u003d commandHistory.up();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                if (historyText.isPresent()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    commandBox.setCommandTextField(historyText.get());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    event.consume();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        });"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        commandBox.getCommandTextField().addEventFilter(KeyEvent.KEY_PRESSED, (event) -\u003e {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                Optional\u003cString\u003e historyText \u003d commandHistory.down();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                if (historyText.isPresent()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                    commandBox.setCommandTextField(historyText.get());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        });"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (logic.getSelectedMeeting() !\u003d null) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            MeetingDetailsPanel selectedMeeting \u003d new MeetingDetailsPanel(logic.getSelectedMeeting(), 1);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            selectedMeetingPlaceholder.getChildren().add(selectedMeeting.getRoot());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void setupTextFieldModules(TextField commandTextField) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        AutocompleteModule autocompleteModule \u003d AutocompleteModule.attachTo(commandTextField);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        autocompleteModule.addSuggestions(\"cn/\", () -\u003e logic.getAddressBook().getPersonList().stream()"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .map(p -\u003e p.getName().fullName).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        autocompleteModule.addSuggestions(\"mdn/\", () -\u003e logic.getModuleBook().getModuleList().stream()"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .map(m -\u003e m.getModuleName().getModuleName()).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        autocompleteModule.addSuggestions(\"mtn/\", () -\u003e logic.getMeetingBook().getMeetingList().stream()"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .map(m -\u003e m.getMeetingName().meetingName).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        FzfModule.attachTo(commandTextField, () -\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                Stream.of("
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        logic.getAddressBook().getPersonList().stream().map(p -\u003e p.getName().fullName),"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        logic.getModuleBook().getModuleList().stream().map(m -\u003e m.getModuleName().getModuleName()),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        logic.getMeetingBook().getMeetingList().stream().map(m -\u003e m.getMeetingName().meetingName)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                ).flatMap(x -\u003e x).collect(Collectors.toList())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            helpWindow.show(hostServices, getTheme());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Sets the theme to light theme."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void toggleLight() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        setStylesheet(Themes.LIGHT_THEME, true);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Sets the theme to dark theme."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void toggleDark() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        setStylesheet(Themes.DARK_THEME, true);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Updates the selected meeting when the meeting view command is executed or any details of the selected meeting"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * is changed."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void updateSelectedMeeting() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        logger.info(\"UI update selected meeting triggered\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (logic.getSelectedMeeting() \u003d\u003d null \u0026\u0026 selectedMeetingPlaceholder.getChildren().size() \u003e 0) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            selectedMeetingPlaceholder.getChildren().remove(0);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (logic.getFilteredMeetingList().size() !\u003d 0 \u0026\u0026 logic.getSelectedMeeting() !\u003d null) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            MeetingDetailsPanel selectedMeeting \u003d new MeetingDetailsPanel(logic.getSelectedMeeting(),"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    logic.getFilteredMeetingList().indexOf(logic.getSelectedMeeting()) + 1);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            if (selectedMeetingPlaceholder.getChildren().size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                selectedMeetingPlaceholder.getChildren().set(0, selectedMeeting.getRoot());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                selectedMeetingPlaceholder.getChildren().add(selectedMeeting.getRoot());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Updates the timeline window whenever a change is made in meetings"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void updateTimeline() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        timelineWindow.hide();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        timelineWindow \u003d timelineWindow.updateLogic(logic);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Opens the timeline window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void handleShowTimeline() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        logger.info(\"UI show timeline triggered\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!timelineWindow.isShowing()) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            timelineWindow.show(getTheme());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            timelineWindow.focus();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        timelineWindow.hide();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            if (commandResult.isTriggerUpdate()) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                updateSelectedMeeting();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (commandResult.isShowTimeline()) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                handleShowTimeline();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (commandResult.isTriggerUpdateTimeline()) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                updateTimeline();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            if (commandResult.isTriggerDarkTheme()) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                setStylesheet(Themes.DARK_THEME, false);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            if (commandResult.isTriggerLightTheme()) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                setStylesheet(Themes.LIGHT_THEME, false);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            commandHistory.addCommand(commandText);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 38,
      "EkamSinghPandher": 24,
      "nopenotj": 37,
      "-": 197,
      "royleochan": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MeetingCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class MeetingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private static final String FXML \u003d \"MeetingListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public final Meeting meeting;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private FlowPane participants;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public MeetingCard(Meeting meeting, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        name.setText(\"[\" + meeting.getModule().getModuleName() + \"] \" + meeting.getMeetingName().meetingName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        time.setText(meeting.getTime().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        date.setText(meeting.getDate().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meeting.getParticipants().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .sorted(Comparator.comparing(participant -\u003e participant.getName().fullName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .forEach(participant -\u003e participants.getChildren()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        .add(new Label(participant.getName().getFirstName())));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (!(other instanceof MeetingCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        MeetingCard card \u003d (MeetingCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                \u0026\u0026 meeting.equals(card.meeting);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 4,
      "nopenotj": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MeetingDetailsPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.commons.SpecialName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * An UI component that displays information of a {@code Meeting}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class MeetingDetailsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static final String FXML \u003d \"MeetingDetailsPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public final Meeting meeting;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private FlowPane participants;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Tab agendaTab;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Tab notesTab;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private ListView\u003cSpecialName\u003e agendas;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private ListView\u003cSpecialName\u003e notes;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public MeetingDetailsPanel(Meeting meeting, int displayedIndex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        agendaTab.setText(\"Agenda\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        notesTab.setText(\"Notes\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        name.setText(meeting.getBracketNotation());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        time.setText(meeting.getTime().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        date.setText(meeting.getDate().toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        agendas.setItems(FXCollections.observableList(meeting.getAgendasAsList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        notes.setItems(FXCollections.observableList(meeting.getNotesAsList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        meeting.getParticipants().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .sorted(Comparator.comparing(participant -\u003e participant.getName().fullName))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .forEach(participant -\u003e participants.getChildren()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        .add(new Label(participant.getName().getFirstName())));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (!(other instanceof MeetingDetailsPanel)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        MeetingDetailsPanel card \u003d (MeetingDetailsPanel) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u0026\u0026 meeting.equals(card.meeting);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MeetingListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class MeetingListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private static final String FXML \u003d \"MeetingListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MeetingListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private ListView\u003cMeeting\u003e meetingListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Creates a {@code MeetingListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public MeetingListPanel(ObservableList\u003cMeeting\u003e meetingList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        meetingListView.setItems(meetingList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        meetingListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        protected void updateItem(Meeting meeting, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            super.updateItem(meeting, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (empty || meeting \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                setGraphic(new MeetingCard(meeting, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "nopenotj": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private FlowPane participants;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private FlowPane teachingStaff;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        name.setText(module.getModuleName().getModuleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        module.getClassmates().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .filter(participant -\u003e participant.getPersonType() \u003d\u003d Person.PersonType.CONTACT)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .sorted(Comparator.comparing(participant -\u003e participant.getName().fullName))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .forEach(participant -\u003e participants.getChildren()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                        .add(new Label(participant.getName().getFirstName())));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        module.getClassmates().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .filter(participant -\u003e participant.getPersonType() \u003d\u003d Person.PersonType.PROFESSOR)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .sorted(Comparator.comparing(participant -\u003e participant.getName().fullName))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .forEach(participant -\u003e teachingStaff.getChildren()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                        .add(new Label(\"Professor: \" + participant.getName().getFirstName() + \"  \")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        module.getClassmates().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .filter(participant -\u003e participant.getPersonType() \u003d\u003d Person.PersonType.TA)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .sorted(Comparator.comparing(participant -\u003e participant.getName().fullName))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .forEach(participant -\u003e teachingStaff.getChildren()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                        .add(new Label(\"TA: \" + participant.getName().getFirstName() + \"  \")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 24,
      "nopenotj": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Creates a {@code MeetingListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Observer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * API of meeting observer component."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public interface Observer {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    void update();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    void updateTimeline();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "royleochan": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.Person.PersonType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private ImageView hatIcon;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        PersonType personType \u003d person.getPersonType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        switch (personType) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case PROFESSOR:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case TA:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            Image hatImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/graduation_hat.png\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            hatIcon.setImage(hatImage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            assert personType \u003d\u003d PersonType.CONTACT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            hatIcon.setVisible(false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "royleochan": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Themes.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Container for theme names, theme file names and theme file paths."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class Themes {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Theme names"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String LIGHT_THEME \u003d \"light\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String DARK_THEME \u003d \"dark\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Theme file names"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String LIGHT_THEME_FILE \u003d \"LightTheme.css\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String DARK_THEME_FILE \u003d \"DarkTheme.css\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Theme file paths"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String LIGHT_THEME_PATH \u003d \"/view/LightTheme.css\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String DARK_THEME_PATH \u003d \"/view/DarkTheme.css\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimelineMeetingCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class TimelineMeetingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private static final String FXML \u003d \"TimelineMeetingCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public final Meeting meeting;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Label module;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private FlowPane participants;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private VBox vbox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public TimelineMeetingCard(Meeting meeting) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        module.setText(\"[\" + meeting.getModule().getModuleName() + \"] \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        name.setText(meeting.getMeetingName().meetingName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        time.setText(meeting.getTime().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        date.setText(meeting.getDate().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meeting.getParticipants().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .sorted(Comparator.comparing(participant -\u003e participant.getName().fullName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .forEach(participant -\u003e participants.getChildren()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        .add(new Label(participant.getName().getFirstName())));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setOverdue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        vbox.setStyle(\"-fx-background-color: rgb(102, 0, 0);\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + \"-fx-background-radius: 20;\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + \"-fx-border-radius: 20;\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        if (!(other instanceof TimelineMeetingCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        TimelineMeetingCard card \u003d (TimelineMeetingCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return name.getText().equals(card.name.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 module.getText().equals(card.module.getText())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 meeting.equals(card.meeting);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimelineSection.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class TimelineSection extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private static final String FXML \u003d \"TimelineSection.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private StackPane meetingCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private VBox vbox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final TimelineMeetingCard timelineMeetingCard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    TimelineSection(TimelineMeetingCard timelineMeetingCard) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.timelineMeetingCard \u003d timelineMeetingCard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetingCard.getChildren().add(timelineMeetingCard.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(vbox.getChildren());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        vbox.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static TimelineSection getFlipped(TimelineSection timelineSection) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        timelineSection.flip();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return timelineSection;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private void setOverdue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        timelineMeetingCard.setOverdue();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static TimelineSection getOverdue(TimelineSection timelineSection) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        timelineSection.setOverdue();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return timelineSection;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimelineWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class TimelineWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(TimelineWindow.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private static final String FXML \u003d \"TimelineWindow.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private HBox timelineContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private HBox container;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Creates a new TimelineWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @param root Stage to use as the root of the TimelineWindow."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public TimelineWindow(Stage root, Logic logic) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (int i \u003d 0; i \u003c logic.getFilteredMeetingList().size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            Meeting meeting \u003d logic.getFilteredMeetingList().get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            TimelineSection timelineSection \u003d new TimelineSection(new TimelineMeetingCard(meeting));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (i % 2 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                timelineSection \u003d TimelineSection.getFlipped(timelineSection);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            if (LocalDate.now().compareTo(meeting.getDate().getLocalDateFormat()) \u003e 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                timelineSection \u003d TimelineSection.getOverdue(timelineSection);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            } else if ((LocalDate.now().compareTo(meeting.getDate().getLocalDateFormat()) \u003d\u003d 0)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                \u0026\u0026 (LocalTime.now().compareTo(meeting.getTime().getLocalTimeFormat()) \u003e\u003d 0)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                timelineSection \u003d TimelineSection.getOverdue(timelineSection);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            container.getChildren().addAll(timelineSection.getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Creates a new TimelineWindow."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public TimelineWindow(Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this(new Stage(), logic);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public TimelineWindow updateLogic(Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new TimelineWindow(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void show(String theme) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        logger.fine(\"Showing timeline view of the application.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ObservableList\u003cString\u003e timelineContainerStylesheets \u003d timelineContainer.getStylesheets();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (timelineContainerStylesheets.size() !\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            timelineContainerStylesheets.remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        switch (theme) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case Themes.DARK_THEME_FILE:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            timelineContainerStylesheets.add(getClass().getResource(Themes.DARK_THEME_PATH).toExternalForm());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case Themes.LIGHT_THEME_FILE:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            timelineContainerStylesheets.add(getClass().getResource(Themes.LIGHT_THEME_PATH).toExternalForm());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            assert false : theme;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 110,
      "royleochan": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import javafx.application.HostServices;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    //@@author royleochan"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private HostServices hostServices;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public UiManager(Logic logic, HostServices hostServices) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.hostServices \u003d hostServices;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic, hostServices);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "-": 71,
      "royleochan": 22
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003cStackPane styleClass\u003d\"command-stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Command\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "royleochan": 2
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 100%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".label-title {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-base: #121212;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-control-inner-background: #121212;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #121212;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 10%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 10%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 10%);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#272C3F, 14%);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #272C3F;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-background-color: derive(#121212, 10%);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".command-stack-pane {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-background-color: derive(#121212, 30%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-background-color: derive(#121212, 10%);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-border-color: derive(#121212, 10%);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".rounded-pane-with-border {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-border-radius: 10;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-background-color: derive(#121212, 10%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-border-color: derive(#121212, 10%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 14%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 8%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-color: derive(#121212, 12%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 8%);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-color: derive(#121212, 8%);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 8%);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 10%);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".menu:hover {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#272C3F, 14%)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".menu:showing {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#272C3F, 14%)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 10%);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".menu-item .label {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".menu-item:focused {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#272C3F, 14%);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #121212;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  -fx-text-fill: #121212;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #121212;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 8%);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #121212;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #121212;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 12%);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 10%);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 20%);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "#participants {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #1976D2;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 1 5 1 5;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-radius: 50;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "#professor {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    -fx-background-color: #b12929;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "#participants .label {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    -fx-background-color: #329568;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 1 5 1 5;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-radius: 50;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".hat_container {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-translate-x: 220;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-translate-y: 1;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".hat_icon {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 0 100 0 10;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".selected-meeting-column {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 24%);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-pref-width: 90;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-pref-height: 24;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 44%);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab:hover {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #272C3F;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab:selected {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #272C3F;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab-label {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 0 0 0 10;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab-down-button {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab-down-button .arrow {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 24%);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".custom-list .list-cell {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 10 5 10 5;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".help-window {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 10%);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-color: derive(#121212, 10%);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".timeline-window {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 10%);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".timeline-section {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(#121212, 10%);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".timeline-box {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #272C3F;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\t-fx-border-color: white;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\t-fx-border-width: 2;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "gloon99"
        },
        "content": ".timeline_datetime_label {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "gloon99"
        },
        "content": ".timeline_meetingname_label {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".line {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-stroke: white;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "royleochan"
        },
        "content": "#hyperlink {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 14,
      "nopenotj": 16,
      "-": 325,
      "royleochan": 161
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ".autocomplete-mode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    -fx-text-fill: #d7a320 !important; /* The autocomplete class should always override the default text-fill style */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.control.Hyperlink?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\" fx:id\u003d\"helpContainer\" styleClass\u003d\"help-window\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003c!-- @@author royleochan --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003cHyperlink fx:id\u003d\"hyperlink\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "               \u003c/Hyperlink\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "-": 32,
      "royleochan": 8
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-primary-color: #EDEDED;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-secondary-color: #A5C9FF;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-accent-color: #FFB2B2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-label-color: #121212;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".label-title {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-base: -fx-primary-color;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-control-inner-background: -fx-primary-color;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: -fx-primary-color;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 10%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 10%);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 100%);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 60%);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: -fx-secondary-color;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: -fx-accent-color;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background: -fx-primary-color;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-background-color: derive(-fx-primary-color, 10%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".command-stack-pane {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-background-color: derive(-fx-primary-color, 10%);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-background-color: derive(-fx-primary-color, 10%);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-border-color: derive(-fx-primary-color, 10%);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".result-stack-pane {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-border-radius: 10;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-background-color: -fx-primary-color;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-border-color: derive(-fx-primary-color, 10%);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 14%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 8%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-color: derive(-fx-primary-color, 12%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 8%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-color: derive(-fx-primary-color, 8%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 8%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 10%);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".menu:hover {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: -fx-accent-color;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".menu:showing {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: -fx-accent-color;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 10%);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.87;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".menu-item:focused {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: -fx-accent-color;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #121212;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  -fx-text-fill: #121212;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #121212;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 8%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: -fx-primary-color;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: -fx-primary-color;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 12%);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 10%);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-secondary-color, 20%);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "royleochan"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "royleochan"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "royleochan"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "royleochan"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "royleochan"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 40%);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "royleochan"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "royleochan"
        },
        "content": "#participants {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "royleochan"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #BD091C;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 1 5 1 5;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-radius: 50;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "royleochan"
        },
        "content": "#professor {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #b12929;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "royleochan"
        },
        "content": "#participants .label {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: #AF55C9;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 1 5 1 5;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-radius: 50;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".hat_container {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-translate-x: 220;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-translate-y: 1;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".hat_icon {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 0 100 0 10;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".selected-meeting-column {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 24%);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-pref-width: 90;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-pref-height: 24;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 44%);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab:hover {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: -fx-accent-color;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab:selected {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: -fx-accent-color;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab-label {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 0 0 0 10;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab-down-button {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab-down-button .arrow {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: derive(-fx-primary-color, 24%);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".custom-list .list-cell {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-padding: 10 5 10 5;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-text-fill: -fx-label-color;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".timeline-window {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: -fx-primary-color;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".timeline-box {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    -fx-background-color: #272C3F;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\t-fx-border-color: black;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\t-fx-border-width: 2;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".timeline-section {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-background-color: -fx-primary-color;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "gloon99"
        },
        "content": ".timeline_datetime_label {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "gloon99"
        },
        "content": ".timeline_meetingname_label {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "royleochan"
        },
        "content": ".line {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    -fx-stroke: -fx-label-color;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 15,
      "royleochan": 479
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"1200\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Modduke\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    \u003cImage url\u003d\"@/images/graduation_hat.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "      \u003cVBox fx:id\u003d\"mainContainer\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Theme\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"lightThemeMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#toggleLight\" text\u003d\"Light\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"darkThemeMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#toggleDark\" text\u003d\"Dark\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"80\" prefHeight\u003d\"80\" styleClass\u003d\"stack-pane\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003cStackPane alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"50\" minHeight\u003d\"50\" prefHeight\u003d\"50\" styleClass\u003d\"stack-pane\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"20\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "          \u003cLabel styleClass\u003d\"label-title\"\u003eModduke\u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        \u003cHBox styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "          \u003cVBox alignment\u003d\"TOP_CENTER\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            \u003cLabel\u003eContacts\u003c/Label\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"300\" prefWidth\u003d\"300\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "          \u003cVBox alignment\u003d\"TOP_CENTER\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            \u003cLabel\u003eModules\u003c/Label\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003cVBox fx:id\u003d\"moduleList\" minWidth\u003d\"300\" prefWidth\u003d\"300\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "              \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "          \u003cVBox alignment\u003d\"TOP_CENTER\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            \u003cLabel\u003eMeetings\u003c/Label\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003cVBox fx:id\u003d\"meetingList\" minWidth\u003d\"300\" prefWidth\u003d\"300\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "              \u003cStackPane fx:id\u003d\"meetingListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "          \u003cVBox alignment\u003d\"TOP_CENTER\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003cLabel\u003eSelected Meeting\u003c/Label\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003cVBox fx:id\u003d\"selectedMeeting\" minWidth\u003d\"300\" prefWidth\u003d\"300\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "              \u003cStackPane fx:id\u003d\"selectedMeetingPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "nopenotj": 31,
      "-": 49,
      "royleochan": 24
    }
  },
  {
    "path": "src/main/resources/view/MeetingDetailsPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"selected-meeting-column\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    \u003cInsets top\u003d\"15\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"label\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"label\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"label\" text\u003d\"\\$datetime\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"label\" text\u003d\"\\$datetime\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003cFlowPane fx:id\u003d\"participants\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    \u003cInsets top\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003cTabPane id\u003d\"tabPane\" fx:id\u003d\"tabPane\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    \u003cTab fx:id\u003d\"agendaTab\" closable\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        \u003cListView fx:id\u003d\"agendas\" styleClass\u003d\"custom-list\"\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    \u003cTab fx:id\u003d\"notesTab\" closable\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        \u003cListView fx:id\u003d\"notes\" styleClass\u003d\"custom-list\"\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "royleochan": 54
    }
  },
  {
    "path": "src/main/resources/view/MeetingListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "      \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$datetime\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$datetime\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"participants\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 35
    }
  },
  {
    "path": "src/main/resources/view/MeetingListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  \u003cListView fx:id\u003d\"meetingListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 8
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"teachingStaff\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"participants\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 3,
      "nopenotj": 31
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "  \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 8
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003cInsets left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "          \u003cImageView fx:id\u003d\"hatIcon\" styleClass\u003d\"hat_icon\" disable\u003d\"true\" fitHeight\u003d\"30.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "          \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "royleochan": 8
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"result-stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" promptText\u003d\"Status\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "royleochan": 2
    }
  },
  {
    "path": "src/main/resources/view/TimelineMeetingCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  \u003cGridPane prefHeight\u003d\"105.0\" prefWidth\u003d\"170.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \u003cVBox fx:id\u003d\"vbox\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" styleClass\u003d\"timeline-box\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "      \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"timeline_datetime_label\" text\u003d\"time\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"timeline_datetime_label\" text\u003d\"date\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         \u003cLabel fx:id\u003d\"module\" styleClass\u003d\"timeline_meetingname_label\" text\u003d\"\\$module\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"timeline_meetingname_label\" text\u003d\"\\$name\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"participants\" styleClass\u003d\"participants\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "gloon99": 32,
      "royleochan": 2
    }
  },
  {
    "path": "src/main/resources/view/TimelineSection.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003cVBox fx:id\u003d\"vbox\" alignment\u003d\"TOP_CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"170.0\" styleClass\u003d\"timeline-section\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "      \u003cStackPane fx:id\u003d\"meetingCard\" prefHeight\u003d\"105.0\" prefWidth\u003d\"170.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "      \u003cLine endX\u003d\"-100.0\" endY\u003d\"190.0\" startX\u003d\"-100.0\" startY\u003d\"105.0\" styleClass\u003d\"line\" strokeWidth\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "      \u003cLine endX\u003d\"75.46446228027344\" startX\u003d\"-95.0\" styleClass\u003d\"line\" strokeWidth\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "      \u003cLine endX\u003d\"75.4644622802734\" startX\u003d\"-95.0\" styleClass\u003d\"line\" strokeWidth\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "      \u003cPane prefHeight\u003d\"195.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "gloon99": 12,
      "royleochan": 4
    }
  },
  {
    "path": "src/main/resources/view/TimelineWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003cfx:root maxWidth\u003d\"1195.0\" minWidth\u003d\"1195.0\" resizable\u003d\"false\" title\u003d\"Timeline\" type\u003d\"javafx.stage.Stage\" width\u003d\"1195.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    \u003cImage url\u003d\"@/images/clock.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    \u003cScene fill\u003d\"#121212\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         \u003cHBox fx:id\u003d\"timelineContainer\" alignment\u003d\"CENTER\" prefWidth\u003d\"1195.0\" styleClass\u003d\"timeline-window\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "               \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "               \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "               \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"ALWAYS\" prefWidth\u003d\"1195.0\" styleClass\u003d\"scroll-bar\" vbarPolicy\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                     \u003cHBox fx:id\u003d\"container\" prefHeight\u003d\"410.0\" prefWidth\u003d\"1195.0\" styleClass\u003d\"timeline-window\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                           \u003cInsets /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        \u003c/opaqueInsets\u003e\u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                     \u003cInsets /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "               \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gloon99": 36,
      "royleochan": 3
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "royleochan": 2
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "royleochan": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \"email\": \"pauline@example.com\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "royleochan": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \"email\": \"invalid@email!3e\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "royleochan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.storage.JsonMeetingBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.storage.JsonModuleBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        JsonMeetingBookStorage meetingBookStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new JsonMeetingBookStorage(temporaryFolder.resolve(\"meetingBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        JsonModuleBookStorage moduleBookStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                new JsonModuleBookStorage(temporaryFolder.resolve(\"moduleBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, meetingBookStorage, moduleBookStorage,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String deleteCommand \u003d \"contact delete n/blah\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertCommandException(deleteCommand, \"No contact has the given arguments.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        JsonMeetingBookStorage meetingBookStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new JsonMeetingBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionMeetingBook.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        JsonModuleBookStorage moduleBookStorage \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                new JsonModuleBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionModuleBook.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, meetingBookStorage, moduleBookStorage,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            userPrefsStorage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getMeetingBook(), model.getModuleBook(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private static class JsonMeetingBookIoExceptionThrowingStub extends JsonMeetingBookStorage {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        private JsonMeetingBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public void saveMeetingBook(ReadOnlyMeetingBook meetingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private static class JsonModuleBookIoExceptionThrowingStub extends JsonModuleBookStorage {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        private JsonModuleBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public void saveModuleBook(ReadOnlyModuleBook moduleBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 15,
      "EkamSinghPandher": 27,
      "-": 153,
      "royleochan": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            getTypicalModuleBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getMeetingBook(), model.getModuleBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "EkamSinghPandher": 5,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public boolean hasPersonName(Name name) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        public ObservableList\u003cPerson\u003e getUpdatedFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        public ObservableList\u003cPerson\u003e getUpdatedFilteredPersonList(Predicate\u003cPerson\u003e predicate,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                                                                   List\u003cModuleName\u003e modules) throws CommandException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public void setMeetingBook(ReadOnlyMeetingBook newData) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public ReadOnlyMeetingBook getMeetingBook() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public Meeting getSelectedMeeting() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setSelectedMeeting(Meeting target) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void updatePersonInMeetingBook(Person ...persons) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public boolean hasMeetingName(MeetingName meetingName) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public void deleteMeeting(Meeting targetMeeting) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public void setMeetingBookFilePath(Path meetingBookFilePath) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public boolean hasModuleName(ModuleName moduleName) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public ReadOnlyModuleBook getModuleBook() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public void setModuleBook(ReadOnlyModuleBook moduleBook) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public void setModuleBookFilePath(Path moduleBookFilePath) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public void getPersonsInModule(ModuleName moduleName) throws CommandException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        public void updatePersonInModuleBook(Person ...persons) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public void updateModuleInMeetingBook(Module... modules) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 58,
      "jerrylchong": 17,
      "EkamSinghPandher": 64,
      "-": 194,
      "royleochan": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddMeetingCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddMeetingCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class AddMeetingCommandIntegrationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            getTypicalModuleBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void execute_newMeeting_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        Meeting validMeeting \u003d new MeetingBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getMeetingBook(), model.getModuleBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        expectedModel.addMeeting(validMeeting);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertCommandSuccess(new AddMeetingCommand(validMeeting), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                String.format(AddMeetingCommand.MESSAGE_SUCCESS, validMeeting), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void execute_duplicateMeeting_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        Meeting meetingInList \u003d model.getMeetingBook().getMeetingList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertCommandFailure(new AddMeetingCommand(meetingInList), model, AddMeetingCommand.MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 2,
      "nopenotj": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddMeetingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.CS2100_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.CS2101_MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.CS2104_MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2104;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class AddMeetingCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(), getTypicalModuleBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void constructor_nullParams_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                new AddMeetingCommand(null, null, null, null, null,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        null, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void execute_meetingAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting validMeeting \u003d new MeetingBuilder(CS2104_MEETING).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        CommandResult commandResult \u003d new AddMeetingCommand(validMeeting).execute(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertEquals(String.format(AddMeetingCommand.MESSAGE_SUCCESS, validMeeting), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_sameNameDifferentModule_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting meetingSameNameDifferentModule \u003d new MeetingBuilder(CS2104_MEETING)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withModule(CS2100_MEETING.getModule())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withMembers(CS2100_MEETING.getParticipants())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        CommandResult commandResult \u003d new AddMeetingCommand(meetingSameNameDifferentModule).execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertEquals(String.format(AddMeetingCommand.MESSAGE_SUCCESS, meetingSameNameDifferentModule),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_sameModuleDifferentName_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting meetingSameModuleDifferentName \u003d new MeetingBuilder(CS2104_MEETING)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withName(CS2100_MEETING.getMeetingName().toString())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        CommandResult commandResult \u003d new AddMeetingCommand(meetingSameModuleDifferentName).execute(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertEquals(String.format(AddMeetingCommand.MESSAGE_SUCCESS, meetingSameModuleDifferentName),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_sameTimeDifferentDate_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting meetingSameDateDifferentTime \u003d new MeetingBuilder(CS2104_MEETING)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withTime(\"10:00\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        CommandResult commandResult \u003d new AddMeetingCommand(meetingSameDateDifferentTime).execute(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertEquals(String.format(AddMeetingCommand.MESSAGE_SUCCESS, meetingSameDateDifferentTime),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_sameDateDifferentTime_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting meetingSameDateDifferentTime \u003d new MeetingBuilder(CS2104_MEETING)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withDate(\"2020-01-02\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        CommandResult commandResult \u003d new AddMeetingCommand(meetingSameDateDifferentTime).execute(model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertEquals(String.format(AddMeetingCommand.MESSAGE_SUCCESS, meetingSameDateDifferentTime),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_duplicateMeeting_throwsCommandException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting duplicateMeeting \u003d new MeetingBuilder(CS2100_MEETING).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        AddMeetingCommand addMeetingCommand \u003d new AddMeetingCommand(duplicateMeeting);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                AddMeetingCommand.MESSAGE_DUPLICATE_MEETING,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                duplicateMeeting.getModule().getModuleName(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                duplicateMeeting.getMeetingName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                addMeetingCommand.execute(model));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_duplicateMeetingDateAndTime_throwsCommandException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting meetingWithDuplicateDateTime \u003d new MeetingBuilder(CS2104_MEETING)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withDate(\"2020-02-02\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withTime(\"10:00\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        AddMeetingCommand addMeetingCommand \u003d new AddMeetingCommand(meetingWithDuplicateDateTime);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                AddMeetingCommand.MESSAGE_CONFLICTING_MEETING_TIMES,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2100_MEETING.getModule().getModuleName(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2100_MEETING.getMeetingName());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                addMeetingCommand.execute(model));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_personNotInModule_throwsCommandException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting meetingWithPersonNotInModule \u003d new MeetingBuilder(CS2104_MEETING)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withMembers(CS2100_MEETING.getParticipants())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        AddMeetingCommand addMeetingCommand \u003d new AddMeetingCommand(meetingWithPersonNotInModule);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                AddMeetingCommand.MESSAGE_NONEXISTENT_PERSON, BENSON.getName().toString(), CS2104.getModuleName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                addMeetingCommand.execute(model));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        AddMeetingCommand meetingCommand1 \u003d new AddMeetingCommand(CS2100_MEETING);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        AddMeetingCommand meetingCommand2 \u003d new AddMeetingCommand(CS2101_MEETING);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(meetingCommand2.equals(meetingCommand2));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        AddMeetingCommand meetingCommand1Copy \u003d new AddMeetingCommand(CS2100_MEETING);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(meetingCommand1.equals(meetingCommand1Copy));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(meetingCommand2.equals(1));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(meetingCommand2.equals(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(meetingCommand2.equals(meetingCommand1));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 99,
      "jerrylchong": 1,
      "EkamSinghPandher": 5,
      "nopenotj": 51,
      "royleochan": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2100;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2105;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class AddModuleCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(), getTypicalModuleBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void constructor_nullParams_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                new AddModuleCommand(null, null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module validModule \u003d new ModuleBuilder(CS2105).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        CommandResult commandResult \u003d new AddModuleCommand(validModule).execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertEquals(String.format(AddModuleCommand.MESSAGE_SUCCESS, validModule), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void execute_duplicateModule_addFailure() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module duplicateModule \u003d new ModuleBuilder(CS2100).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        AddModuleCommand command \u003d new AddModuleCommand(duplicateModule);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            String.format(AddModuleCommand.MESSAGE_DUPLICATE_MODULE, duplicateModule), () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void execute_personNotInAddressbook_addFailure() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Set\u003cPerson\u003e classmates \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        classmates.add(HOON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module invalidModule \u003d new Module(new ModuleName(\"CS2105\"), classmates);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        AddModuleCommand command \u003d new AddModuleCommand(invalidModule);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            String.format(AddModuleCommand.MESSAGE_NONEXISTENT_PERSON, HOON.getName()), () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Set\u003cPerson\u003e dummyMembers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        dummyMembers.add(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        dummyMembers.add(bob);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module cs2103 \u003d new ModuleBuilder().withName(\"CS2103\").withMembers(dummyMembers).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module cs3234 \u003d new ModuleBuilder().withName(\"CS3234\").withMembers(dummyMembers).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        AddModuleCommand moduleCommand1 \u003d new AddModuleCommand(cs2103);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        AddModuleCommand moduleCommand2 \u003d new AddModuleCommand(cs3234);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(moduleCommand1.equals(moduleCommand1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        AddModuleCommand moduleCommand1Copy \u003d new AddModuleCommand(cs2103);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(moduleCommand1.equals(moduleCommand1Copy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(moduleCommand1.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(moduleCommand1.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(moduleCommand1.equals(moduleCommand2));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LABEL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LABEL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand.TagPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.testutil.TagPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * AddTagCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class AddTagCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(), getTypicalModuleBook(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person taggedPerson \u003d new PersonBuilder(personInFilteredList).withTags(\"professor\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        AddTagCommand tagCommand \u003d new AddTagCommand(taggedPerson.getName(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new TagPersonDescriptorBuilder(taggedPerson).build());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e(personInFilteredList.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        updatedTags.add(new Tag(\"professor\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person finalPerson \u003d new Person(taggedPerson.getName(), taggedPerson.getPhone(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                taggedPerson.getEmail(), updatedTags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_EDIT_PERSON_SUCCESS, finalPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                                                new MeetingBook(model.getMeetingBook()),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                                                new ModuleBook(model.getModuleBook()),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                                                new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedModel.setPerson(personInFilteredList, finalPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedModel.updatePersonInMeetingBook(personInFilteredList, finalPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedModel.updatePersonInModuleBook(personInFilteredList, finalPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute_invalidPersonNameUnfilteredList_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        TagPersonDescriptor descriptor \u003d new TagPersonDescriptorBuilder().build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        AddTagCommand tagCommand \u003d new AddTagCommand(new Name(\"Fake\"), descriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person firstPerson \u003d model.getAddressBook().getPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person secondPerson \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        final AddTagCommand standardCommand \u003d new AddTagCommand(firstPerson.getName(), LABEL_DESC_AMY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        TagPersonDescriptor copyDescriptor \u003d new TagPersonDescriptor(LABEL_DESC_AMY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        AddTagCommand commandWithSameValues \u003d new AddTagCommand(firstPerson.getName(), copyDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(standardCommand.equals(new AddTagCommand(secondPerson.getName(), LABEL_DESC_AMY)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(standardCommand.equals(new AddTagCommand(secondPerson.getName(), LABEL_DESC_BOB)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        //@@author jerrylchong"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(), getTypicalModuleBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            getTypicalModuleBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedModel.setMeetingBook(new MeetingBook());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedModel.setModuleBook(new ModuleBook());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "EkamSinghPandher": 1,
      "jerrylchong": 15,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ClearTagCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(), getTypicalModuleBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute_personWithTags_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person clearedPerson \u003d new PersonBuilder(personInFilteredList).withTags().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ClearTagCommand tagCommand \u003d new ClearTagCommand(personInFilteredList.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String expectedMessage \u003d String.format(\"All tags of person \u0027%s\u0027 have been cleared!\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                clearedPerson.getName().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new MeetingBook(model.getMeetingBook()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new ModuleBook(model.getModuleBook()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedModel.setPerson(personInFilteredList, clearedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute_personWithoutTags_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person clearedPerson \u003d new PersonBuilder(personInFilteredList).withTags().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ClearTagCommand tagCommand \u003d new ClearTagCommand(personInFilteredList.getName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String expectedMessage \u003d String.format(\"All tags of person \u0027%s\u0027 have been cleared!\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                clearedPerson.getName().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new MeetingBook(model.getMeetingBook()),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new ModuleBook(model.getModuleBook()),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedModel.setPerson(personInFilteredList, clearedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute_invalidName_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ClearTagCommand tagCommand \u003d new ClearTagCommand(new Name(\"Fake\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                false, false, false)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                false, false, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                false, false, false)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                false, false, false).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                false, false, false).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 5,
      "-": 49,
      "royleochan": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.testutil.EditMeetingDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.testutil.TagPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String VALID_PARTICIPANT_AMY \u003d VALID_NAME_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String VALID_PARTICIPANT_BOB \u003d VALID_NAME_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String PARTICIPANT_DESC_AMY \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            \" \" + PREFIX_PARTICIPANT + VALID_PARTICIPANT_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String PARTICIPANT_DESC_BOB \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            \" \" + PREFIX_PARTICIPANT + VALID_PARTICIPANT_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String VALID_MODULE_NAME_CS1000 \u003d \"CS1000\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String VALID_MODULE_NAME_CS1001 \u003d \"CS1001\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MODULE_DESC_CS1000 \u003d \" \" + PREFIX_MODULE + VALID_MODULE_NAME_CS1000;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String MODULE_DESC_CS1001 \u003d \" \" + PREFIX_MODULE + VALID_MODULE_NAME_CS1001;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String ADD_MODULE_DESC_CS1000 \u003d \" \" + PREFIX_NAME + VALID_MODULE_NAME_CS1000;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String ADD_MODULE_DESC_CS1001 \u003d \" \" + PREFIX_NAME + VALID_MODULE_NAME_CS1001;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String VALID_MEETING_NAME \u003d \"New Meeting Name\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String VALID_DATE \u003d \"2021-01-12\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String VALID_TIME \u003d \"18:00\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String VALID_MODULE_NAME_CM1111_MEETING \u003d \"CM1111\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String VALID_MODULE_NAME_CM1112_MEETING \u003d \"CM1112\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String VALID_MEETING_NAME_CM1111_MEETING \u003d \"CM1111 Meeting\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String VALID_MEETING_NAME_CM1112_MEETING \u003d \"CM1112 Meeting\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String VALID_DATE_CM1111_MEETING \u003d \"2021-10-10\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String VALID_DATE_CM1112_MEETING \u003d \"2022-04-07\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String VALID_TIME_CM1111_MEETING \u003d \"10:00\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String VALID_TIME_CM1112_MEETING \u003d \"11:00\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MODULE_DESC_CM1111_MEETING \u003d \" \" + PREFIX_MODULE + VALID_MODULE_NAME_CM1111_MEETING;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MODULE_DESC_CM1112_MEETING \u003d \" \" + PREFIX_MODULE + VALID_MODULE_NAME_CM1112_MEETING;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MEETING_NAME_DESC_CM1111_MEETING \u003d \" \" + PREFIX_NAME + VALID_MEETING_NAME_CM1111_MEETING;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String MEETING_NAME_DESC_CM1112_MEETING \u003d \" \" + PREFIX_NAME + VALID_MEETING_NAME_CM1112_MEETING;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String DATE_DESC_CM1111_MEETING \u003d \" \" + PREFIX_DATE + VALID_DATE_CM1111_MEETING;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String DATE_DESC_CM1112_MEETING \u003d \" \" + PREFIX_DATE + VALID_DATE_CM1112_MEETING;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String TIME_DESC_CM1111_MEETING \u003d \" \" + PREFIX_TIME + VALID_TIME_CM1111_MEETING;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String TIME_DESC_CM1112_MEETING \u003d \" \" + PREFIX_TIME + VALID_TIME_CM1112_MEETING;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String INVALID_MODULE_NAME \u003d \" \" + PREFIX_MODULE + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in module names"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String INVALID_MEETING_NAME \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in meeting names"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2020/01/12\"; // \u0027/\u0027 not allowed in dates"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String INVALID_TIME_DESC \u003d \" \" + PREFIX_TIME + \"1000\"; // missing \u0027:\u0027 symbol"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String INVALID_PARTICIPANT_DESC \u003d \" \" + PREFIX_PARTICIPANT + \"a*\"; // \u0027*\u0027 not allowed in names"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final EditModuleCommand.EditModuleDescriptor DESC_CS1000;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final EditModuleCommand.EditModuleDescriptor DESC_CS1001;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final EditMeetingCommand.EditMeetingDescriptor DESC_CM1111;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final EditMeetingCommand.EditMeetingDescriptor DESC_CM1112;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        DESC_CS1000 \u003d new EditModuleDescriptorBuilder().withModuleName(VALID_MODULE_NAME_CS1000)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .withMembers(VALID_PARTICIPANT_AMY).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        DESC_CS1001 \u003d new EditModuleDescriptorBuilder().withModuleName(VALID_MODULE_NAME_CS1001)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .withMembers(VALID_PARTICIPANT_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        DESC_CM1111 \u003d new EditMeetingDescriptorBuilder().withMeetingName(VALID_MEETING_NAME_CM1111_MEETING)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withDate(VALID_DATE_CM1111_MEETING).withTime(VALID_TIME_CM1111_MEETING)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withMembers(VALID_PARTICIPANT_AMY).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        DESC_CM1112 \u003d new EditMeetingDescriptorBuilder().withMeetingName(VALID_MEETING_NAME_CM1112_MEETING)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withDate(VALID_DATE_CM1112_MEETING).withTime(VALID_TIME_CM1112_MEETING)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withMembers(VALID_PARTICIPANT_BOB).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final AddTagCommand.TagPersonDescriptor LABEL_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final AddTagCommand.TagPersonDescriptor LABEL_DESC_BOB;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        LABEL_DESC_AMY \u003d new TagPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        LABEL_DESC_BOB \u003d new TagPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 45,
      "EkamSinghPandher": 28,
      "jerrylchong": 9,
      "-": 123,
      "royleochan": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DarkThemeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.commands.DarkThemeCommand.SUCCESS_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class DarkThemeCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute_dark_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SUCCESS_MESSAGE, false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertCommandSuccess(new DarkThemeCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBookWithMember;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.FullNameMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Contains integration tests (interaction with the Model, Meetings, UndoCommand, RedoCommand,) and unit tests for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(), getTypicalModuleBook(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Model modelWithMembersInMeetings \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            getTypicalMeetingBookWithMember(), getTypicalModuleBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute_validNameUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cString\u003e nameOne \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        nameOne.add(personToDelete.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new FullNameMatchesKeywordPredicate(nameOne), new ArrayList\u003c\u003e()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                personToDelete.getName().toString(), false, false, true, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getMeetingBook(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            model.getModuleBook(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute_validNameAndNameInOneMeeting_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Person personToDelete \u003d ALICE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cString\u003e nameOne \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        nameOne.add(personToDelete.getName().fullName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new FullNameMatchesKeywordPredicate(nameOne), new ArrayList\u003c\u003e()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                personToDelete.getName().toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                getTypicalMeetingBookWithMember(), getTypicalModuleBook(), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedModel.updatePersonInModuleBook(personToDelete);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedModel.updatePersonInMeetingBook(personToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelWithMembersInMeetings, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute_deleteContactInSelectedMeeting_updatesSelectedMeeting() throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Meeting selectedMeeting \u003d model.getSelectedMeeting();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ArrayList\u003cString\u003e name \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        name.add(selectedMeeting.getParticipants().stream().collect(Collectors.toList()).get(0).getName().toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        new DeleteCommand(new FullNameMatchesKeywordPredicate(name), new ArrayList\u003c\u003e()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ).execute(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertNull(model.getSelectedMeeting());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cString\u003e nameOne \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        nameOne.add(ALICE.getName().fullName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cString\u003e nameTwo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        nameTwo.add(BOB.getName().fullName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new FullNameMatchesKeywordPredicate(nameOne), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new FullNameMatchesKeywordPredicate(nameTwo), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new FullNameMatchesKeywordPredicate(nameOne), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 2,
      "EkamSinghPandher": 5,
      "jerrylchong": 30,
      "-": 69,
      "royleochan": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteMeetingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.CS2100_MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.CS2101_MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.CS2102_MEETING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2105;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class DeleteMeetingCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(), getTypicalModuleBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_validMeetingUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting deletedMeeting \u003d new MeetingBuilder(CS2100_MEETING).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        DeleteMeetingCommand deleteMeetingCommand \u003d new DeleteMeetingCommand("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2100_MEETING.getModule().getModuleName(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2100_MEETING.getMeetingName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteMeetingCommand.MESSAGE_DELETE_MEETING_SUCCESS, deletedMeeting);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new MeetingBook(model.getMeetingBook()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new ModuleBook(model.getModuleBook()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        expectedModel.deleteMeeting(model.getFilteredMeetingList().get(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertCommandSuccess(deleteMeetingCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_meetingWithNonExistentModule_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting meetingWithNonExistentModule \u003d new MeetingBuilder(CS2100_MEETING)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withModule(CS2105)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        DeleteMeetingCommand deleteMeetingCommand \u003d new DeleteMeetingCommand(meetingWithNonExistentModule);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                Messages.MESSAGE_INVALID_MODULE_DISPLAYED,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                meetingWithNonExistentModule.getModule().getModuleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                deleteMeetingCommand.execute(model));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_nonExistentMeeting_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting meetingWithNonExistentModule \u003d new MeetingBuilder(CS2100_MEETING)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withName(CS2102_MEETING.getMeetingName().toString())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        DeleteMeetingCommand deleteMeetingCommand \u003d new DeleteMeetingCommand(meetingWithNonExistentModule);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_MEETING_DISPLAYED;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                deleteMeetingCommand.execute(model));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute_deleteSelectedMeeting_updatesSelectedMeeting() throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Meeting selectedMeeting \u003d model.getSelectedMeeting();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        new DeleteMeetingCommand(selectedMeeting.getModule().getModuleName(), selectedMeeting.getMeetingName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .execute(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertNull(model.getSelectedMeeting());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        DeleteMeetingCommand meetingCommand1 \u003d new DeleteMeetingCommand(CS2100_MEETING);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        DeleteMeetingCommand meetingCommand2 \u003d new DeleteMeetingCommand(CS2101_MEETING);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(meetingCommand2.equals(meetingCommand2));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        DeleteMeetingCommand meetingCommand1Copy \u003d new DeleteMeetingCommand(CS2100_MEETING);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(meetingCommand1.equals(meetingCommand1Copy));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(meetingCommand2.equals(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(meetingCommand2.equals(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(meetingCommand2.equals(meetingCommand1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 96,
      "royleochan": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "//@@author EkamSinghPandher"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2100;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2101;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class DeleteModuleCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(), getTypicalModuleBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void execute_validModuleUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module deletedModule \u003d new ModuleBuilder(CS2100).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                CS2100.getModuleName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteModuleCommand.MESSAGE_DELETE_MODULE_SUCCESS, deletedModule);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                new MeetingBook(model.getMeetingBook()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                new ModuleBook(model.getModuleBook()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        expectedModel.deleteModule(model.getFilteredModuleList().get(0));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertCommandSuccess(deleteModuleCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void execute_nonExistentModule() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module nonExistantModule \u003d new ModuleBuilder(CS2100)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .withName(\"NONEXISTANT\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand(nonExistantModule.getModuleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_MODULE_DISPLAYED;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                deleteModuleCommand.execute(model));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void execute_deleteModuleInSelectedMeeting_updatesSelectedMeeting() throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Meeting selectedMeeting \u003d model.getSelectedMeeting();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        new DeleteModuleCommand(selectedMeeting.getModule().getModuleName()).execute(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertNull(model.getSelectedMeeting());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        DeleteModuleCommand moduleCommand1 \u003d new DeleteModuleCommand(CS2100.getModuleName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        DeleteModuleCommand moduleCommand2 \u003d new DeleteModuleCommand(CS2101.getModuleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(moduleCommand2.equals(moduleCommand2));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        DeleteModuleCommand moduleCommand1Copy \u003d new DeleteModuleCommand(CS2100.getModuleName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(moduleCommand1.equals(moduleCommand1Copy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(moduleCommand2.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(moduleCommand2.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(moduleCommand2.equals(moduleCommand1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBookWithMember;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DeleteTagCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(), getTypicalModuleBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Model modelWithMembersInMeetings \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            getTypicalMeetingBookWithMember(), getTypicalModuleBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(firstPerson.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Set\u003cTag\u003e tagsToDelete \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tagsToDelete.add(tags.iterator().next());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tags.removeAll(tagsToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person taggedPerson \u003d new Person(firstPerson.getName(), firstPerson.getPhone(), firstPerson.getEmail(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        DeleteTagCommand tagCommand \u003d new DeleteTagCommand(firstPerson.getName(), tagsToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTagCommand.MESSAGE_DELETE_PERSON_SUCCESS, taggedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new MeetingBook(model.getMeetingBook()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new ModuleBook(model.getModuleBook()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedModel.setPerson(firstPerson, taggedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute_nonExistentTag_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Set\u003cTag\u003e tagsToDelete \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tagsToDelete.add(new Tag(\"fake\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        DeleteTagCommand tagCommand \u003d new DeleteTagCommand(firstPerson.getName(), tagsToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // one non-existent tag"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertCommandFailure(tagCommand, model, String.format(\"The person \u0027%s\u0027 does not have all the tags provided.\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                firstPerson.getName().toString()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(firstPerson.getTags());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tagsToDelete.add(tags.iterator().next());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tagCommand \u003d new DeleteTagCommand(firstPerson.getName(), tagsToDelete);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // one existent tag and one non-existent tag"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertCommandFailure(tagCommand, model, String.format(\"The person \u0027%s\u0027 does not have all the tags provided.\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                firstPerson.getName().toString()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute_invalidPersonNameUnfilteredList_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tags.add(new Tag(\"Tag\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        DeleteTagCommand tagCommand \u003d new DeleteTagCommand(new Name(\"Fake\"), tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBookWithEditedMember;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBookWithMember;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getEditedTypicalAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Contains integration tests (interaction with the Model, Meeting, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * EditCommand."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(), getTypicalModuleBook(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Model modelWithMembersInMeetings \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            getTypicalMeetingBookWithMember(), getTypicalModuleBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(ALICE.getName(), descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                                new MeetingBook(model.getMeetingBook()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                                                new ModuleBook(model.getModuleBook()),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                                new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(GEORGE.getName(), descriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                                new MeetingBook(model.getMeetingBook()),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                                                new ModuleBook(model.getModuleBook()),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                                new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(ALICE.getName(), new EditPersonDescriptor());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                                new MeetingBook(model.getMeetingBook()),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                                                new ModuleBook(model.getModuleBook()),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                                new UserPrefs());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(ALICE.getName(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                                new MeetingBook(model.getMeetingBook()),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                                                new ModuleBook(model.getModuleBook()),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                                new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(BENSON.getName(), descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(ALICE.getName(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute_invalidPersonNameUnfilteredList_failure() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(new Name(\"test\"), descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute_invalidPersonNameFilteredList_failure() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(new Name(\"test\"),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute_validNameAndNameInOneMeeting_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(ALICE).withName(\"Alicia\").build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(ALICE).withName(\"Alicia\").build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(ALICE.getName(), descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getEditedTypicalAddressBook(), getTypicalMeetingBookWithEditedMember(),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                getTypicalModuleBook(), new UserPrefs());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertCommandSuccess(editCommand, modelWithMembersInMeetings, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute_editContactInSelectedMeeting_updatesSelectedMeeting() throws CommandException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Meeting selectedMeeting \u003d model.getSelectedMeeting();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Person personToEdit \u003d selectedMeeting.getParticipants().stream().collect(Collectors.toList()).get(0);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personToEdit).withName(\"Blah\").build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(personToEdit).withName(\"Blah\").build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        new EditCommand(personToEdit.getName(), descriptor).execute(model);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        HashSet\u003cPerson\u003e members \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        members.add(editedPerson);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Meeting expectedMeeting \u003d new MeetingBuilder(selectedMeeting).withMembers(members).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertEquals(model.getSelectedMeeting(), expectedMeeting);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(AMY.getName(), DESC_AMY);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(AMY.getName(), copyDescriptor);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(BOB.getName(), DESC_AMY)));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(AMY.getName(), DESC_BOB)));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 13,
      "jerrylchong": 3,
      "EkamSinghPandher": 9,
      "-": 153,
      "royleochan": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditMeetingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEETING_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.CS2100_MEETING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.CS2102_MEETING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.CS2102_MEETING_DUPLICATE_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBookWithDuplicateName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2100;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2102;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.testutil.EditMeetingDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class EditMeetingCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(), getTypicalModuleBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Model modelWithDuplicatedMeetingName \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            getTypicalMeetingBookWithDuplicateName(), getTypicalModuleBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void constructor_nullParams_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new EditMeetingCommand(null, null, null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting editedMeeting \u003d new MeetingBuilder(CS2100_MEETING)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withName(VALID_MEETING_NAME)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withDate(VALID_DATE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withTime(VALID_TIME)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withMembers(CS2100.getClassmates())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand.EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder(editedMeeting).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand editMeetingCommand \u003d new EditMeetingCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2100_MEETING.getModule().getModuleName(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2100_MEETING.getMeetingName(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String expectedMessage \u003d String.format(EditMeetingCommand.MESSAGE_EDIT_MEETING_SUCCESS, editedMeeting);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new MeetingBook(model.getMeetingBook()),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new ModuleBook(model.getModuleBook()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        expectedModel.setMeeting(model.getFilteredMeetingList().get(0), editedMeeting);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertCommandSuccess(editMeetingCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Index indexLastMeeting \u003d Index.fromOneBased(model.getFilteredMeetingList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting lastMeeting \u003d model.getFilteredMeetingList().get(indexLastMeeting.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingBuilder meetingInList \u003d new MeetingBuilder(lastMeeting);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting editedMeeting \u003d meetingInList.withName(VALID_MEETING_NAME).withDate(VALID_DATE).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand.EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withMeetingName(VALID_MEETING_NAME)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withDate(VALID_DATE).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand editMeetingCommand \u003d new EditMeetingCommand("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2102_MEETING.getModule().getModuleName(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2102_MEETING.getMeetingName(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String expectedMessage \u003d String.format(EditMeetingCommand.MESSAGE_EDIT_MEETING_SUCCESS, editedMeeting);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new MeetingBook(model.getMeetingBook()),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new ModuleBook(model.getModuleBook()),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        expectedModel.setMeeting(lastMeeting, editedMeeting);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertCommandSuccess(editMeetingCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand editMeetingCommand \u003d new EditMeetingCommand("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2100_MEETING.getModule().getModuleName(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2100_MEETING.getMeetingName(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new EditMeetingCommand.EditMeetingDescriptor());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting editedMeeting \u003d new MeetingBuilder(CS2100_MEETING).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String expectedMessage \u003d String.format(EditMeetingCommand.MESSAGE_EDIT_MEETING_SUCCESS, editedMeeting);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new MeetingBook(model.getMeetingBook()),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new ModuleBook(model.getModuleBook()),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertCommandSuccess(editMeetingCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_duplicateMeetingUnfilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting editedMeeting \u003d CS2102_MEETING_DUPLICATE_NAME;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand.EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder(editedMeeting).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand editMeetingCommand \u003d new EditMeetingCommand("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2102_MEETING.getModule().getModuleName(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2102_MEETING.getMeetingName(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String expectedMessage \u003d String.format(EditMeetingCommand.MESSAGE_DUPLICATE_MEETING,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2102_MEETING.getModule().getModuleName(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2102_MEETING.getMeetingName());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertCommandFailure(editMeetingCommand, modelWithDuplicatedMeetingName, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_duplicateMeetingDateAndTime_throwsCommandException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting editedMeeting \u003d new MeetingBuilder(CS2102_MEETING)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withDate(\"2020-02-02\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withTime(\"10:00\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand.EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder(editedMeeting).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand editMeetingCommand \u003d new EditMeetingCommand("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2102_MEETING.getModule().getModuleName(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2102_MEETING.getMeetingName(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String expectedMessage \u003d String.format(EditMeetingCommand.MESSAGE_CONFLICTING_MEETING_TIMES,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2100_MEETING.getModule().getModuleName(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2100_MEETING.getMeetingName());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertCommandFailure(editMeetingCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void execute_personNotInModule_throwsCommandException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand.EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder(CS2102_MEETING)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withMembers("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        CS2100_MEETING.getParticipants()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                .stream()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                .map(person -\u003e person.getName())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                .map(name -\u003e name.fullName)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                                .toArray(String[]::new))"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand editMeetingCommand \u003d new EditMeetingCommand("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2102_MEETING.getModule().getModuleName(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                CS2102_MEETING.getMeetingName(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                EditMeetingCommand.MESSAGE_NONEXISTENT_PERSON, BENSON.getName().toString(), CS2102.getModuleName());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertCommandFailure(editMeetingCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute_editSelectedMeeting_updatesSelectedMeeting() throws CommandException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Meeting selectedMeeting \u003d model.getSelectedMeeting();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditMeetingCommand.EditMeetingDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                new EditMeetingDescriptorBuilder(selectedMeeting).withMeetingName(\"Blah\").withDate(VALID_DATE).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        new EditMeetingCommand(selectedMeeting.getModule().getModuleName(), selectedMeeting.getMeetingName(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                descriptor).execute(model);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Meeting expectedMeeting \u003d new MeetingBuilder(selectedMeeting).withName(\"Blah\").withDate(VALID_DATE).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertEquals(model.getSelectedMeeting(), expectedMeeting);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 167,
      "royleochan": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditMeetingDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CM1111;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CM1112;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_CM1112_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEETING_NAME_CM1112_MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPANT_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_CM1112_MEETING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.testutil.EditMeetingDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class EditMeetingDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand.EditMeetingDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new EditMeetingCommand.EditMeetingDescriptor(DESC_CM1111);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(DESC_CM1111.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(DESC_CM1111.equals(DESC_CM1111));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(DESC_CM1111.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(DESC_CM1111.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(DESC_CM1111.equals(DESC_CM1112));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand.EditMeetingDescriptor editedCS2111 \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new EditMeetingDescriptorBuilder(DESC_CM1111)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        .withMeetingName(VALID_MEETING_NAME_CM1112_MEETING).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(DESC_CM1111.equals(editedCS2111));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        editedCS2111 \u003d new EditMeetingDescriptorBuilder(DESC_CM1111).withDate(VALID_DATE_CM1112_MEETING).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(DESC_CM1111.equals(editedCS2111));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        editedCS2111 \u003d new EditMeetingDescriptorBuilder(DESC_CM1111).withTime(VALID_TIME_CM1112_MEETING).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(DESC_CM1111.equals(editedCS2111));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        editedCS2111 \u003d new EditMeetingDescriptorBuilder(DESC_CM1111).withMembers(VALID_PARTICIPANT_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(DESC_CM1111.equals(editedCS2111));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class EditModuleCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(), getTypicalModuleBook(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void constructor_nullParams_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                new EditModuleCommand(null, null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute_editModuleInSelectedMeeting_updatesSelectedMeeting() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Meeting selectedMeeting \u003d model.getSelectedMeeting();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Module selectedModule \u003d selectedMeeting.getModule();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditModuleCommand.EditModuleDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                new EditModuleDescriptorBuilder(selectedMeeting.getModule()).withModuleName(\"Blah\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        new EditModuleCommand(selectedMeeting.getModule().getModuleName(), descriptor).execute(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(selectedModule).withName(\"Blah\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Meeting expectedMeeting \u003d new MeetingBuilder(selectedMeeting).withModule(expectedModule).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertEquals(model.getSelectedMeeting(), expectedMeeting);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 23,
      "royleochan": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditModuleDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS1000;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS1001;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1001;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class EditModuleDescriptorTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        EditModuleCommand.EditModuleDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                new EditModuleCommand.EditModuleDescriptor(DESC_CS1000);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(DESC_CS1000.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(DESC_CS1000.equals(DESC_CS1000));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(DESC_CS1000.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(DESC_CS1000.equals(5));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(DESC_CS1000.equals(DESC_CS1001));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        EditModuleCommand.EditModuleDescriptor editedCS1000 \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                new EditModuleDescriptorBuilder(DESC_CS1000)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                        .withModuleName(VALID_MODULE_NAME_CS1001).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(DESC_CS1000.equals(editedCS1000));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "-": 19,
      "royleochan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonHasTagsAndNamePredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(), getTypicalModuleBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        getTypicalModuleBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cTag\u003e tags \u003d Arrays.asList(new Tag(\"tag\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsAndNamePredicate thirdPredicate \u003d new PersonHasTagsAndNamePredicate(keywords, tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FindCommand findThirdCommand \u003d new FindCommand(thirdPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(findThirdCommand.equals(findThirdCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FindCommand findThirdCommandCopy \u003d new FindCommand(thirdPredicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(findThirdCommand.equals(findThirdCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(findFirstCommand.equals(findThirdCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "-": 19,
      "royleochan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LightThemeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.commands.LightThemeCommand.SUCCESS_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class LightThemeCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute_light_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SUCCESS_MESSAGE, true,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertCommandSuccess(new LightThemeCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalMeetingBook(), getTypicalModuleBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalMeetingBook(), getTypicalModuleBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "EkamSinghPandher": 5,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewMeetingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "//@@author royleochan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.ReadOnlyModuleBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class ViewMeetingCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void constructor_nullArguments_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Set\u003cPerson\u003e expectedMembers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        expectedMembers.add(BOB);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        expectedMembers.add(ALICE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder().withName(\"CS2103\").withMembers(expectedMembers).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Meeting expectedMeeting \u003d new MeetingBuilder().withName(\"CS2103 Meeting\").withModule(expectedModule)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .withDate(\"2020-10-03\").withTime(\"10:00\").withMembers(expectedMembers).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // both null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ViewMeetingCommand(null,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // meeting name null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ViewMeetingCommand(expectedModule.getModuleName(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // module name null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ViewMeetingCommand(null,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                expectedMeeting.getMeetingName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute_meetingAcceptedByModel_viewSuccessful() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ViewMeetingCommandTest.ModelStubAcceptingMeetingToView modelStub \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                new ViewMeetingCommandTest.ModelStubAcceptingMeetingToView();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().withName(\"CS2103\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Meeting validMeeting \u003d new MeetingBuilder().withName(\"CS2103 Meeting\").withModule(validModule)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .withDate(\"2020-10-03\").withTime(\"10:00\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                new ViewMeetingCommand(validModule.getModuleName(), validMeeting.getMeetingName()).execute(modelStub);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertEquals(String.format(ViewMeetingCommand.MESSAGE_VIEW_MEETING_SUCCESS, validMeeting),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertEquals(validMeeting, modelStub.selectedMeeting);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Set\u003cPerson\u003e expectedMembers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        expectedMembers.add(BOB);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        expectedMembers.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder().withName(\"CS2103\").withMembers(expectedMembers).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Meeting meetingOne \u003d new MeetingBuilder().withName(\"CS2103 Meeting\").withModule(expectedModule)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .withDate(\"2020-10-03\").withTime(\"10:00\").withMembers(expectedMembers).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Meeting meetingTwo \u003d new MeetingBuilder().withName(\"MA1521 Meeting\").withModule(expectedModule)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .withDate(\"2020-11-12\").withTime(\"12:00\").withMembers(expectedMembers).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ViewMeetingCommand viewMeetingOneCommand \u003d new ViewMeetingCommand(expectedModule.getModuleName(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                meetingOne.getMeetingName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ViewMeetingCommand viewMeetingTwoCommand \u003d new ViewMeetingCommand(expectedModule.getModuleName(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                meetingTwo.getMeetingName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(viewMeetingOneCommand.equals(viewMeetingOneCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ViewMeetingCommand viewMeetingOneCopy \u003d new ViewMeetingCommand(new ModuleName(\"CS2103\"), new MeetingName("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \"CS2103 Meeting\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(viewMeetingOneCopy.equals(viewMeetingOneCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertFalse(viewMeetingOneCommand.equals(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertFalse(viewMeetingOneCommand.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertFalse(viewMeetingOneCommand.equals(viewMeetingTwoCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public boolean hasPersonName(Name name) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public ObservableList\u003cPerson\u003e getUpdatedFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public ObservableList\u003cPerson\u003e getUpdatedFilteredPersonList(Predicate\u003cPerson\u003e predicate,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                                                                   List\u003cModuleName\u003e modules) throws CommandException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setMeetingBook(ReadOnlyMeetingBook newData) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public ReadOnlyMeetingBook getMeetingBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public Meeting getSelectedMeeting() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setSelectedMeeting(Meeting target) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void updatePersonInMeetingBook(Person ...persons) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public boolean hasMeetingName(MeetingName meetingName) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void deleteMeeting(Meeting targetMeeting) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setMeetingBookFilePath(Path meetingBookFilePath) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public boolean hasModuleName(ModuleName moduleName) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public ReadOnlyModuleBook getModuleBook() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setModuleBook(ReadOnlyModuleBook moduleBook) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setModuleBookFilePath(Path moduleBookFilePath) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void getPersonsInModule(ModuleName moduleName) throws CommandException {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void updatePersonInModuleBook(Person ...persons) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void updateModuleInMeetingBook(Module... modules) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * A Model stub that always accept the meeting being viewed."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private class ModelStubAcceptingMeetingToView extends ViewMeetingCommandTest.ModelStub {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        private Module module \u003d new ModuleBuilder().withName(\"CS2103\").build();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        private Meeting selectedMeeting \u003d new MeetingBuilder().withName(\"CS2103 Meeting\").withModule(module)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .withDate(\"2020-10-03\").withTime(\"10:00\").build();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public boolean hasModuleName(ModuleName moduleName) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            requireNonNull(moduleName);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return moduleName.equals(module.getModuleName());"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            internalList.add(module);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return internalList;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            ObservableList\u003cMeeting\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            internalList.add(selectedMeeting);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return internalList;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return meeting.isSameMeeting(selectedMeeting);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        public void setSelectedMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            selectedMeeting \u003d meeting;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 379
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PREFIX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                 + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + TAG_DESC_FRIEND, String.format(MESSAGE_DUPLICATE_PREFIX, \"n/\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "               + TAG_DESC_FRIEND, String.format(MESSAGE_DUPLICATE_PREFIX, \"p/\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "               + TAG_DESC_FRIEND, String.format(MESSAGE_DUPLICATE_PREFIX, \"e/\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB ,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        + TAG_DESC_FRIEND, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 7,
      "-": 98,
      "royleochan": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddMeetingCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PREFIX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_CM1111_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_CM1112_MEETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MEETING_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODULE_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PARTICIPANT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEETING_NAME_DESC_CM1111_MEETING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEETING_NAME_DESC_CM1112_MEETING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_DESC_CM1111_MEETING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_DESC_CM1112_MEETING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARTICIPANT_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARTICIPANT_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIME_DESC_CM1111_MEETING;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIME_DESC_CM1112_MEETING;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_CM1111_MEETING;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEETING_NAME_CM1111_MEETING;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CM1111_MEETING;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.CM1111_MEETING;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.AddMeetingCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Time;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class AddMeetingCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private AddMeetingCommandParser parser \u003d new AddMeetingCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting expectedMeeting \u003d new MeetingBuilder(CM1111_MEETING).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + MODULE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + DATE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + TIME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + PARTICIPANT_DESC_AMY, new AddMeetingCommand(expectedMeeting));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // multiple participants - all accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting expectedMeetingMultipleParticipants \u003d new MeetingBuilder(CM1111_MEETING)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withMembers(new HashSet\u003c\u003e(Arrays.asList(AMY, BOB)))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseSuccess(parser, MODULE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + DATE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + TIME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + PARTICIPANT_DESC_AMY"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + PARTICIPANT_DESC_BOB, new AddMeetingCommand(expectedMeetingMultipleParticipants));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMeetingCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // missing module prefix"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + DATE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + TIME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + PARTICIPANT_DESC_AMY,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, MODULE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + DATE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + TIME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + PARTICIPANT_DESC_AMY,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, MODULE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + TIME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + PARTICIPANT_DESC_AMY,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // missing time prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, MODULE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + DATE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + PARTICIPANT_DESC_AMY,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // missing participant prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, MODULE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + DATE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + TIME_DESC_CM1111_MEETING,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, VALID_MODULE_NAME_CM1111_MEETING"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + VALID_MEETING_NAME_CM1111_MEETING"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + VALID_DATE_CM1111_MEETING,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // multiple modules"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, MODULE_DESC_CM1112_MEETING"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + MODULE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + DATE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + TIME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + PARTICIPANT_DESC_AMY, String.format(MESSAGE_DUPLICATE_PREFIX, \"m/\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // multiple meeting names"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, MODULE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + MEETING_NAME_DESC_CM1112_MEETING"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + DATE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + TIME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + PARTICIPANT_DESC_AMY, String.format(MESSAGE_DUPLICATE_PREFIX, \"n/\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // multiple dates"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, MODULE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + DATE_DESC_CM1112_MEETING"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + DATE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + TIME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + PARTICIPANT_DESC_AMY, String.format(MESSAGE_DUPLICATE_PREFIX, \"d/\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // multiple times"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, MODULE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + DATE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + TIME_DESC_CM1112_MEETING"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + TIME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + PARTICIPANT_DESC_AMY, String.format(MESSAGE_DUPLICATE_PREFIX, \"t/\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // invalid module"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_NAME"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + DATE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + TIME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + PARTICIPANT_DESC_AMY, ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // invalid meeting name"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, MODULE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + INVALID_MEETING_NAME"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + DATE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + TIME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + PARTICIPANT_DESC_AMY, MeetingName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, MODULE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + TIME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + PARTICIPANT_DESC_AMY, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, MODULE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + DATE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + INVALID_TIME_DESC"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + PARTICIPANT_DESC_AMY, Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // invalid participant"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, MODULE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + DATE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + TIME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + INVALID_PARTICIPANT_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_NAME"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + TIME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + PARTICIPANT_DESC_AMY,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                PREAMBLE_NON_EMPTY"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + MODULE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + MEETING_NAME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + DATE_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + TIME_DESC_CM1111_MEETING"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        + PARTICIPANT_DESC_AMY,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 173,
      "EkamSinghPandher": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PREFIX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADD_MODULE_DESC_CS1000;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADD_MODULE_DESC_CS1001;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARTICIPANT_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARTICIPANT_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS1000;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class AddModuleCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private AddModuleCommandParser parser \u003d new AddModuleCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(CS1000).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // multiple participants - all accepted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module expectedModuleMultipleParticipants \u003d new ModuleBuilder(CS1000)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .withMembers(new HashSet\u003c\u003e(Arrays.asList(AMY, BOB)))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseSuccess(parser, ADD_MODULE_DESC_CS1000"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + PARTICIPANT_DESC_AMY"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + PARTICIPANT_DESC_BOB, new AddModuleCommand(expectedModuleMultipleParticipants));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, PARTICIPANT_DESC_AMY,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // missing participant prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, ADD_MODULE_DESC_CS1000,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // multiple modules"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, ADD_MODULE_DESC_CS1000"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + ADD_MODULE_DESC_CS1001"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                + PARTICIPANT_DESC_AMY, String.format(MESSAGE_DUPLICATE_PREFIX, \"n/\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddTagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand.TagPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.testutil.TagPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class AddTagCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private AddTagCommandParser parser \u003d new AddTagCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no tags field specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"James\u0026\" + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"James\u0026\" + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + TAG_DESC_HUSBAND + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        TagPersonDescriptor descriptor \u003d new TagPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        AddTagCommand expectedCommand \u003d new AddTagCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_emptyTags_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + TAG_EMPTY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        TagPersonDescriptor descriptor \u003d new TagPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        AddTagCommand expectedCommand \u003d new AddTagCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand.TagPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.ClearTagCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.person.FullNameMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.PersonHasTagsAndKeywordInNamePredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.testutil.TagPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" n/\" + TypicalPersons.ALICE.getName().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cString\u003e nameOne \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        nameOne.add(TypicalPersons.ALICE.getName().toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertEquals(new DeleteCommand(new FullNameMatchesKeywordPredicate(nameOne), new ArrayList\u003c\u003e()), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + TypicalPersons.ALICE.getName().toString() + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertEquals(new EditCommand(TypicalPersons.ALICE.getName(), descriptor), command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parseCommand_tagAdd() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        TagPersonDescriptor descriptor \u003d new TagPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        AddTagCommand command \u003d (AddTagCommand) parser.parseCommand(AddTagCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            + person.getName() + \" \" + PersonUtil.getTagPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertEquals(new AddTagCommand(person.getName(), descriptor), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parseCommand_tagDelete() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tags.add(new Tag(\"Tag\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        DeleteTagCommand command \u003d (DeleteTagCommand) parser.parseCommand(DeleteTagCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + person.getName() + \" \" + \"t/Tag\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertEquals(new DeleteTagCommand(person.getName(), tags), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parseCommand_tagClear() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ClearTagCommand command \u003d (ClearTagCommand) parser.parseCommand(ClearTagCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + person.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertEquals(new ClearTagCommand(person.getName()), command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Set\u003cString\u003e nameSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        nameSet.add(\"Alice\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        nameSet.add(\"Bob\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        nameSet.add(\"Candy\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ArrayList\u003cString\u003e nameList \u003d new ArrayList\u003c\u003e(nameSet);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        tagSet.add(new Tag(\"tag\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        tagSet.add(new Tag(\"person\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e(tagSet);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                FindCommand.COMMAND_WORD + \" n/Alice n/Bob n/Candy t/tag t/person\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertEquals(new FindCommand(new PersonHasTagsAndKeywordInNamePredicate(nameList, tagList)), command);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 2,
      "jerrylchong": 37,
      "-": 89,
      "royleochan": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClearTagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.ClearTagCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ClearTagCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearTagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private ClearTagCommandParser parser \u003d new ClearTagCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // empty preamble specified"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"\", Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // invalid name being parsed as preamble"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"James\u0026\", Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CopyCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.CopyCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.FullNameMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonHasTagsAndNamePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonHasTagsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class CopyCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private CopyCommandParser parser \u003d new CopyCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name prefix but no name argument"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" n/\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // tag prefix but no tag argument"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"t/\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name and tag prefix but no name argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" n/ t/tag\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name and tag prefix but no tag argument"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" n/name t/\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name and tag prefix but no arguments"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" n/ t/\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_validArgs_returnsCopyCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cString\u003e nameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        nameList.add(\"Alice\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tagList.add(new Tag(\"tag\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cModuleName\u003e moduleNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        moduleNames.add(new ModuleName(\"CS2103\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // only name prefix, email"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        CopyCommand expectedCopyCommand \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new CopyCommand(new FullNameMatchesKeywordPredicate(nameList), true,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        new ArrayList\u003cModuleName\u003e());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \"email n/Alice\", expectedCopyCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // only tag prefix, email"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedCopyCommand \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new CopyCommand(new PersonHasTagsPredicate(tagList), true,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        new ArrayList\u003cModuleName\u003e());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \"email t/tag\", expectedCopyCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // only module prefix, phone"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedCopyCommand \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new CopyCommand(new PersonHasTagsPredicate(new ArrayList\u003c\u003e()), false,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        moduleNames);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \"phone m/CS2103\", expectedCopyCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name and tag prefix, phone"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedCopyCommand \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new CopyCommand(new PersonHasTagsAndNamePredicate(nameList, tagList), false,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        new ArrayList\u003cModuleName\u003e());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \"phone n/Alice t/tag\", expectedCopyCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name and module prefix, email"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedCopyCommand \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new CopyCommand(new FullNameMatchesKeywordPredicate(nameList), true,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        moduleNames);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \"email n/Alice m/CS2103\", expectedCopyCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // tag and module prefix, email"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedCopyCommand \u003d new CopyCommand(new PersonHasTagsPredicate(tagList), true,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                moduleNames);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \"email m/CS2103 t/tag\", expectedCopyCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // all prefix, phone"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedCopyCommand \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new CopyCommand(new PersonHasTagsAndNamePredicate(nameList, tagList), false,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        moduleNames);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \"phone n/Alice t/tag m/CS2103\", expectedCopyCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedCopyCommand \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new CopyCommand(new PersonHasTagsAndNamePredicate(nameList, tagList), true,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        moduleNames);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \" email \\n m/CS2103 \\n n/Alice \\n t/tag\\t\", expectedCopyCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no input"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // empty name prefix"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"n/\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // empty tag prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"t/\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // empty module prefix"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"m/\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // empty name prefix with other prefixes"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" n/ t/tag\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // empty tag prefix with other prefixes"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" m/CS2103 t/\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // empty module prefix with other prefixes"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" m/ t/tag\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // multiple empty prefixes"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" n/ t/ m/\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.FullNameMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonHasTagsAndNamePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonHasTagsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cString\u003e nameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        nameList.add(\"Alice\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tagList.add(new Tag(\"tag\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cModuleName\u003e moduleNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        moduleNames.add(new ModuleName(\"CS2103\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // only name prefix, email"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        DeleteCommand expectedDeleteCommand \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new DeleteCommand(new FullNameMatchesKeywordPredicate(nameList),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        new ArrayList\u003cModuleName\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \"email n/Alice\", expectedDeleteCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // only tag prefix, email"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedDeleteCommand \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new DeleteCommand(new PersonHasTagsPredicate(tagList),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        new ArrayList\u003cModuleName\u003e());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \"email t/tag\", expectedDeleteCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // only module prefix, phone"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedDeleteCommand \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new DeleteCommand(new PersonHasTagsPredicate(new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        moduleNames);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \"phone m/CS2103\", expectedDeleteCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name and tag prefix, phone"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedDeleteCommand \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new DeleteCommand(new PersonHasTagsAndNamePredicate(nameList, tagList),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        new ArrayList\u003cModuleName\u003e());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \"phone n/Alice t/tag\", expectedDeleteCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name and module prefix, email"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedDeleteCommand \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new DeleteCommand(new FullNameMatchesKeywordPredicate(nameList),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        moduleNames);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \"email n/Alice m/CS2103\", expectedDeleteCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // tag and module prefix, email"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedDeleteCommand \u003d new DeleteCommand(new PersonHasTagsPredicate(tagList),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                moduleNames);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \"email m/CS2103 t/tag\", expectedDeleteCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // all prefix, phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedDeleteCommand \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new DeleteCommand(new PersonHasTagsAndNamePredicate(nameList, tagList),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        moduleNames);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \"phone n/Alice t/tag m/CS2103\", expectedDeleteCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        expectedDeleteCommand \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new DeleteCommand(new PersonHasTagsAndNamePredicate(nameList, tagList),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        moduleNames);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \" email \\n m/CS2103 \\n n/Alice \\n t/tag\\t\", expectedDeleteCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no input"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // empty name prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"n/\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // empty tag prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"t/\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // empty module prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"m/\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // empty name prefix with other prefixes"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" n/ t/tag\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // empty tag prefix with other prefixes"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" m/CS2103 t/\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // empty module prefix with other prefixes"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" m/ t/tag\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // multiple empty prefixes"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" n/ t/ m/\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteMeetingCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.DeleteMeetingCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class DeleteMeetingCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private DeleteMeetingCommandParser parser \u003d new DeleteMeetingCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void parse_validArgs_returnsDeleteMeetingCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Set\u003cPerson\u003e expectedMembers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        expectedMembers.add(BOB);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        expectedMembers.add(ALICE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder().withName(\"CS2103\").withMembers(expectedMembers).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting expectedMeeting \u003d new MeetingBuilder().withName(\"CS2103 Meeting\").withModule(expectedModule)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withDate(\"2020-10-03\").withTime(\"10:00\").withMembers(expectedMembers).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        DeleteMeetingCommand expectedDeletedMeetingCommand \u003d new DeleteMeetingCommand(expectedModule.getModuleName(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                expectedMeeting.getMeetingName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // module first then meeting name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseSuccess(parser, \" m/CS2103 n/CS2103 Meeting\", expectedDeletedMeetingCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // meeting name first then module name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseSuccess(parser, \" n/CS2103 Meeting m/CS2103\", expectedDeletedMeetingCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // multiple white spaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseSuccess(parser, \"     n/CS2103 Meeting             m/CS2103\", expectedDeletedMeetingCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // no space in front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, \"/m CS2103 /n CS2103 Meeting\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // no space after prefix"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, \" /mCS2103 /n CS2103 Meeting\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // no input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, \" /m /n\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // only module input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, \" /m CS2103 /n\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // only meeting name input"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, \" /m /n CS2103 Meeting\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // wrong prefixes"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, \" /mo CS2103 /na CS2103 Meeting\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class DeleteModuleCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private DeleteModuleCommandParser parser \u003d new DeleteModuleCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void parse_validArgs_returnsDeleteMeetingCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Set\u003cPerson\u003e expectedMembers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        expectedMembers.add(BOB);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        expectedMembers.add(ALICE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder().withName(\"CS2103\").withMembers(expectedMembers).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand(expectedModule.getModuleName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // module"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseSuccess(parser, \" m/CS2103\", deleteModuleCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // multiple white spaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseSuccess(parser, \"     m/CS2103\", deleteModuleCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // no space in front"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, \"/m CS2103\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // no space after prefix"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, \" /mCS2103\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // no input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, \" /m\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // wrong prefixes"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, \" /mo CS2103\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteTagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DeleteTagCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private DeleteTagCommandParser parser \u003d new DeleteTagCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no tags field specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"James\u0026\" + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"James\u0026\" + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + TAG_DESC_HUSBAND + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tags.add(new Tag(VALID_TAG_HUSBAND));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tags.add(new Tag(VALID_TAG_FRIEND));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        DeleteTagCommand expectedCommand \u003d new DeleteTagCommand(new Name(VALID_NAME_AMY), tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_emptyTags_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + TAG_EMPTY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PREFIX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // no name specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, VALID_EMAIL_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, \"Test\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // no name and no field specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // invalid name format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Name targetName \u003d new Name(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String userInput \u003d targetName + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Name targetName \u003d new Name(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String userInput \u003d targetName + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Name targetName \u003d new Name(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String userInput \u003d targetName + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        userInput \u003d targetName + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        userInput \u003d targetName + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        userInput \u003d targetName + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void parse_multipleRepeatedFields_throwsException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Name targetName \u003d new Name(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String userInput \u003d targetName + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_DUPLICATE_PREFIX, \"p/\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Name targetName \u003d new Name(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String userInput \u003d targetName + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_DUPLICATE_PREFIX, \"p/\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        userInput \u003d targetName + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_DUPLICATE_PREFIX, \"p/\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Name targetName \u003d new Name(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String userInput \u003d targetName + TAG_EMPTY;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetName, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 5,
      "-": 143,
      "royleochan": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditMeetingCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEETING_NAME_DESC_CM1111_MEETING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEETING_NAME_CM1111_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CM1111_MEETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.EditMeetingCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class EditMeetingCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditMeetingCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private EditMeetingCommandParser parser \u003d new EditMeetingCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // no module name specified"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, VALID_MEETING_NAME_CM1111_MEETING, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // no meeting name specified"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, VALID_MODULE_NAME_CM1111_MEETING, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // assertParseFailure(parser, VALID_MODULE_NAME_CM1111_MEETING + VALID_MEETING_NAME_CM1111_MEETING,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        //         EditMeetingCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // no name and no field specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // invalid name format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, \"-5\" + MEETING_NAME_DESC_CM1111_MEETING, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        ModuleName targetModule \u003d new ModuleName(VALID_MODULE_NAME_CM1111_MEETING);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingName targetMeetingName \u003d new MeetingName(VALID_MEETING_NAME_CM1111_MEETING);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String userInput \u003d MODULE_DESC_CM1111_MEETING + MEETING_NAME_DESC_CM1111_MEETING + DATE_DESC_CM1112_MEETING"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + PARTICIPANT_DESC_AMY + TIME_DESC_CM1112_MEETING + MEETING_NAME_DESC_CM1112_MEETING"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                + PARTICIPANT_DESC_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand.EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withMeetingName(VALID_MEETING_NAME_CM1112_MEETING)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withDate(VALID_DATE_CM1112_MEETING)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withTime(VALID_TIME_CM1112_MEETING)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withMembers(VALID_PARTICIPANT_AMY, VALID_PARTICIPANT_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        EditMeetingCommand expectedCommand \u003d new EditMeetingCommand(targetModule, targetMeetingName, descriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonHasTagsAndKeywordInNamePredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.PersonHasTagsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name prefix but no name argument"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" n/\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // tag prefix but no tag argument"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \"t/\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name and tag prefix but no name argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" n/ t/tag\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name and tag prefix but no tag argument"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" n/name t/\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name and tag prefix but no arguments"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseFailure(parser, \" n/ t/\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cString\u003e nameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        nameList.add(\"Alice\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tagList.add(new Tag(\"tag\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new FindCommand(new PersonHasTagsAndKeywordInNamePredicate(nameList, tagList));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \" n/Alice t/tag\", expectedFindCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \" \\n n/Alice \\n t/tag\\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_multipleNamesAndMultipleTags_returnsFindCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Set\u003cString\u003e nameSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        nameSet.add(\"Alice\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        nameSet.add(\"Bob\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        nameSet.add(\"Candy\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cString\u003e nameList \u003d new ArrayList\u003c\u003e(nameSet);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tagSet.add(new Tag(\"tag\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tagSet.add(new Tag(\"person\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e(tagSet);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new FindCommand(new PersonHasTagsAndKeywordInNamePredicate(nameList, tagList));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \" n/Alice n/Bob n/Candy t/tag t/person\", expectedFindCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_singleNameAndNoTag_returnsFindCommand() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cString\u003e nameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        nameList.add(\"Alice\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(nameList));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \" n/Alice \", expectedFindCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_multipleNamesAndNoTag_returnsFindCommand() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Set\u003cString\u003e nameSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        nameSet.add(\"Alice\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        nameSet.add(\"Bob\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        nameSet.add(\"Candy\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cString\u003e nameList \u003d new ArrayList\u003c\u003e(nameSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(nameList));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \" n/Alice n/Bob n/Candy\", expectedFindCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_noNameAndSingleTag_returnsFindCommand() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tagList.add(new Tag(\"tag\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new FindCommand(new PersonHasTagsPredicate(tagList));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \" t/tag \", expectedFindCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_noNameAndMultipleTags_returnsFindCommand() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tagSet.add(new Tag(\"tag\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tagSet.add(new Tag(\"person\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e(tagSet);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                new FindCommand(new PersonHasTagsPredicate(tagList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertParseSuccess(parser, \" t/tag t/person \", expectedFindCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewMeetingCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "//@@author royleochan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.logic.commands.ViewMeetingCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class ViewMeetingCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private ViewMeetingCommandParser parser \u003d new ViewMeetingCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void parse_validArgs_returnsViewMeetingCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Set\u003cPerson\u003e expectedMembers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        expectedMembers.add(BOB);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        expectedMembers.add(ALICE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder().withName(\"CS2103\").withMembers(expectedMembers).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Meeting expectedMeeting \u003d new MeetingBuilder().withName(\"CS2103 Meeting\").withModule(expectedModule)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .withDate(\"2020-10-03\").withTime(\"10:00\").withMembers(expectedMembers).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ViewMeetingCommand expectedViewMeetingCommand \u003d new ViewMeetingCommand(expectedModule.getModuleName(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                expectedMeeting.getMeetingName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // module first then meeting name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseSuccess(parser, \" m/CS2103 n/CS2103 Meeting\", expectedViewMeetingCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // meeting name first then module name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseSuccess(parser, \" n/CS2103 Meeting m/CS2103\", expectedViewMeetingCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // multiple white spaces"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseSuccess(parser, \"     n/CS2103 Meeting             m/CS2103\", expectedViewMeetingCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // no space in front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, \"/m CS2103 /n CS2103 Meeting\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // no space after prefix"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, \" /mCS2103 /n CS2103 Meeting\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // no input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, \" /m /n\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // only module input"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, \" /m CS2103 /n\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // only meeting name input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, \" /m /n CS2103 Meeting\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // wrong prefixes"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertParseFailure(parser, \" /mo CS2103 /na CS2103 Meeting\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/textfieldmodules/AutocompleteModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package seedu.address.logic.textfieldmodules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "class AutocompleteModuleTest extends HeadlessTestBase {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private String sampleCmdPrefix \u003d \"test/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private List\u003cString\u003e sampleNameList \u003d Arrays.asList(\"Alice\", \"Bravo\", \"Charlie\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private TextField textField;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        textField \u003d new TextField();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        stage.setScene(new Scene(new StackPane(textField)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // Setup Module"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        AutocompleteModule ac \u003d AutocompleteModule.attachTo(textField);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        ac.addSuggestions(sampleCmdPrefix, () -\u003e sampleNameList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void attachTo_nullTextField_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AutocompleteModule.attachTo(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void addSuggestions_nullCommandPrefix_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AutocompleteModule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .attachTo(textField)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .addSuggestions(null, () -\u003e sampleNameList));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void addSuggestions_nullListSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AutocompleteModule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .attachTo(textField)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .addSuggestions(sampleCmdPrefix, null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void textFieldWithAutocompleteModule_getFirstSuggestionWithEmptyPrefix_success(FxRobot robot) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // Simulate user trigger ac"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.clickOn(textField)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .write(sampleCmdPrefix)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .press(KeyCode.TAB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .release(KeyCode.TAB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String expected \u003d sampleCmdPrefix + sampleNameList.get(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String actual \u003d textField.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void textFieldWithAutocompleteModule_getFirstSuggestionWithNonEmptyPrefix_success(FxRobot robot) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String prefix \u003d \"br\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String firstResultMatchingPrefix \u003d sampleNameList.stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .filter(x -\u003e x.toLowerCase().startsWith(prefix.toLowerCase()))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .orElse(\"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // Simulate user trigger ac"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.clickOn(textField)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .write(sampleCmdPrefix + prefix)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .press(KeyCode.TAB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .release(KeyCode.TAB);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String expected \u003d sampleCmdPrefix + firstResultMatchingPrefix;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String actual \u003d textField.getText();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void textFieldWithAutocompleteModule_lockInFirstSuggestions_success(FxRobot robot) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String prefix \u003d \"br\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String firstResultMatchingPrefix \u003d sampleNameList.stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .filter(x -\u003e x.toLowerCase().startsWith(prefix.toLowerCase()))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .orElse(\"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // Simulate user trigger ac"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.clickOn(textField)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .write(sampleCmdPrefix + prefix)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .press(KeyCode.TAB)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .release(KeyCode.TAB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .press(KeyCode.ENTER)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .release(KeyCode.ENTER);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String expected \u003d firstResultMatchingPrefix;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String actual \u003d textField.getText();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void textFieldWithAutocompleteModule_getFirstSuggestionWithPrefixWithNoMatch_prefixReturned(FxRobot robot) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String prefix \u003d \"Ergot\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String firstResultMatchingPrefix \u003d sampleNameList.stream()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .filter(x -\u003e x.toLowerCase().startsWith(prefix.toLowerCase()))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .orElse(\"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // Simulate user trigger ac"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.clickOn(textField)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .write(sampleCmdPrefix + prefix)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .press(KeyCode.TAB)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .release(KeyCode.TAB);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String expected \u003d sampleCmdPrefix + prefix;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String actual \u003d textField.getText();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void textFieldWithAutocompleteModule_iterateThroughAllSuggestionsForward_success(FxRobot robot) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String prefix \u003d \"br\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // Simulate user trigger ac"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.clickOn(textField).write(sampleCmdPrefix + prefix);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        for (int i \u003d 0; i \u003c sampleNameList.size() + 1; i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            robot.press(KeyCode.TAB);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            robot.release(KeyCode.TAB);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String expected \u003d sampleCmdPrefix + prefix;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String actual \u003d textField.getText();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void textFieldWithAutocompleteModule_iterateThroughAllSuggestionsBackward_success(FxRobot robot) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String prefix \u003d \"br\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String firstResultMatchingPrefix \u003d sampleNameList.stream()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .filter(x -\u003e x.toLowerCase().startsWith(prefix.toLowerCase()))"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .orElse(\"\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // Simulate user trigger ac"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.clickOn(textField).write(sampleCmdPrefix + prefix);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        for (int i \u003d 0; i \u003c sampleNameList.size() + 1; i++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            robot.press(KeyCode.SHIFT, KeyCode.TAB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            robot.release(KeyCode.SHIFT, KeyCode.TAB);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String expected \u003d sampleCmdPrefix + prefix;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String actual \u003d textField.getText();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/textfieldmodules/FzfModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package seedu.address.logic.textfieldmodules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "class FzfModuleTest extends HeadlessTestBase {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private List\u003cString\u003e sampleNameList \u003d Arrays.asList(\"Alice\", \"Bravo\", \"Charlie\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private TextField textField;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private FzfModule fzfModule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private StackPane stackPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        textField \u003d new TextField();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        fzfModule \u003d FzfModule.attachTo(textField, () -\u003e sampleNameList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        stackPane \u003d new StackPane(textField);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        stage.setScene(new Scene(stackPane));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void attachTo_nullTextField_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FzfModule.attachTo(null, () -\u003e sampleNameList));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void attachTo_nullListSupplier_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FzfModule.attachTo(textField, null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void textFieldWithFzfModule_triggerFzf_showFzfMenu(FxRobot robot) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.press(KeyCode.CONTROL, KeyCode.SPACE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertTrue(robot.listWindows().stream().anyMatch(win -\u003e win instanceof ContextMenu));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void textFieldWithFzfModule_lockInFirstSuggestion_success(FxRobot robot) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.press(KeyCode.CONTROL, KeyCode.SPACE)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .press(KeyCode.ENTER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.release(new KeyCode[]{});"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String expected \u003d sampleNameList.get(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String actual \u003d textField.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void textFieldWithFzfModule_navigateAndLockInLastSuggestion_success(FxRobot robot) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.press(KeyCode.CONTROL, KeyCode.SPACE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // navigate down the list to last element"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        for (int i \u003d 0; i \u003c sampleNameList.size() - 1; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            robot.press(KeyCode.DOWN);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            robot.release(KeyCode.DOWN);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.press(KeyCode.ENTER)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .release(KeyCode.ENTER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String expected \u003d sampleNameList.get(sampleNameList.size() - 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String actual \u003d textField.getText();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void textFieldWithFzfModule_nonEmptyQuery_validNumberOfSuggestions(FxRobot robot) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String query \u003d \"br\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.press(KeyCode.CONTROL, KeyCode.SPACE)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .write(query);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.release(new KeyCode[]{});"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        long expected \u003d sampleNameList.stream().filter(x -\u003e x.toLowerCase().contains(query)).count();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        long actual \u003d fzfModule.getMenu().getItems().stream().count();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void textFieldWithFzfModule_exitFzfMode_hideFzfMenu(FxRobot robot) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.press(KeyCode.CONTROL, KeyCode.SPACE)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .press(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertTrue(robot.listWindows().stream().allMatch(win -\u003e !(win instanceof ContextMenu)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void textFieldWithFzfModule_queryHasNoValidSuggestions_hideFzfMenu(FxRobot robot) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String query \u003d \"Debra\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.press(KeyCode.CONTROL, KeyCode.SPACE)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                .write(query);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        robot.release(new KeyCode[]{});"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        long expected \u003d sampleNameList.stream().filter(x -\u003e x.toLowerCase().contains(query)).count();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        long actual \u003d fzfModule.getMenu().getItems().stream().count();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertTrue(robot.listWindows().stream().allMatch(win -\u003e !(win instanceof ContextMenu)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/textfieldmodules/HeadlessTestBase.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package seedu.address.logic.textfieldmodules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class HeadlessTestBase {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private static void setHeadless() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        System.setProperty(\"testfx.robot\", \"glass\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        System.setProperty(\"testfx.headless\", \"true\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        System.setProperty(\"prism.order\", \"sw\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        System.setProperty(\"prism.text\", \"t2k\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        System.setProperty(\"java.awt.headless\", \"true\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 99,
      "royleochan": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.CS1100_MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2100;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.testutil.MeetingBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.testutil.ModuleBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertEquals(new MeetingBook(), new MeetingBook(modelManager.getMeetingBook()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertEquals(new ModuleBook(), new ModuleBook(modelManager.getModuleBook()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void getSelectedMeeting_nullMeeting_returnsNull() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        modelManager.setSelectedMeeting(null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertNull(modelManager.getSelectedMeeting());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void getSelectedMeeting_validMeeting_returnsMeeting() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        modelManager.setSelectedMeeting(new MeetingBuilder().build());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertEquals(new MeetingBuilder().build(), modelManager.getSelectedMeeting());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingBook meetingBook \u003d new MeetingBookBuilder().withMeeting(CS1100_MEETING).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingBook differentMeetingBook \u003d new MeetingBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBookBuilder().withModule(CS2100).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ModuleBook differentModuleBook \u003d new ModuleBook();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, meetingBook, moduleBook, userPrefs);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, meetingBook, moduleBook, userPrefs);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, differentMeetingBook,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            differentModuleBook, userPrefs)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, meetingBook, moduleBook, userPrefs)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, meetingBook, moduleBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 7,
      "EkamSinghPandher": 9,
      "-": 127,
      "royleochan": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/model/commons/SpecialNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "//@@author royleochan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class SpecialNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SpecialName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new SpecialName(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // boundary case: null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SpecialName.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertFalse(SpecialName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // valid names"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(SpecialName.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(SpecialName.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(SpecialName.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(SpecialName.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(SpecialName.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(SpecialName.isValidName(\"~!@#$%^\u0026*()_+{}[];\u0027?\u003e\u003c./,\")); // names with special symbols"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void isValidFormat() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidFormat(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // invalid format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidFormat(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidFormat(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidFormat(\"\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidFormat(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidFormat(\"abcd-12-12\")); // year portion contains alphabets"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidFormat(\"2012-ab-12\")); // month portion contains alphabets"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidFormat(\"2012-12-ab\")); // date portion contains alphabets"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidFormat(\"2012212-12\")); // \"-\" not existent at 5th char"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidFormat(\"2012-12012\")); // \"-\" not existent at 8th char"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidFormat(\"1234546789042456\")); //"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        //valid format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(Date.isValidFormat(\"1234-56-78\")); // follows validation regex"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidDate(\"2020-12-50\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidDate(\"2020-17-12\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidDate(\"0000-08-19\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidDate(\"2020-00-10\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(Date.isValidDate(\"2020-10-12\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(Date.isValidDate(\"2000-11-03\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(Date.isValidDate(\"1800-07-30\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(Date.isValidDate(\"2700-02-12\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void isValidDateInput() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDateInput(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidDateInput(\"1234567890\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Date.isValidDateInput(\"abcd-fg-hi\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(Date.isValidDateInput(\"1790-12-30\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(Date.isValidDateInput(\"9999-12-04\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/MeetingNameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class MeetingNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new MeetingNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new MeetingNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new MeetingNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void test_meetingNameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingNameContainsKeywordsPredicate predicate \u003d new MeetingNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                Collections.singletonList(\"CS2100\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(predicate.test(new MeetingBuilder().withName(\"CS2100 CS2101\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        predicate \u003d new MeetingNameContainsKeywordsPredicate(Arrays.asList(\"CS2100\", \"CS2101\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(predicate.test(new MeetingBuilder().withName(\"CS2100 CS2101\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        predicate \u003d new MeetingNameContainsKeywordsPredicate(Arrays.asList(\"CS2101\", \"CS2103\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(predicate.test(new MeetingBuilder().withName(\"CS2100 CS2103\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        predicate \u003d new MeetingNameContainsKeywordsPredicate(Arrays.asList(\"cs2100\", \"cs2101\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(predicate.test(new MeetingBuilder().withName(\"CS2100 CS2101\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void test_meetingNameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                new MeetingNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(predicate.test(new MeetingBuilder().withName(\"CS2100\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        predicate \u003d new MeetingNameContainsKeywordsPredicate(Arrays.asList(\"CS2102\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(predicate.test(new MeetingBuilder().withName(\"CS2100 CS2101\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // Keywords match date and time, but does not match meeting name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        predicate \u003d new MeetingNameContainsKeywordsPredicate(Arrays.asList(\"2020-10-03\", \"10:00\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(predicate.test(new MeetingBuilder().withName(\"CS2100\").withDate(\"2020-10-03\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withTime(\"10:00\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/MeetingNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class MeetingNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MeetingName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void constructor_invalidMeetingName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String invalidMeetingName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new MeetingName(invalidMeetingName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void isValidMeetingName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MeetingName.isValidMeetingName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(MeetingName.isValidMeetingName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(MeetingName.isValidMeetingName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(MeetingName.isValidMeetingName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(MeetingName.isValidMeetingName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(MeetingName.isValidMeetingName(\"meeting abcde\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(MeetingName.isValidMeetingName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(MeetingName.isValidMeetingName(\"meeting 12345\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(MeetingName.isValidMeetingName(\"Meeting ABCDE\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(MeetingName.isValidMeetingName(\"Meeting With Group Mates To Discuss Project\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/MeetingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEETING_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.CS2100_MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.CS2101_MEETING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2101;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class MeetingTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting meeting \u003d new MeetingBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e meeting.getParticipants().remove(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void isSameMeeting() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(CS2100_MEETING.isSameMeeting(CS2100_MEETING));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(CS2100_MEETING.isSameMeeting(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different date and time but same module and meeting name -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting editedCS2100Meeting \u003d new MeetingBuilder(CS2100_MEETING)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withDate(VALID_DATE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withTime(VALID_TIME)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(CS2100_MEETING.isSameMeeting(editedCS2100Meeting));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        editedCS2100Meeting \u003d new MeetingBuilder(CS2100_MEETING).withName(VALID_MEETING_NAME).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(CS2100_MEETING.isSameMeeting(editedCS2100Meeting));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        editedCS2100Meeting \u003d new MeetingBuilder(CS2100_MEETING).withModule(CS2101).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(CS2100_MEETING.isSameMeeting(editedCS2100Meeting));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // same name, same module, same date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        editedCS2100Meeting \u003d new MeetingBuilder(CS2100_MEETING).withDate(VALID_DATE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withMembers(CS2101_MEETING.getParticipants()).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(CS2100_MEETING.isSameMeeting(editedCS2100Meeting));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // same name, same module, same time, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        editedCS2100Meeting \u003d new MeetingBuilder(CS2100_MEETING).withTime(VALID_TIME)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withMembers(CS2101_MEETING.getParticipants()).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(CS2100_MEETING.isSameMeeting(editedCS2100Meeting));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // same name, same module, same date, same time, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        editedCS2100Meeting \u003d new MeetingBuilder(CS2100_MEETING)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withMembers(CS2101_MEETING.getParticipants()).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(CS2100_MEETING.isSameMeeting(editedCS2100Meeting));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting cs2100MeetingCopy \u003d new MeetingBuilder(CS2100_MEETING).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(CS2100_MEETING.equals(cs2100MeetingCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(CS2100_MEETING.equals(CS2100_MEETING));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(CS2100_MEETING.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(CS2100_MEETING.equals(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(CS2100_MEETING.equals(CS2101_MEETING));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting editedCS2100Meeting \u003d new MeetingBuilder(CS2100_MEETING).withName(VALID_MEETING_NAME).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(CS2100_MEETING.equals(editedCS2100Meeting));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        editedCS2100Meeting \u003d new MeetingBuilder(CS2100_MEETING).withModule(CS2101).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(CS2100_MEETING.equals(editedCS2100Meeting));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        editedCS2100Meeting \u003d new MeetingBuilder(CS2100_MEETING).withDate(VALID_DATE).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(CS2100_MEETING.equals(editedCS2100Meeting));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        editedCS2100Meeting \u003d new MeetingBuilder(CS2100_MEETING).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(CS2100_MEETING.equals(editedCS2100Meeting));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // different participants -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        editedCS2100Meeting \u003d new MeetingBuilder(CS2100_MEETING).withMembers(CS2101.getClassmates()).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(CS2100_MEETING.equals(editedCS2100Meeting));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/TimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Time(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void isValidFormat() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // null Time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidFormat(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // invalid format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Time.isValidFormat(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Time.isValidFormat(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Time.isValidFormat(\"1234\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Time.isValidFormat(\"abcde\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Time.isValidFormat(\"00-00\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Time.isValidFormat(\"123:00\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Time.isValidFormat(\"12:000\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        //valid format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(Time.isValidFormat(\"90:10\")); // follows validation regex"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(Time.isValidFormat(\"12:00\")); // follows validation regex"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // null Time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // invalid Time"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Time.isValidTime(\"24:00\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Time.isValidTime(\"55:00\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Time.isValidTime(\"12:60\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(Time.isValidTime(\"12:61\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        // valid Time"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(Time.isValidTime(\"00:00\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(Time.isValidTime(\"23:59\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(Time.isValidTime(\"12:00\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/UniqueMeetingListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.CS2100_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.CS2101_MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.exceptions.DuplicateMeetingException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.exceptions.MeetingNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.testutil.TypicalMeetings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class UniqueMeetingListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private final UniqueMeetingList uniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void contains_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.contains((MeetingName) null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void contains_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.contains((Meeting) null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void contains_meetingNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertFalse(uniqueMeetingList.contains(CS2100_MEETING));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void contains_meetingInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.add(CS2100_MEETING);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(uniqueMeetingList.contains(CS2100_MEETING));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void contains_meetingWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.add(CS2100_MEETING);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting editedCS2100Meeting \u003d new MeetingBuilder(CS2100_MEETING).withMembers(CS2101_MEETING.getParticipants())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertTrue(uniqueMeetingList.contains(editedCS2100Meeting));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void add_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.add(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void add_duplicateMeeting_throwsDuplicateMeetingException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.add(CS2100_MEETING);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.add(CS2100_MEETING));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeeting_nullTargetMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeeting(null, CS2100_MEETING));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeeting_nullEditedMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeeting(CS2100_MEETING, null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeeting_targetMeetingNotInList_throwsMeetingNotFoundException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(MeetingNotFoundException.class, () -\u003e uniqueMeetingList"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .setMeeting(CS2100_MEETING, CS2100_MEETING));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeeting_editedMeetingIsSameMeeting_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.add(CS2100_MEETING);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.setMeeting(CS2100_MEETING, CS2100_MEETING);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        expectedUniqueMeetingList.add(CS2100_MEETING);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeeting_editedMeetingHasSameIdentity_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.add(TypicalMeetings.CS2100_MEETING);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Meeting editedCS2100Meeting \u003d new MeetingBuilder(TypicalMeetings.CS2100_MEETING)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .withMembers(CS2101_MEETING.getParticipants())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.setMeeting(TypicalMeetings.CS2100_MEETING, editedCS2100Meeting);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        expectedUniqueMeetingList.add(editedCS2100Meeting);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeeting_editedMeetingHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.add(CS2100_MEETING);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.setMeeting(CS2100_MEETING, CS2101_MEETING);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        expectedUniqueMeetingList.add(CS2101_MEETING);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeeting_editedMeetingHasNonUniqueIdentity_throwsDuplicateMeetingException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.add(CS2100_MEETING);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.add(CS2101_MEETING);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .setMeeting(CS2100_MEETING, CS2101_MEETING));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void remove_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.remove(null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void remove_meetingDoesNotExist_throwsMeetingNotFoundException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(MeetingNotFoundException.class, () -\u003e uniqueMeetingList.remove(CS2100_MEETING));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void remove_existingMeeting_removesMeeting() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.add(CS2100_MEETING);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.remove(CS2100_MEETING);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeetings_nullUniqueMeetingList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((UniqueMeetingList) null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeetings_uniqueMeetingList_replacesOwnListWithProvidedUniqueMeetingList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.add(CS2100_MEETING);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        expectedUniqueMeetingList.add(CS2101_MEETING);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.setMeetings(expectedUniqueMeetingList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeetings_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((List\u003cMeeting\u003e) null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeetings_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.add(CS2100_MEETING);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        List\u003cMeeting\u003e meetingList \u003d Collections.singletonList(CS2101_MEETING);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        uniqueMeetingList.setMeetings(meetingList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        expectedUniqueMeetingList.add(CS2101_MEETING);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void setMeetings_listWithDuplicateMeetings_throwsDuplicateMeetingException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        List\u003cMeeting\u003e listWithDuplicateMeetings \u003d Arrays.asList(CS2100_MEETING, CS2100_MEETING);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.setMeetings(listWithDuplicateMeetings));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueMeetingList"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 177
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class ModuleNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleName(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void constructor_invalidMeetingName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        String invalidModuleName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleName(invalidModuleName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void isValidMeetingName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleName.isValidModuleName(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"csabcde\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"cs12345\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"CSABCDE\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"CS100000000000000000000000000000\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1000;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2100;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e module.getClassmates().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(CS2100.isSameModule(CS2100));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(CS2100.isSameModule(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module editedCS2100Module \u003d new ModuleBuilder(CS2100).withName(VALID_MODULE_NAME_CS1000).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(CS2100.isSameModule(editedCS2100Module));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // same name different classmates -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module CS2100Module \u003d new ModuleBuilder(CS2100).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Set\u003cPerson\u003e editedClassmates \u003d CS2101.getClassmates();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        editedCS2100Module \u003d new ModuleBuilder(CS2100).withMembers(editedClassmates).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(CS2100Module.isSameModule(editedCS2100Module));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // same name same classmates -\u003e return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        editedCS2100Module \u003d new ModuleBuilder().withMembers(CS2100.getClassmates())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            .withName(CS2100.getModuleName().getModuleName()).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(CS2100Module.isSameModule(editedCS2100Module));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module cs2100ModuleCopy \u003d new ModuleBuilder(CS2100).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(CS2100.equals(cs2100ModuleCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(CS2100.equals(CS2100));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(CS2100.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(CS2100.equals(5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(CS2100.equals(CS2101));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module editedCS2100Module \u003d new ModuleBuilder(CS2100).withName(VALID_MODULE_NAME_CS1000).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(CS2100.equals(editedCS2100Module));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        // different participants -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        editedCS2100Module \u003d new ModuleBuilder(CS2100).withMembers(CS2101.getClassmates()).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(CS2100.equals(editedCS2100Module));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/UniqueModuleListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2100;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class UniqueModuleListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void contains_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.contains((ModuleName) null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void contains_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.contains((Module) null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void contains_moduleNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(uniqueModuleList.contains(CS2100));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void contains_moduleInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.add(CS2100);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertTrue(uniqueModuleList.contains(CS2100));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void contains_moduleWithSameIdentityFieldsInList_returnsFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.add(CS2100);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module editedCS2100Module \u003d new ModuleBuilder(CS2100).withMembers(CS2101.getClassmates())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertFalse(uniqueModuleList.contains(editedCS2100Module));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void add_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.add(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void add_duplicateModule_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.add(CS2100);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.add(CS2100));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModule_nullTargetModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(null, CS2100));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModule_nullEditedModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(CS2100, null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModule_targetModuleNotInList_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .setModule(CS2100, CS2100));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModule_editedModuleIsSameModule_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.add(CS2100);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.setModule(CS2100, CS2100);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        UniqueModuleList uniqueModuleList1 \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList1.add(CS2100);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertEquals(uniqueModuleList1, this.uniqueModuleList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModule_editedModuleHasSameIdentity_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.add(CS2100);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Module editedCS2100Module \u003d new ModuleBuilder(CS2100)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .withMembers(CS2101.getClassmates())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.setModule(CS2100, editedCS2100Module);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        expectedUniqueModuleList.add(editedCS2100Module);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModule_editedModuleHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.add(CS2100);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.setModule(CS2100, CS2101);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        expectedUniqueModuleList.add(CS2101);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModule_editedModuleHasNonUniqueIdentity_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.add(CS2100);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.add(CS2101);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .setModule(CS2100, CS2101));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void remove_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.remove(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void remove_moduleDoesNotExist_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.remove(CS2100));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void remove_existingModule_removesModule() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.add(CS2100);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.remove(CS2100);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModules_nullUniqueModuleList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((UniqueModuleList) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModules_uniqueModuleList_replacesOwnListWithProvidedUniqueModuleList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.add(CS2100);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        expectedUniqueModuleList.add(CS2101);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.setModules(expectedUniqueModuleList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModules_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((List\u003cModule\u003e) null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModules_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.add(CS2100);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d Collections.singletonList(CS2101);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        uniqueModuleList.setModules(moduleList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        expectedUniqueModuleList.add(CS2101);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void setModules_listWithDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        List\u003cModule\u003e listWithDuplicateModules \u003d Arrays.asList(CS2100, CS2100);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.setModules(listWithDuplicateModules));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueModuleList"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 176
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/FullNameMatchesKeywordPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class FullNameMatchesKeywordPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FullNameMatchesKeywordPredicate firstPredicate \u003d new FullNameMatchesKeywordPredicate("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FullNameMatchesKeywordPredicate secondPredicate \u003d new FullNameMatchesKeywordPredicate("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FullNameMatchesKeywordPredicate firstPredicateCopy \u003d new FullNameMatchesKeywordPredicate("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void test_nameMatchesKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FullNameMatchesKeywordPredicate predicate \u003d new FullNameMatchesKeywordPredicate("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"Alice Bob\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new FullNameMatchesKeywordPredicate(Arrays.asList(\"Alice Bob\", \"Carol Tan\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void test_nameDoesNotMatchKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        FullNameMatchesKeywordPredicate predicate \u003d new FullNameMatchesKeywordPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new FullNameMatchesKeywordPredicate(Arrays.asList(\"Alice Bib\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Non-full name keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new FullNameMatchesKeywordPredicate(Arrays.asList(\"Alice\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Lower-case keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new FullNameMatchesKeywordPredicate(Arrays.asList(\"alice bob\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Mixed-case keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new FullNameMatchesKeywordPredicate(Arrays.asList(\"AliCe bOb\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new FullNameMatchesKeywordPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    //@@author jerrylchong"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // One matching letter"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"l\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"lice\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void test_initialsContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"ab\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"ab\", \"ac\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aB\", \"Ab\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void test_initialsDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Not initials of full name keywords"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"ab\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob Charles\").build()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Non-matching initials"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"ac\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Space between initials"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"a b\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Period between initials"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"a.b\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 74,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void getFirstName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String noSpaceName \u003d \"Roy\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String singleSpaceName \u003d \"Roy Chan\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String multipleSpaceName \u003d \"Roy Chan Chuan Zhi\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // EP: Single space"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertEquals(new Name(singleSpaceName).getFirstName(), \"Roy\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // EP: No space"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertEquals(new Name(noSpaceName).getFirstName(), \"Roy\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // EP: Multiple spaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertEquals(new Name(multipleSpaceName).getFirstName(), \"Roy\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "royleochan": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonHasTagsAndKeywordInNamePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class PersonHasTagsAndKeywordInNamePredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cTag\u003e firstPredicateTagList \u003d Collections.singletonList(new Tag(\"first\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cTag\u003e secondPredicateTagList \u003d Arrays.asList(new Tag(\"first\"), new Tag(\"second\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsAndKeywordInNamePredicate firstPredicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                firstPredicateKeywordList, firstPredicateTagList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsAndKeywordInNamePredicate secondPredicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                secondPredicateKeywordList, secondPredicateTagList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsAndKeywordInNamePredicate firstPredicateCopy \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                firstPredicateKeywordList, firstPredicateTagList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // One matching letter"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsAndKeywordInNamePredicate predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"l\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"friend\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"lice\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"friend\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"Alice\", \"Bob\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"friend\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"Bob\", \"Carol\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"friend\")));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"bOb\", \"cAroL\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"friend\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void test_initialsContainsKeywords() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsAndKeywordInNamePredicate predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"ab\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"friend\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"ab\", \"ac\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"friend\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"aB\", \"Ac\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"friend\")));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void test_personHasTags_returnsTrue() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // one tag"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsAndKeywordInNamePredicate predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"Alice Bob\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"friend\")));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\", \"male\").build()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // multiple tags"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"Alice Bob\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(new Tag(\"friend\"), new Tag(\"male\")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\", \"male\").build()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // person has one of the tags"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"Alice Bob\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(new Tag(\"prof\"), new Tag(\"male\")));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\", \"male\").build()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void test_personDoesNotHaveKeywordOrInitialsOrTags_returnsFalse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // zero name keywords"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsAndKeywordInNamePredicate predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"fake\")));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no matching keyword"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"Carol\"),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"fake\")));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // incomplete initials"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"ab\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"fake\")));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob Carol\").build()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"fake\")));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no tag keywords"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"fake\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no matching tag"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"fake\"),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"prof\")));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no matching tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"fake\"),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(new Tag(\"prof\"), new Tag(\"male\")));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // mixed-case tag"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"fake\"),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"frIenD\")));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name and tags do not match"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndKeywordInNamePredicate("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"Charles\", \"ab\"),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"prof\")));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob Carol\").withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonHasTagsAndNamePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class PersonHasTagsAndNamePredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cTag\u003e firstPredicateTagList \u003d Collections.singletonList(new Tag(\"first\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cTag\u003e secondPredicateTagList \u003d Arrays.asList(new Tag(\"first\"), new Tag(\"second\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsAndNamePredicate firstPredicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                firstPredicateKeywordList, firstPredicateTagList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsAndNamePredicate secondPredicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                secondPredicateKeywordList, secondPredicateTagList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsAndNamePredicate firstPredicateCopy \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                firstPredicateKeywordList, firstPredicateTagList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void test_nameMatchesKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsAndNamePredicate predicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"Alice Bob\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"friend\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"Alice Bob\", \"Carol Tan\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"friend\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void test_personHasTags_returnsTrue() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // one tag"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsAndNamePredicate predicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"Alice Bob\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"friend\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\", \"male\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // multiple tags"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"Alice Bob\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(new Tag(\"friend\"), new Tag(\"male\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\", \"male\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // person has one of the tags"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"Alice Bob\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(new Tag(\"prof\"), new Tag(\"male\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\", \"male\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void test_personDoesNotHaveNameOrTags_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // zero name keywords"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsAndNamePredicate predicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"fake\")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // not full name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"Alice\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"fake\")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // lower-case name keyword"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"alice bob\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"fake\")));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // mixed-case name keyword"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(\"aLice boB\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"fake\")));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"fake\")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no tag keywords"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"fake\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no matching tag"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"fake\"),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"prof\")));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no matching tags"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"fake\"),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(new Tag(\"prof\"), new Tag(\"male\")));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // mixed-case tag"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"fake\"),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"frIenD\")));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // name and tags do not match"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsAndNamePredicate("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Arrays.asList(\"Charles Darwin\"),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"prof\")));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonHasTagsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "//@@author jerrylchong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class PersonHasTagsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cTag\u003e firstPredicateKeywordList \u003d Collections.singletonList(new Tag(\"first\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        List\u003cTag\u003e secondPredicateKeywordList \u003d Arrays.asList(new Tag(\"first\"), new Tag(\"second\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsPredicate firstPredicate \u003d new PersonHasTagsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsPredicate secondPredicate \u003d new PersonHasTagsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsPredicate firstPredicateCopy \u003d new PersonHasTagsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void test_personHasTags_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // one tag"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsPredicate predicate \u003d new PersonHasTagsPredicate("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Collections.singletonList(new Tag(\"friend\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\", \"male\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // multiple tags"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsPredicate(Arrays.asList(new Tag(\"friend\"), new Tag(\"male\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\", \"male\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // person has one of the tags"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsPredicate(Arrays.asList(new Tag(\"prof\"), new Tag(\"male\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\", \"male\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test public void test_personDoesNotHaveTags_returnFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        PersonHasTagsPredicate predicate \u003d new PersonHasTagsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // person does not have the matching tag"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsPredicate(Arrays.asList(new Tag(\"prof\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\", \"male\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // person does not have any of the matching tags"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsPredicate(Arrays.asList(new Tag(\"prof\"), new Tag(\"female\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\", \"male\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        // mixed-case tags"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        predicate \u003d new PersonHasTagsPredicate(Arrays.asList(new Tag(\"Male\"), new Tag(\"maLe\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\", \"male\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.person.exceptions.PersonTagConstraintException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    //@@author royleochan"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    //------------- Tests for parseTags -------------//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void parseTags() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // EP: prof tag -\u003e returns PROFESSOR PersonType"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(new PersonBuilder().withName(\"Test\").withEmail(\"Test@gmail.com\").withPhone(\"9001100\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .withTags(\"prof\").build().getPersonType() \u003d\u003d Person.PersonType.PROFESSOR);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // EP: ta tag -\u003e returns TA PersonType"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(new PersonBuilder().withName(\"Test\").withEmail(\"Test@gmail.com\").withPhone(\"9001100\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .withTags(\"ta\").build().getPersonType() \u003d\u003d Person.PersonType.TA);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // EP: prof and ta tag -\u003e throws PersonTagConstraintException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertThrows(PersonTagConstraintException.class, () -\u003e new PersonBuilder().withName(\"Test\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .withEmail(\"Test@gmail.com\").withPhone(\"9001100\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .withTags(\"ta\", \"prof\").build());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // EP: all other tags -\u003e returns CONTACT PersonType"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(new PersonBuilder().withName(\"Test\").withEmail(\"Test@gmail.com\").withPhone(\"9001100\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .withTags(\"blah\").build().getPersonType() \u003d\u003d Person.PersonType.CONTACT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // EP: no tag -\u003e returns CONTACT PersonType"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(new PersonBuilder().withName(\"Test\").withEmail(\"Test@gmail.com\").withPhone(\"9001100\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                .build().getPersonType() \u003d\u003d Person.PersonType.CONTACT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // different phone and email but same name -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 1,
      "-": 85,
      "royleochan": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void contains_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains((Name) null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains((Person) null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 166,
      "royleochan": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, invalidTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "royleochan": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        JsonMeetingBookStorage meetingBookStorage \u003d new JsonMeetingBookStorage(getTempFilePath(\"mb\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        JsonModuleBookStorage moduleBookStorage \u003d new JsonModuleBookStorage(getTempFilePath(\"md\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, meetingBookStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            moduleBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void meetingBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingBook original \u003d getTypicalMeetingBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        storageManager.saveMeetingBook(original);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        ReadOnlyMeetingBook retrieved \u003d storageManager.readMeetingBook().get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertEquals(original, new MeetingBook(retrieved));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public void getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        assertNotNull(storageManager.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 22,
      "EkamSinghPandher": 3,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditMeetingDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.logic.commands.EditMeetingCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class EditMeetingDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private EditMeetingCommand.EditMeetingDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public EditMeetingDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        descriptor \u003d new EditMeetingCommand.EditMeetingDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public EditMeetingDescriptorBuilder(EditMeetingCommand.EditMeetingDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.descriptor \u003d new EditMeetingCommand.EditMeetingDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Returns an {@code EditMeetingDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public EditMeetingDescriptorBuilder(Meeting meeting) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        descriptor \u003d new EditMeetingCommand.EditMeetingDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        descriptor.setMeetingName(meeting.getMeetingName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        descriptor.setDate(meeting.getDate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        descriptor.setTime(meeting.getTime());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        descriptor.setMemberNames(meeting.getParticipants().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                .map(person -\u003e person.getName()).collect(Collectors.toSet()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Sets the {@code MeetingName} of the {@code EditMeetingDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public EditMeetingDescriptorBuilder withMeetingName(String meetingName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        descriptor.setMeetingName(new MeetingName(meetingName));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Sets the {@code Date} of the {@code EditMeetingDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public EditMeetingDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Sets the {@code Time} of the {@code EditMeetingDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public EditMeetingDescriptorBuilder withTime(String time) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        descriptor.setTime(new Time(time));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Parses the {@code names} into a {@code Set\u003cName\u003e} and set it to the {@code EditMeetingDescriptor}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public EditMeetingDescriptorBuilder withMembers(String... names) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        Set\u003cName\u003e personNameSet \u003d Stream.of(names).map(Name::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        descriptor.setMemberNames(personNameSet);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public EditMeetingCommand.EditMeetingDescriptor build() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditModuleDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.logic.commands.EditModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class EditModuleDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private EditModuleCommand.EditModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public EditModuleDescriptorBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        descriptor \u003d new EditModuleCommand.EditModuleDescriptor();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public EditModuleDescriptorBuilder(EditModuleCommand.EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.descriptor \u003d new EditModuleCommand.EditModuleDescriptor(descriptor);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Returns an {@code EditModuleDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public EditModuleDescriptorBuilder(Module module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        descriptor \u003d new EditModuleCommand.EditModuleDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        descriptor.setModuleName(module.getModuleName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        descriptor.setMemberNames(module.getClassmates().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "                .map(person -\u003e person.getName()).collect(Collectors.toSet()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Sets the {@code ModuleName} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public EditModuleDescriptorBuilder withModuleName(String moduleName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        descriptor.setModuleName(new ModuleName(moduleName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Parses the {@code names} into a {@code Set\u003cName\u003e} and set it to the {@code EditModuleDescriptor}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public EditModuleDescriptorBuilder withMembers(String... names) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        Set\u003cName\u003e personNameSet \u003d Stream.of(names).map(Name::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        descriptor.setMemberNames(personNameSet);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public EditModuleCommand.EditModuleDescriptor build() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MeetingBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class MeetingBookBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private MeetingBook meetingBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingBookBuilder() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetingBook \u003d new MeetingBook();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingBookBuilder(MeetingBook meetingBook) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.meetingBook \u003d meetingBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingBookBuilder withMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetingBook.addMeeting(meeting);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingBook build() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return meetingBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MeetingBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import seedu.address.model.commons.SpecialName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.MeetingName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class MeetingBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String DEFAULT_MODULE \u003d \"CS1100\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Weekly Meeting\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2020-10-03\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"10:00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final String DEFAULT_MEMBERS \u003d \"Alex Yeoh\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private MeetingName meetingName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    private Set\u003cPerson\u003e members;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Set\u003cSpecialName\u003e agendas \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Set\u003cSpecialName\u003e notes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        module \u003d SampleDataUtil.getModule(DEFAULT_MODULE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetingName \u003d new MeetingName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        time \u003d new Time(DEFAULT_TIME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        members \u003d SampleDataUtil.getPersonSet(DEFAULT_MEMBERS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Initializes the MeetingBuilder with the data of {@code meetingToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingBuilder(Meeting meetingToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        module \u003d meetingToCopy.getModule();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        meetingName \u003d meetingToCopy.getMeetingName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        date \u003d meetingToCopy.getDate();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        time \u003d meetingToCopy.getTime();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        members \u003d meetingToCopy.getParticipants();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Sets the {@code Module} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingBuilder withModule(Module module) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Sets the {@code MeetingName} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingBuilder withName(String name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.meetingName \u003d new MeetingName(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Sets the {@code Date} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingBuilder withDate(String date) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Sets the {@code Time} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingBuilder withTime(String time) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.time \u003d new Time(time);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     * Sets the {@code Members} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public MeetingBuilder withMembers(Set\u003cPerson\u003e members) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        this.members \u003d members;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public Meeting build() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new Meeting(module, meetingName, date, time, members, agendas, notes);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 91,
      "royleochan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "//@@author EkamSinghPandher"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class ModuleBookBuilder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private ModuleBook moduleBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ModuleBookBuilder() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        moduleBook \u003d new ModuleBook();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ModuleBookBuilder(ModuleBook moduleBook) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.moduleBook \u003d moduleBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ModuleBookBuilder withModule(Module module) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        moduleBook.addModule(module);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ModuleBook build() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return moduleBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "//@@author EkamSinghPandher"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"CS2103\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private ModuleName moduleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    private Set\u003cPerson\u003e members;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        moduleName \u003d new ModuleName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        members \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code meetingToCopy}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        moduleName \u003d moduleToCopy.getModuleName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        members \u003d moduleToCopy.getClassmates();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Sets the {@code ModuleName} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ModuleBuilder withName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.moduleName \u003d new ModuleName(name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     * Sets the {@code Members} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public ModuleBuilder withMembers(Set\u003cPerson\u003e members) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        this.members \u003d members;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return new Module(moduleName, members);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EkamSinghPandher": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Sally Toh\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"sally@yahoo.com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static final String DEFAULT_TAGS \u003d \"classmate\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new Person(name, phone, email, tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 2,
      "-": 79,
      "royleochan": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand.TagPersonDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static String getTagPersonDescriptorDetails(TagPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TagPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand.TagPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class TagPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private TagPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public TagPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        descriptor \u003d new TagPersonDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public TagPersonDescriptorBuilder(TagPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.descriptor \u003d new TagPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public TagPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        descriptor \u003d new TagPersonDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public TagPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public TagPersonDescriptor build() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalMeetings.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gloon99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_CM1111_MEETING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEETING_NAME_CM1111_MEETING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_CM1111_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CM1111;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2100;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2102;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2104;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICIA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "public class TypicalMeetings {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Meeting CS1100_MEETING \u003d new MeetingBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withName(\"Weekly Meeting\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withDate(\"2020-01-05\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withTime(\"13:00\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Meeting CS1100_NO_MEMBERS \u003d new MeetingBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withName(\"Weekly Meeting\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withDate(\"2020-01-05\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withTime(\"13:00\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(ALICE)))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    // Edited name from Alice Pauline to Alicia"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Meeting CS1100_EDITED_MEMBER \u003d new MeetingBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withName(\"Weekly Meeting\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withDate(\"2020-01-05\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withTime(\"13:00\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(ALICIA)))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Meeting CS2100_MEETING \u003d new MeetingBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withModule(CS2100)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withName(\"CS2100 Meeting\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withDate(\"2020-02-02\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            .withTime(\"10:00\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(BENSON)))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Meeting CS2101_MEETING \u003d new MeetingBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withModule(CS2101)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withName(\"CS2101 Meeting\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withDate(\"2020-03-03\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withTime(\"11:00\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(CARL)))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Meeting CS2102_MEETING \u003d new MeetingBuilder()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withModule(CS2102)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withName(\"CS2102 Meeting\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withDate(\"2020-04-04\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withTime(\"12:00\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(DANIEL)))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Meeting CS2102_MEETING_DUPLICATE_NAME \u003d new MeetingBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withModule(CS2102)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withName(\"CS2102 Meeting 2\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withDate(\"2020-04-04\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withTime(\"12:00\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(DANIEL)))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Meeting CS2104_MEETING \u003d new MeetingBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withModule(CS2104)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withName(\"CS2104 Meeting\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withDate(\"2020-05-06\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withTime(\"14:00\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(ELLE)))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Meeting CM1111_MEETING \u003d new MeetingBuilder()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withModule(CM1111)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withName(VALID_MEETING_NAME_CM1111_MEETING)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withDate(VALID_DATE_CM1111_MEETING)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withTime(VALID_TIME_CM1111_MEETING)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(AMY)))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    // meeting has no members"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static MeetingBook getTypicalMeetingBook() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingBook mb \u003d new MeetingBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (Meeting meeting : getTypicalMeetings()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            mb.addMeeting(meeting);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return mb;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    // meeting has one member"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static MeetingBook getTypicalMeetingBookWithMember() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        MeetingBook mb \u003d new MeetingBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        for (Meeting meeting : getTypicalMeetingsWithMembers()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            mb.addMeeting(meeting);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return mb;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    // meeting has edited member"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static MeetingBook getTypicalMeetingBookWithEditedMember() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        MeetingBook mb \u003d new MeetingBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        for (Meeting meeting : getTypicalMeetingsWithEditedMember()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            mb.addMeeting(meeting);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return mb;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    // meeting has duplicate name"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static MeetingBook getTypicalMeetingBookWithDuplicateName() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        MeetingBook mb \u003d new MeetingBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (Meeting meeting : getTypicalMeetingsWithDuplicateName()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            mb.addMeeting(meeting);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return mb;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static List\u003cMeeting\u003e getTypicalMeetings() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2100_MEETING, CS2101_MEETING, CS2102_MEETING));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static List\u003cMeeting\u003e getTypicalMeetingsWithMembers() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS1100_NO_MEMBERS));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static List\u003cMeeting\u003e getTypicalMeetingsWithEditedMember() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS1100_EDITED_MEMBER));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static List\u003cMeeting\u003e getTypicalMeetingsWithDuplicateName() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                Arrays.asList(CS2100_MEETING, CS2101_MEETING, CS2102_MEETING,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gloon99"
        },
        "content": "                        CS2102_MEETING_DUPLICATE_NAME));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gloon99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 116,
      "royleochan": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModules.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gloon99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final Module CS1000 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            .withName(\"CS1000\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(AMY))).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static final Module CS1001 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            .withName(\"CS1000\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(BOB))).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Module CS2100 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withName(\"CS2100\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(BENSON, GEORGE))).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Module CS2101 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withName(\"CS2101\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(CARL))).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Module CS2102 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withName(\"CS2102\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(DANIEL))).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Module CS2104 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withName(\"CS2104\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(ELLE))).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Module CS2105 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withName(\"CS2105\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(FIONA))).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static final Module CM1111 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withName(\"CM1111\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            .withMembers(new HashSet\u003c\u003e(Arrays.asList(AMY, BOB))).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static ModuleBook getTypicalModuleBook() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        ModuleBook mb \u003d new ModuleBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "            mb.addModule(module);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "        return mb;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2100, CS2101, CS2102, CS2104));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EkamSinghPandher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 30,
      "EkamSinghPandher": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static final Person ALICIA \u003d new PersonBuilder().withName(\"Alicia\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            .withEmail(\"heinz@example.com\").withTags().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            .withEmail(\"werner@example.com\").withTags().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            .withEmail(\"lydia@example.com\").withTags().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            .withEmail(\"anna@example.com\").withTags().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            .withEmail(\"stefan@example.com\").withTags().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            .withEmail(\"hans@example.com\").withTags().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static AddressBook getDeletedTypicalAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gloon99"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static AddressBook getEditedTypicalAddressBook() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        for (Person person : getEditedTypicalPersons()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    public static List\u003cPerson\u003e getDeletedTypicalPersons() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gloon99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gloon99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gloon99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static List\u003cPerson\u003e getEditedTypicalPersons() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICIA, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gloon99": 12,
      "jerrylchong": 6,
      "-": 65,
      "royleochan": 18
    }
  }
]
