[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W13-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W13-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "* This is a project for CS2103T, an NUS module. Its intended usage is for making flashcards for GER1000, another NUS module."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "* It is named `Bagel` because we thought it was catchy."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "* For the detailed documentation of this project, see the **[Bagel Product Website](https://ay2021s1-cs2103t-w13-2.github.io/tp/)**."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "ysr25": 3,
      "jacetjy": 5,
      "-": 3,
      "liuyxxy": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "### Liu Yuxi"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "\u003cimg src\u003d\"images/liuyxxy.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "[[github](http://github.com/liuyxxy)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* Role: Code Quality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "### Rachel Gina Abelarde"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "\u003cimg src\u003d\"images/rgabelarde.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "[[github](http://github.com/rgabelarde)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "[[portfolio](team/rgabelarde.md)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* Role: Deliverables and Deadlines"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "### Jace Tan"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "\u003cimg src\u003d\"images/jacetjy.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "[[github](http://github.com/jacetjy)]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "[[portfolio](team/jacetjy.md)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* Role: Integration"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "### Yong Shan Rong"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003cimg src\u003d\"images/ysr25.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "[[github](http://github.com/ysr25)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "[[portfolio](team/ysr25.md)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* Role: Documentation, Scheduling and Tracking"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "### Yuki Akizuki"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003cimg src\u003d\"images/yuki-cell.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "[[github](http://github.com/yuki-cell)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "[[portfolio](team/yuki-cell.md)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "* Role: Testing, Code Quality"
      }
    ],
    "authorContributionMap": {
      "ysr25": 9,
      "rgabelarde": 8,
      "jacetjy": 4,
      "-": 30,
      "liuyxxy": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a flashcard)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th flashcard in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new flashcard. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "Step 4. The user now decides that adding the flashcard was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the flashcard being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* computing students taking GER1000"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* has a need to manage a significant number of flashcards"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "Bagel is a flashcard application faster than a typical mouse/GUI driven app with additional functionality such as"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "adding tags, links, or comments. It targets computing students taking GER1000 because it is a module that requires"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "memorising many keywords and items, and computing students would prefer typing over other means of input."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "| `* * *`  | user                                       | add flashcards                 | memorise them                 |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "| `* * *`  | user                                       | delete my flashcards when I am done with them               | keep the list organised                                                                       |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "| `* * *`  | user                                       | edit a flashcard                |  rephrase or fix mistakes that I originally wrote                                   |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "| `* * *`  | user                                       | view individual flashcards          | read them |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "| `* * *`    | user                                       | view a list of sets of flashcards that I currently have   | not mix them up                |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "| `* * *`      | user  | “flip” through a set of flashcards           | memorise them                                                 |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "(For all use cases below, the **System** is `Bagel` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**Use case: UC01 - Finding a flashcard**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "1. User chooses to find a flashcard."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "2. User enters the keyword they would like to search for."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "3. Bagel finds the flashcard and shows a list of flashcards that contain that keyword."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ysr25"
        },
        "content": "* 2a. Bagel detects an error in the entered data."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * 2a1. Bagel requests for the correct data."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * 2a2. User enters new details."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * Steps 2a1-2a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "Use case resumes from step 3."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**Use case: UC02 - Editing a flashcard**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "1. User chooses to edit a flashcard."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "2. User enters ‘list’ to view indexes of flashcards."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "3. Bagel shows the list of flashcards."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "4. User enters the index of the flashcard they would like to edit, and the details to edit."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "5. Bagel edits the flashcard and shows the edited flashcard."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ysr25"
        },
        "content": "* 4a. Bagel detects an error in the entered data."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * 4a1. Bagel requests for the correct data."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * 4a2. User enters new details."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * Steps 4a1-4a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "Use case resumes from step 5."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**Use case: UC03 - Deleting a flashcard**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "1. User chooses to delete a flashcard."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "2. User enters ‘list’ to view indexes of flashcards."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "3. Bagel shows the list of flashcards."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "4. User enters the index of the flashcard they would like to delete."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "5. Bagel deletes the flashcard and shows the new list of flashcards."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ysr25"
        },
        "content": "* 4a. Bagel detects an error in the entered data."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * 4a1. Bagel requests for the correct data."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * 4a2. User enters new details."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * Steps 4a1-4a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "Use case resumes from step 5."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**Use case: UC04 - Flipping through flashcards**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "1. User chooses to flip through the list of flashcards."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "2. User enters ‘flip’ to start viewing from the first flashcard in the list."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "3. Bagel shows the first flashcard."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "4. User enters ‘flip’ to view the next flashcard in the list."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "5. Bagel shows the next flashcard."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "Steps 4-5 are repeated for each flashcard, until the user reaches the end of the list."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "6. Bagel shows the current list of flashcards."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ysr25"
        },
        "content": "* 2a/4a. Bagel detects an error in the entered data."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * 2a1/4a1. Bagel requests for the correct data."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * 2a2/4a2. User enters new details."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * Steps 2a1-2a2/4a1-4a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "Use case resumes from step 3/5."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "1. Bagel should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "2. Bagel should be able to hold up to 500 flashcards without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "3. Bagel should be intuitive to use for first time users."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "4. Bagel should be targeting users who can type fast and prefer typing over other means of input."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "5. Bagel should respond within two seconds."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "6. Bagel should show flashcards within one second of inputting the command."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "7. Any version of Bagel should function as long as the user has it installed."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "8. Bagel is expected to adhere to the CS2103T schedule."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "9. Bagel is not expected to quiz the user."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "10. Bagel should be for a single user."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "### Deleting a flashcard"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "1. Deleting a flashcard while all flashcards are being shown"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "   1. Prerequisites: List all flashcards using the `list` command. Multiple flashcards in the list."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "      Expected: No flashcard is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "ysr25": 22,
      "rgabelarde": 46,
      "-": 331,
      "liuyxxy": 29
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "Bagel is a **desktop app for managing flashcards, optimized for use via a Command Line Interface** (CLI)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "If you can type fast, Bagel can manage your flashcards faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "### Table of Contents"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "{:.no_toc}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "1. Ensure you have Java 11 or above installed in your computer."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "2. Download the latest flashcard.jar from [here](https://github.com/AY2021S1-CS2103T-W13-2/tp/releases)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for Bagel."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "4. Double-click the file to start the app. The GUI should appear in a few seconds. Note how the app contains some sample data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing help and pressing Enter will open the help window."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Some example commands you can try:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * `list` : Lists all flashcards."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * `add t/Data Analysis d/Definition of data analysis: xxxxxx` : Adds a flashcard with the title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        \u0027Data Analysis\u0027 and description of \u0027Definition of data analysis: xxxxxx\u0027 to the list of flashcards"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * `delete 3` : Deletes the 3rd flashcard shown in the current flashcards set."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * `view 3` : Shows the 3rd flashcard shown in the current flashcards set."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * `edit 2 t/New description` : Edits the title of 2nd existing flashcard of the current set to become \u0027New description\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * `flip` : Flips from the current flashcard to next flashcard in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * `exit` : Exits the app."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "Refer to the Features below for details of each command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "  e.g. in `add t/TITLE`, TITLE is the parameter which can be used"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "* User should supply the number of the flashcard behind commands.\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "  e.g. `add 1`, `delete 10`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "### Adding a flashcard: `add`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "Adds a flashcard to the total list of flashcards."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* Adds a flashcard with a title and description"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* Title and description must be entered"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "Format: `add t/TITLE d/DESCRIPTION`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* `add t/Data Analysis d/Definition of data analysis: xxxxxx`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* `add t/p-value d/If p value \u003c 0.05, xxxx; Else, xxxx`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "### Deleting a flashcard : `delete`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "Deletes the specified flashcard from the total list of flashcards."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "* Deletes the flashcard at the specified `INDEX`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* The index refers to the index number shown in the displayed flashcards list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ysr25"
        },
        "content": "### Editing a flashcard : `edit`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Edits an existing flashcard."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Format: `edit INDEX [t/TITLE] [d/DESCRIPTION]`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "* Edits the flashcard at the specified `INDEX`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "* The index refers to the index number shown in the displayed flashcard list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ysr25"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ysr25"
        },
        "content": "*  `edit 1 t/Data analysis` Edits the title of the 1st flashcard to be `Data analysis`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ysr25"
        },
        "content": "*  `edit 1 t/p-value d/probability of ...` Edits the title and the description of the 1st flashcard to be `p-value` and `probability of ...` respectively."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "### Viewing a flashcard: `view`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "Show an existing flashcard in the current list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "Format: `view INDEX`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "* The index refers to the index number shown in the displayed flashcards list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "### Viewing all flashcards : `list`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "Shows a list of all flashcards."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ysr25"
        },
        "content": "### Flipping through flashcards : `flip`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Flips from current flashcard to next flashcard in the list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Format: `flip`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**Q**: Placeholder Question\u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**A**: Placeholder Answer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**Add** | `add t/TITLE d/DESCRIPTION`\u003cbr\u003e e.g., `add t/Data Analysis d/The definition of Data Analysis is ...`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**Edit** | `edit INDEX t/TITLE d/DESCRIPTION`\u003cbr\u003e e.g.,`edit 1 t/Data analysis`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**View** | `view INDEX`\u003cbr\u003e e.g., `view 1`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**Flip** | `flip`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "ysr25": 23,
      "rgabelarde": 23,
      "-": 74,
      "liuyxxy": 15
    }
  },
  {
    "path": "docs/team/jacetjy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "title: Jace Tan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "Bagel is a desktop flashcard application used for studying and memorisation purposes. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "* **New Feature**: Added a list command that allows the user to view the list of flashcards."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "  * Managed release `v1.2` on GitHub"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    * Added documentation for the feature `list`: [\\#72]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of the feature `exit`: [\\#74]()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    * Added implementation details of the `list` feature."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#78](https://github.com/nus-cs2103-AY2021S1/ip/pull/78), [\\#61](https://github.com/nus-cs2103-AY2021S1/ip/pull/61)"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 27
    }
  },
  {
    "path": "docs/team/rgabelarde.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "title: Rachel Gina\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "## Project: Bagel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "Bagel is a desktop flashcard application used for studying and memorisation purposes. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* **New Feature**: Added an add command that allows the user to view the list of flashcards."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "  * What it does: allows the user to add a flashcard to the total list of flashcards."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "  * Justification: This feature is a basic critical function for an MVP for Bagel, without this function, there will be no way to have any flashcards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* **New Feature**: Added a delete command that allows the user to delete a specified index of a flashcard from the list of flashcards."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "  * What it does: allows the user to delete a flashcard from the list of flashcards."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "  * Justification: This feature is a basic critical function for Bagel, without this function, there will be no way to remove any flashcards."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "  * Managed release `v1.2` on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    * Added documentation for the features `add` and `delete` [\\#00]()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    * Added implementation details of the `add` and `delete` feature."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#269](https://github.com/nus-cs2103-AY2021S1/ip/pull/269), [\\#326](https://github.com/nus-cs2103-AY2021S1/ip/pull/326)"
      }
    ],
    "authorContributionMap": {
      "rgabelarde": 32
    }
  },
  {
    "path": "docs/team/ysr25.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "title: Yong Shan Rong\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "## Project: Bagel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Bagel is a desktop flashcard application based off [AddressBook - Level 3](https://se-education.org/addressbook-level3/). The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    * Updated documentation for the feature `edit`"
      }
    ],
    "authorContributionMap": {
      "ysr25": 16
    }
  },
  {
    "path": "docs/team/yuki-cell.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "title: Yuki Akizuki\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "## Project: Bagel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "Bagel is a desktop flashcard application based off [AddressBook - Level 3](https://se-education.org/addressbook-level3/). The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    * Updated documentation for the feature `flip`"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 16
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * Changes the remark of an existing flashcard in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the flashcard identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            + \"by the index number used in the last flashcard listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * @param index of the flashcard in the filtered flashcard list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * @param remark of the flashcard to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of flashcard data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the flashcard’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a flashcard."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "Create a new `Remark` in `seedu.address.model.flashcard`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each flashcard."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public PersonCard(Person flashcard, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    remark.setText(flashcard.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        Person flashcardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        Person editedFlashcard \u003d new Person(flashcardToEdit.getName(), flashcardToEdit.getPhone(), flashcardToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                flashcardToEdit.getAddress(), remark, flashcardToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        model.setPerson(flashcardToEdit, editedFlashcard);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedFlashcard));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * {@code flashcardToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    private String generateSuccessMessage(Person flashcardToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return String.format(message, flashcardToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "-": 376,
      "liuyxxy": 18
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.flashcard.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "  \"flashcards\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "liuyxxy": 2
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "       Person flashcardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "       Person editedFlashcard \u003d createEditedPerson(flashcardToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "       if (!flashcardToEdit.isSamePerson(editedFlashcard) \u0026\u0026 model.hasPerson(editedFlashcard)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "       model.setPerson(flashcardToEdit, editedFlashcard);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedFlashcard));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "       flashcards.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "-": 244,
      "liuyxxy": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Main entry point."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * @param args Entry point."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 1,
      "-": 25,
      "liuyxxy": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.Bagel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.ReadOnlyBagel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.storage.BagelStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.storage.JsonBagelStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Bagel ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        BagelStorage bagelStorage \u003d new JsonBagelStorage(userPrefs.getBagelFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        storage \u003d new StorageManager(bagelStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s Bagel and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * The data from the sample Bagel will be used instead if {@code storage}\u0027s Bagel is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * or an empty Bagel will be used instead if errors occur when reading {@code storage}\u0027s Bagel."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Optional\u003cReadOnlyBagel\u003e bagelOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        ReadOnlyBagel initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            bagelOptional \u003d storage.readBagel();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            if (!bagelOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Bagel\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            initialData \u003d bagelOptional.orElseGet(SampleDataUtil::getSampleBagel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Bagel\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            initialData \u003d new Bagel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Bagel\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            initialData \u003d new Bagel();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Bagel\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        logger.info(\"Starting Bagel \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Bagel ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 21,
      "yuki-cell": 2,
      "-": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    private static final String LOG_FILE \u003d \"bagel.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "liuyxxy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX \u003d \"The flashcard index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final String MESSAGE_FLASHCARDS_LISTED_OVERVIEW \u003d \"%1$d flashcards listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rgabelarde": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.ReadOnlyBagel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "     * @see seedu.address.model.Model#getBagel()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    ReadOnlyBagel getBagel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of flashcard */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "     * Returns the user prefs\u0027 bagel file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    Path getBagelFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 1,
      "rgabelarde": 7,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.logic.parser.BagelParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.ReadOnlyBagel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    private final BagelParser bagelParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        bagelParser \u003d new BagelParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Command command \u003d bagelParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            storage.saveBagel(model.getBagel());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public ReadOnlyBagel getBagel() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        return model.getBagel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        return model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public Path getBagelFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        return model.getBagelFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 1,
      "rgabelarde": 12,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": " * Adds a flashcard to the bagel."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard to bagel. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            + PREFIX_DESC + \"DESCRIPTION \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            //+ \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            + PREFIX_TITLE + \"Definition of p-value \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            + PREFIX_DESC + \"P-value is xxxdsfajksdnf \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    //        + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    //        + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New flashcard added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in bagel\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    private final Flashcard toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Flashcard}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public AddCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        toAdd \u003d flashcard;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        if (model.hasFlashcard(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        model.addFlashcard(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rgabelarde": 21,
      "-": 38,
      "liuyxxy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * Deletes a flashcard identified using it\u0027s displayed index from Bagel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            + \": Deletes the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final String MESSAGE_DELETE_FLASHCARD_SUCCESS \u003d \"Deleted Flashcard: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Flashcard flashcardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        model.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 1,
      "rgabelarde": 7,
      "-": 44,
      "liuyxxy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.flashcard.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.flashcard.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the flashcard identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            + \"by the index number used in the displayed flashcard list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            + \"[\" + PREFIX_DESC + \"DESCRIPTION] \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            + PREFIX_TITLE + \"91234567 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            + PREFIX_DESC + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String MESSAGE_EDIT_FLASHCARD_SUCCESS \u003d \"Edited Flashcard: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in Bagel.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private final EditFlashcardDescriptor editFlashcardDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param editFlashcardDescriptor details to edit the person with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public EditCommand(Index index, EditFlashcardDescriptor editFlashcardDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        requireNonNull(editFlashcardDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.editFlashcardDescriptor \u003d new EditFlashcardDescriptor(editFlashcardDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard flashcardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard editedFlashcard \u003d createEditedFlashcard(flashcardToEdit, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (!flashcardToEdit.isSameFlashcard(editedFlashcard) \u0026\u0026 model.hasFlashcard(editedFlashcard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        model.setFlashcard(flashcardToEdit, editedFlashcard);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        model.updateFilteredFlashcardList(Model.PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * edited with {@code editFlashcardDescriptor}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    private static Flashcard createEditedFlashcard(Flashcard flashcardToEdit,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                                                   EditFlashcardDescriptor editFlashcardDescriptor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assert flashcardToEdit !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Title updatedTitle \u003d editFlashcardDescriptor.getTitle().orElse(flashcardToEdit.getTitle());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        Description updatedDescription \u003d editFlashcardDescriptor.getDescription()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                .orElse(flashcardToEdit.getDescription());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // Set\u003cTag\u003e updatedTags \u003d editFlashcardDescriptor.getTags().orElse(flashcardToEdit.getTags());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Flashcard(updatedTitle, updatedDescription);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                \u0026\u0026 editFlashcardDescriptor.equals(e.editFlashcardDescriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static class EditFlashcardDescriptor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        public EditFlashcardDescriptor() {}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        public EditFlashcardDescriptor(EditFlashcardDescriptor toCopy) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            // setTags(toCopy.tags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, description);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        ///**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        // * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        // * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        // */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        //     this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        ///**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        // * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        // * if modification is attempted."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        // * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        // */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        //     return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            if (!(other instanceof EditFlashcardDescriptor)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            EditFlashcardDescriptor e \u003d (EditFlashcardDescriptor) other;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            // \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 61,
      "jacetjy": 17,
      "-": 116,
      "liuyxxy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FlipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * Flip and show next flashcard in the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class FlipCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"flip\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Flipped flashcard\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    // added ----"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private static int currentIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private static int nextIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        ObservableList\u003cFlashcard\u003e flashcards \u003d model.getBagel().getFlashcardList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        ObservableList\u003cFlashcard\u003e filteredFlashcards \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        // find the index of flashcard currently shown"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        currentIndex \u003d flashcards.indexOf(filteredFlashcards.get(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        // find index of next flashcard"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        if (filteredFlashcards.size() !\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            nextIndex \u003d currentIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else if ((flashcards.size() - 1) \u003c\u003d currentIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            nextIndex \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            nextIndex \u003d currentIndex + 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Predicate\u003cFlashcard\u003e nextFlashcard \u003d flashcard -\u003e flashcards.indexOf(flashcard) \u003d\u003d nextIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        model.updateFilteredFlashcardList(nextFlashcard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 10,
      "rgabelarde": 1,
      "yuki-cell": 34,
      "jacetjy": 1,
      "liuyxxy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all flashcards\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * Displays the identified flashcard using it\u0027s displayed index from Bagel to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            + \": Displays the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public static final String MESSAGE_VIEW_FLASHCARD_SUCCESS \u003d \"Displaying flashcard: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public ViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        Flashcard flashcardToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Predicate\u003cFlashcard\u003e predicateViewFlashcard \u003d flashcard -\u003e flashcard \u003d\u003d flashcardToView;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        model.viewFlashcard(predicateViewFlashcard);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_FLASHCARD_SUCCESS));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                || (other instanceof ViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 2,
      "liuyxxy": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.flashcard.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.flashcard.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESC);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DESC)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESC).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        // Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Flashcard flashcard \u003d new Flashcard(title, description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return new AddCommand(flashcard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rgabelarde": 13,
      "-": 39,
      "liuyxxy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BagelParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.logic.commands.FlipCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "public class BagelParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    @SuppressWarnings(\"checkstyle:CommentsIndentation\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        case FlipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            return new FlipCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 1,
      "rgabelarde": 3,
      "yuki-cell": 2,
      "-": 64,
      "liuyxxy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final Prefix PREFIX_DESC \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    // public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rgabelarde": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESC);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditFlashcardDescriptor editFlashcardDescriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            editFlashcardDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESC).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            editFlashcardDescriptor"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                    .setDescription(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESC).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editFlashcardDescriptor::setTags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (!editFlashcardDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new EditCommand(index, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    // * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    // * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    // * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     assert tags !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //    if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //        return Optional.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //    Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //    return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 21,
      "jacetjy": 12,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.flashcard.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.flashcard.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        String trimmedDesc \u003d description.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        if (!Description.isValidDescription(trimmedDesc)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        return new Description(trimmedDesc);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//        requireNonNull(tag);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//        requireNonNull(tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//        for (String tagName : tags) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//        return tagSet;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "rgabelarde": 43,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            return new ViewCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liuyxxy": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Bagel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.UniqueFlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " * Wraps all data at the top level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " * Duplicates are not allowed (by .isSameFlashcard comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "public class Bagel implements ReadOnlyBagel {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    private final UniqueFlashcardList flashcards;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        flashcards \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public Bagel() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Creates a Bagel using the Flashcards in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public Bagel(ReadOnlyBagel toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Replaces the contents of the flashcard list with {@code flashcards}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        this.flashcards.setFlashcards(flashcards);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Resets the existing data of this {@code Bagel} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void resetData(ReadOnlyBagel newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        setFlashcards(newData.getFlashcardList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    //// flashcard-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Returns true if a flashcard with the same information as {@code flashcard} exists in the list of flashcards."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return flashcards.contains(flashcard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Adds a flashcard to the list of flashcards."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * The flashcard must not already exist in the list of flashcards."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void addFlashcard(Flashcard f) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        flashcards.add(f);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Replaces the given flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * {@code target} must exist in the list of flashcards."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * The information of {@code editedFlashcard} must not be the same as another existing flashcard in the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * list of flashcards."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        requireNonNull(editedFlashcard);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        flashcards.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Removes {@code key} from this {@code list of flashcards}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * {@code key} must exist in the list of flashcards."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void removeFlashcard(Flashcard key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        flashcards.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return flashcards.asUnmodifiableObservableList().size() + \" flashcards\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return flashcards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                || (other instanceof Bagel // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                \u0026\u0026 flashcards.equals(((Bagel) other).flashcards));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return flashcards.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 119,
      "liuyxxy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    Predicate\u003cFlashcard\u003e PREDICATE_SHOW_ALL_FLASHCARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Returns the user prefs\u0027 Bagel file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    Path getBagelFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Sets the user prefs\u0027 Bagel file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    void setBagelFilePath(Path bagelFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Replaces Bagel data with the data in {@code bagel}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    void setBagel(ReadOnlyBagel bagel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /** Returns the Bagel */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    ReadOnlyBagel getBagel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Returns true if a flashcard with the same information as {@code flashcard} exists in the Bagel."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    boolean hasFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Deletes the given flashcard."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * The flashcard must exist in the Bagel."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    void deleteFlashcard(Flashcard target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Adds the given flashcard."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * {@code flashcard} must not already exist in the Bagel."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    void addFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Replaces the given flashcard {@code target} with {@code editedFlashcard}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * {@code target} must exist in the list of flashcards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * The flashcard information of {@code editedFlashcard} must not be the same as another existing flashcard"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * in the Bagel."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    void setFlashcard(Flashcard target, Flashcard editedFlashcard);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Displays the required flashcard by updating the filter flashcard list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    void viewFlashcard(Predicate\u003cFlashcard\u003e predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /** Returns an unmodifiable view of the filtered flashcard list */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Updates the filter of the filtered flashcard list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 27,
      "-": 61,
      "liuyxxy": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    private final Bagel bagel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    private final FilteredList\u003cFlashcard\u003e filteredFlashcards;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Initializes a ModelManager with the given Bagel and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public ModelManager(ReadOnlyBagel bagel, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        requireAllNonNull(bagel, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        logger.fine(\"Initializing with Bagel: \" + bagel + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        this.bagel \u003d new Bagel(bagel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        filteredFlashcards \u003d new FilteredList\u003c\u003e(this.bagel.getFlashcardList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        this(new Bagel(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public Path getBagelFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return userPrefs.getBagelFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void setBagelFilePath(Path bagelFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        requireNonNull(bagelFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        userPrefs.setBagelFilePath(bagelFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Bagel \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void setBagel(ReadOnlyBagel bagel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        this.bagel.resetData(bagel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public ReadOnlyBagel getBagel() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return bagel;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return bagel.hasFlashcard(flashcard);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        bagel.removeFlashcard(target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        bagel.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        bagel.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void viewFlashcard(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Flashcard} backed by the internal list of"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * {@code versionedBagel}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return filteredFlashcards;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        filteredFlashcards.setPredicate(predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return bagel.equals(other.bagel)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                \u0026\u0026 filteredFlashcards.equals(other.filteredFlashcards);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 39,
      "-": 112,
      "liuyxxy": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyBagel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "public interface ReadOnlyBagel {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Returns an unmodifiable view of the flashcards list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * This list will not contain any duplicate flashcards."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFlashcardList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 16,
      "liuyxxy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    Path getBagelFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    private Path bagelFilePath \u003d Paths.get(\"data\" , \"bagel.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        setBagelFilePath(newUserPrefs.getBagelFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public Path getBagelFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return bagelFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void setBagelFilePath(Path bagelFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        requireNonNull(bagelFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        this.bagelFilePath \u003d bagelFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                \u0026\u0026 bagelFilePath.equals(o.bagelFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return Objects.hash(guiSettings, bagelFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + bagelFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * Represents a Flashcard\u0027s description in Bagel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * Guarantees: immutable; is always valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?s)[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        // short circuit if same object, instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return other \u003d\u003d this || (other instanceof Description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // removed state check originally here"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 2,
      "jacetjy": 3,
      "liuyxxy": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Flashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * Represents a Flashcard in Bagel list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class Flashcard {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    //private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    //private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    //private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    //private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    //private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public Flashcard(Title title, Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        requireAllNonNull(title, description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    // * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    // * if modification is attempted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    //public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    //   return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Returns true if both flashcards of the same title have at least one other identity field that is the same."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * This defines a weaker notion of equality between two flashcards."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public boolean isSameFlashcard(Flashcard otherFlashcard) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        if (otherFlashcard \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return otherFlashcard !\u003d null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                \u0026\u0026 otherFlashcard.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                // temporarily uses Description to check for same flashcard."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                \u0026\u0026 (otherFlashcard.getDescription().equals(getDescription()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    // temporarily the same as isSameFlashcard"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        if (!(other instanceof Flashcard)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        Flashcard otherFlashcard \u003d (Flashcard) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return otherFlashcard.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                // temporarily uses Description to check for same flashcard."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                \u0026\u0026 otherFlashcard.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return Objects.hash(title, description);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 4,
      "liuyxxy": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * Represents a Flashcard\u0027s title in Bagel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            \"Titles can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    //public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?s)[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public final String fullTitle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        fullTitle \u003d title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return fullTitle;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                \u0026\u0026 fullTitle.equals(((Title) other).fullTitle)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return fullTitle.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 3,
      "jacetjy": 2,
      "liuyxxy": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/TitleContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(flashcard.getTitle().fullTitle, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liuyxxy": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/UniqueFlashcardList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * A list of flashcards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * A flashcard is considered unique by comparing using {@code Flashcard#isSameFlashcard(Flashcard)}. As such, adding"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * and updating of flashcards uses Flashcard#isSameFlashcard(Flashcard) for equality so as to ensure that the flashcard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * being added or updated is unique in terms of identity in the UniqueFlashcardList. However, the removal of a"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * flashcard uses Flashcard#equals(Object) so as to ensure that the flashcard with exactly the same fields will be"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * @see Flashcard#isSameFlashcard(Flashcard)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class UniqueFlashcardList implements Iterable\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public boolean contains(Flashcard toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFlashcard);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void add(Flashcard toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Replaces the flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the same as another existing flashcard in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        if (!target.isSameFlashcard(editedFlashcard) \u0026\u0026 contains(editedFlashcard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        internalList.set(index, editedFlashcard);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void remove(Flashcard toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void setFlashcards(UniqueFlashcardList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Replaces the contents of this list with {@code flashcards}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        requireAllNonNull(flashcards);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        if (!flashcardsAreUnique(flashcards)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        internalList.setAll(flashcards);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public Iterator\u003cFlashcard\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                || (other instanceof UniqueFlashcardList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueFlashcardList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     * Returns true if {@code flashcards} contains only unique flashcards."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    private boolean flashcardsAreUnique(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c flashcards.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                if (flashcards.get(i).isSameFlashcard(flashcards.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 2,
      "liuyxxy": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/exceptions/DuplicateFlashcardException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * Signals that the operation will result in duplicate Flashcards (Flashcards are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class DuplicateFlashcardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public DuplicateFlashcardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        super(\"Operation would result in duplicate flashcards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liuyxxy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/exceptions/FlashcardNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * Signals that the operation is unable to find the specified flashcard."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class FlashcardNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "liuyxxy": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.Bagel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.ReadOnlyBagel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " * Contains utility methods for populating {@code Bagel} with sample data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static Flashcard[] getSampleFlashcards() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return new Flashcard[] {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            new Flashcard(new Title(\"Types of Observational Studies\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                new Description(\"Prospective, Retrospective, Cross-sectional\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            new Flashcard(new Title(\"Types of Sampling Plan\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                new Description(\"Probability Sampling: simple random, systematic, stratified, cluster\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                        + \"Non-probability sampling: volunteer/self-selected, convenience, judgemental, quota\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            new Flashcard(new Title(\"Ecological Fallacy\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                new Description(\"Ecological fallacy is thinking that relationships observed for groups \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                        + \"will hold for individuals. E.g. if countries with more fat in the diet have higher rates of\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                        + \"breast cancer, then women who eat fatty foods must be more likely to get breast cancer.\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            new Flashcard(new Title(\"Atomistic fallacy\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                new Description(\"Atomistic fallacy is thinking that relation observed for individuals\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                        + \"will hold for groups. The atomistic fallacy arises because associations between two \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                        + \"variables at the individual level may differ from associations between analogous \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                        + \"variables measured at the group level. \")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            new Flashcard(new Title(\"Types of association\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                new Description(\"r \u003d 0: no linear association\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                        + \"r \u003e 0: positive association\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                        + \"r \u003c 0: negative association\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                        + \"r \u003d 1: perfect positive association\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                        + \"r \u003d -1: perfect negative association\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            new Flashcard(new Title(\"Odds Ratio(OR) and Risk Ratio(RR)\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                new Description(\"OR: odds(exp)/odds(unexp)\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                        + \"RR: risk(exp)/risk(unexp)\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static ReadOnlyBagel getSampleBagel() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        Bagel sampleBagel \u003d new Bagel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        for (Flashcard sampleFlashcard : getSampleFlashcards()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            sampleBagel.addFlashcard(sampleFlashcard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return sampleBagel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 35,
      "-": 27,
      "liuyxxy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/BagelStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.model.ReadOnlyBagel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Bagel}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public interface BagelStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    Path getBagelFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * Returns Bagel data as a {@link ReadOnlyBagel}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    Optional\u003cReadOnlyBagel\u003e readBagel() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @see #getBagelFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    Optional\u003cReadOnlyBagel\u003e readBagel(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * Saves the given {@link ReadOnlyBagel} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param bagel cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    void saveBagel(ReadOnlyBagel bagel) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @see #saveBagel(ReadOnlyBagel)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    void saveBagel(ReadOnlyBagel bagel, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFlashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.flashcard.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * Jackson-friendly version of {@link Flashcard}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "class JsonAdaptedFlashcard {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Flashcard\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcard} with the given flashcard details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public JsonAdaptedFlashcard(@JsonProperty(\"title\") String title, @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        //@JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        //if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        //    this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * Converts a given {@code Flashcard} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public JsonAdaptedFlashcard(Flashcard source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        title \u003d source.getTitle().fullTitle;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        //tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        //        .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        //        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * Converts this Jackson-friendly adapted flashcard object into the model\u0027s {@code Flashcard} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashcard."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public Flashcard toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        final List\u003cTag\u003e flashcardTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            flashcardTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(flashcardTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        return new Flashcard(modelTitle, modelDescription);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 4,
      "yuki-cell": 11,
      "-": 41,
      "liuyxxy": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonBagelStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.model.ReadOnlyBagel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * A class to access Bagel data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class JsonBagelStorage implements BagelStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonBagelStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public JsonBagelStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public Path getBagelFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public Optional\u003cReadOnlyBagel\u003e readBagel() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return readBagel(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * Similar to {@link #readBagel()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public Optional\u003cReadOnlyBagel\u003e readBagel(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        Optional\u003cJsonSerializableBagel\u003e jsonBagel \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                filePath, JsonSerializableBagel.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        if (!jsonBagel.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            return Optional.of(jsonBagel.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void saveBagel(ReadOnlyBagel bagel) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        saveBagel(bagel, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * Similar to {@link #saveBagel(ReadOnlyBagel)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void saveBagel(ReadOnlyBagel bagel, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        requireNonNull(bagel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBagel(bagel), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableBagel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.Bagel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.ReadOnlyBagel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * An Immutable Bagel that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "@JsonRootName(value \u003d \"bagel\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "class JsonSerializableBagel {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"Flashcard list contains duplicate flashcards.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Constructs a {@code JsonSerializableBagel} with the given flashcards."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public JsonSerializableBagel(@JsonProperty(\"flashcards\") List\u003cJsonAdaptedFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Converts a given {@code ReadOnlyBagel} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableBagel}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public JsonSerializableBagel(ReadOnlyBagel source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        flashcards.addAll(source.getFlashcardList().stream().map(JsonAdaptedFlashcard::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Converts this bagel into the model\u0027s {@code Bagel} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Bagel toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Bagel bagel \u003d new Bagel();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        for (JsonAdaptedFlashcard jsonAdaptedFlashcard : flashcards) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Flashcard flashcard \u003d jsonAdaptedFlashcard.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            if (bagel.hasFlashcard(flashcard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            bagel.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return bagel;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 59,
      "jacetjy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.ReadOnlyBagel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public interface Storage extends BagelStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    Path getBagelFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    Optional\u003cReadOnlyBagel\u003e readBagel() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    void saveBagel(ReadOnlyBagel bagel) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.ReadOnlyBagel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Manages storage of Bagel data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private BagelStorage bagelStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code BagelStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public StorageManager(BagelStorage bagelStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.bagelStorage \u003d bagelStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Bagel methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Path getBagelFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return bagelStorage.getBagelFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Optional\u003cReadOnlyBagel\u003e readBagel() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return readBagel(bagelStorage.getBagelFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Optional\u003cReadOnlyBagel\u003e readBagel(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return bagelStorage.readBagel(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void saveBagel(ReadOnlyBagel bagel) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        saveBagel(bagel, bagelStorage.getBagelFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void saveBagel(ReadOnlyBagel bagel, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        bagelStorage.saveBagel(bagel, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 17,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "         * @see seedu.bagel.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rgabelarde": 1,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FlashcardCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "// import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": " * An UI component that displays information of a {@code Flashcard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "public class FlashcardCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    private static final String FXML \u003d \"FlashcardList.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public final Flashcard flashcard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    // @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    // private FlowPane tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "     * Creates a {@code FlashcardCode} with the given {@code Flashcard} and index to display."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public FlashcardCard(Flashcard flashcard, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        title.setText(flashcard.getTitle().fullTitle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        description.setText(flashcard.getDescription().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        //flashcard.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        //        .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        //        .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        if (!(other instanceof FlashcardCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        FlashcardCard card \u003d (FlashcardCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                \u0026\u0026 flashcard.equals(card.flashcard);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rgabelarde": 12,
      "jacetjy": 1,
      "-": 47,
      "liuyxxy": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FlashcardListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": " * Panel containing the list of flashcards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "public class FlashcardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    private static final String FXML \u003d \"FlashcardListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FlashcardListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    private ListView\u003cFlashcard\u003e flashcardListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "     * Creates a {@code FlashcardListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public FlashcardListPanel(ObservableList\u003cFlashcard\u003e flashcardList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        flashcardListView.setItems(flashcardList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        flashcardListView.setCellFactory(listView -\u003e new FlashcardListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Flashcard} using a {@code FlashcardCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    class FlashcardListViewCell extends ListCell\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        protected void updateItem(Flashcard flashcard, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            super.updateItem(flashcard, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            if (empty || flashcard \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "                setGraphic(new FlashcardCard(flashcard, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rgabelarde": 46,
      "liuyxxy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    private FlashcardListPanel flashcardListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    private StackPane flashcardListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        flashcardListPanel \u003d new FlashcardListPanel(logic.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getBagelFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public FlashcardListPanel getFlashcardListPanel() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        return flashcardListPanel;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rgabelarde": 7,
      "-": 189
    }
  },
  {
    "path": "src/main/resources/view/FlashcardList.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "\u003c!--      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e--\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "\u003c!--      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e--\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "\u003c!--      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e--\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 4,
      "-": 32,
      "liuyxxy": 1
    }
  },
  {
    "path": "src/main/resources/view/FlashcardListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "  \u003cListView fx:id\u003d\"flashcardListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        \u003cVBox fx:id\u003d\"flashcardList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "          \u003cStackPane fx:id\u003d\"flashcardListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 1,
      "-": 58,
      "liuyxxy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.ReadOnlyBagel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.storage.JsonBagelStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        JsonBagelStorage bagelStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                new JsonBagelStorage(temporaryFolder.resolve(\"bagel.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        StorageManager storage \u003d new StorageManager(bagelStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        JsonBagelStorage bagelStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                new JsonBagelIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionBagel.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        StorageManager storage \u003d new StorageManager(bagelStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + TITLE_DESC_AMY + DESC_DESC_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        Flashcard expectedFlashcard \u003d new FlashcardBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        expectedModel.addFlashcard(expectedFlashcard);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFlashcardList().remove(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBagel(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    private static class JsonBagelIoExceptionThrowingStub extends JsonBagelStorage {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        private JsonBagelIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        public void saveBagel(ReadOnlyBagel bagel, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 5,
      "jacetjy": 10,
      "yuki-cell": 1,
      "-": 136,
      "liuyxxy": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalBagel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        model \u003d new ModelManager(getTypicalBagel(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_newFlashcard_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBagel(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        expectedModel.addFlashcard(validFlashcard);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertCommandSuccess(new AddCommand(validFlashcard), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validFlashcard), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_duplicateFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard flashcardInList \u003d model.getBagel().getFlashcardList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertCommandFailure(new AddCommand(flashcardInList), model, AddCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 11,
      "jacetjy": 1,
      "-": 32,
      "liuyxxy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.Bagel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.ReadOnlyBagel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public void constructor_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public void execute_flashcardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        ModelStubAcceptingFlashcardsAdded modelStub \u003d new ModelStubAcceptingFlashcardsAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validFlashcard).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFlashcard), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertEquals(Arrays.asList(validFlashcard), modelStub.flashcardsAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validFlashcard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithFlashcard(validFlashcard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_FLASHCARD, () -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Flashcard alice \u003d new FlashcardBuilder().withTitle(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Flashcard bob \u003d new FlashcardBuilder().withTitle(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        public Path getBagelFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        public void setBagelFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        public void setBagel(ReadOnlyBagel newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        public ReadOnlyBagel getBagel() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        public void viewFlashcard(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    private class ModelStubWithFlashcard extends ModelStub {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        private final Flashcard flashcard;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        ModelStubWithFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            return this.flashcard.isSameFlashcard(flashcard);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    private class ModelStubAcceptingFlashcardsAdded extends ModelStub {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        final ArrayList\u003cFlashcard\u003e flashcardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            return flashcardsAdded.stream().anyMatch(flashcard::isSameFlashcard);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            flashcardsAdded.add(flashcard);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        public ReadOnlyBagel getBagel() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            return new Bagel();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rgabelarde": 35,
      "jacetjy": 3,
      "-": 153,
      "liuyxxy": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.Bagel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final String VALID_TITLE_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final String VALID_TITLE_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final String VALID_DESC_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final String VALID_DESC_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \"  \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String INVALID_DESC_DESC \u003d \"   \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final String TITLE_DESC_AMY \u003d \" \" + PREFIX_TITLE + VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final String TITLE_DESC_BOB \u003d \" \" + PREFIX_TITLE + VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final String DESC_DESC_AMY \u003d \" \" + PREFIX_DESC + VALID_DESC_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final String DESC_DESC_BOB \u003d \" \" + PREFIX_DESC + VALID_DESC_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final EditCommand.EditFlashcardDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final EditCommand.EditFlashcardDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        DESC_AMY \u003d new EditFlashcardDescriptorBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "                .withDescription(VALID_DESC_AMY).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        DESC_BOB \u003d new EditFlashcardDescriptorBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "                .withDescription(VALID_DESC_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "     * - the bagel, filtered flashcard list and selected flashcard in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Bagel expectedBagel \u003d new Bagel(actualModel.getBagel());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        List\u003cFlashcard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertEquals(expectedBagel, actualModel.getBagel());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "     * {@code model}\u0027s bagel."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static void showFlashcardAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Flashcard flashcard \u003d model.getFilteredFlashcardList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        final String[] splitName \u003d flashcard.getTitle().fullTitle.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        model.updateFilteredFlashcardList(new TitleContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertEquals(1, model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 6,
      "rgabelarde": 28,
      "jacetjy": 2,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalBagel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBagel(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getBagel(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBagel(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of bagel (flashcards) list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBagel().getFlashcardList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        model.updateFilteredFlashcardList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertTrue(model.getFilteredFlashcardList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 3,
      "rgabelarde": 26,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalBagel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.Bagel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBagel(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(editedFlashcard).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Bagel(model.getBagel()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(0), editedFlashcard);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Index indexLastFlashcard \u003d Index.fromOneBased(model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Flashcard lastFlashcard \u003d model.getFilteredFlashcardList().get(indexLastFlashcard.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        FlashcardBuilder flashcardInList \u003d new FlashcardBuilder(lastFlashcard);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard editedFlashcard \u003d flashcardInList.withTitle(VALID_TITLE_BOB).withDescription(VALID_DESC_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        //        .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                .withDescription(VALID_DESC_BOB).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        //        .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastFlashcard, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Bagel(model.getBagel()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        expectedModel.setFlashcard(lastFlashcard, editedFlashcard);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, new EditFlashcardDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard editedFlashcard \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Bagel(model.getBagel()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard flashcardInFilteredList \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder(flashcardInFilteredList).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                new EditFlashcardDescriptorBuilder().withTitle(VALID_TITLE_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Bagel(model.getBagel()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(0), editedFlashcard);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_duplicateFlashcardUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard firstFlashcard \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(firstFlashcard).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_duplicateFlashcardFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard flashcardInList \u003d model.getBagel().getFlashcardList().get(INDEX_SECOND_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "                new EditFlashcardDescriptorBuilder(flashcardInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_invalidFlashcardIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_invalidFlashcardIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of bagel list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBagel().getFlashcardList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "                new EditFlashcardDescriptorBuilder().withTitle(VALID_TITLE_BOB).build());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, DESC_AMY);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditFlashcardDescriptor copyDescriptor \u003d new EditFlashcardDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_FLASHCARD, copyDescriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        //assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_FLASHCARD, DESC_AMY)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_FLASHCARD, DESC_BOB)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 43,
      "rgabelarde": 23,
      "jacetjy": 3,
      "-": 102,
      "liuyxxy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditFlashcardDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class EditFlashcardDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditFlashcardDescriptor descriptorWithSameValues \u003d new EditFlashcardDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        EditFlashcardDescriptor editedAmy \u003d new EditFlashcardDescriptorBuilder(DESC_AMY).withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        editedAmy \u003d new EditFlashcardDescriptorBuilder(DESC_AMY).withDescription(VALID_DESC_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // editedAmy \u003d new EditFlashcardDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 9,
      "jacetjy": 3,
      "-": 35,
      "liuyxxy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FlipCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalBagel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * {@code FlipCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class FlipCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBagel(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void execute_flipOnce_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        ObservableList\u003cFlashcard\u003e flashcards \u003d model.getBagel().getFlashcardList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        FlipCommand flipCommand \u003d new FlipCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String expectedMessage \u003d String.format(FlipCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getBagel(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        expectedModel.viewFlashcard(flashcard -\u003e flashcards.indexOf(flashcard) \u003d\u003d 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertCommandSuccess(flipCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    //public void execute_flipForWholeList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    //    FlipCommand.setIndex(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    //    ObservableList\u003cFlashcard\u003e flashcards \u003d model.getBagel().getFlashcardList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    //    FlipCommand flipCommand \u003d new FlipCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    //    String expectedMessage \u003d String.format(FlipCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    //    ModelManager expectedModel \u003d new ModelManager(model.getBagel(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    //    expectedModel.viewFlashcard(flashcard -\u003e flashcards.indexOf(flashcard) \u003d\u003d 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    //    assertCommandSuccess(flipCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 44,
      "jacetjy": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalBagel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        model \u003d new ModelManager(getTypicalBagel(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getBagel(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 2,
      "jacetjy": 4,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalBagel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " * {@code ViewCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBagel(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        Flashcard flashcardToView \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_VIEW_FLASHCARD_SUCCESS, flashcardToView);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getBagel(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        expectedModel.viewFlashcard(flashcard -\u003e flashcard.equals(flashcardToView));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertCommandSuccess(viewCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of bagel (flashcards) list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBagel().getFlashcardList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        ViewCommand viewFirstCommand \u003d new ViewCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        ViewCommand viewSecondCommand \u003d new ViewCommand(INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        ViewCommand viewFirstCommandCopy \u003d new ViewCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(viewFirstCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(viewFirstCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(viewFirstCommand.equals(viewSecondCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 1,
      "liuyxxy": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESC_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.flashcard.Title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard expectedFlashcard \u003d new FlashcardBuilder(BOB).build(); //.withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_BOB + DESC_DESC_BOB,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "                new AddCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        // multiple word titles accepted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_AMY + TITLE_DESC_BOB + DESC_DESC_BOB, new AddCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        // multiple word desc accepted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOB + DESC_DESC_AMY + DESC_DESC_BOB, new AddCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    //public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    //    // zero tags"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    //    Flashcard expectedFlashcard \u003d new FlashcardBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    //   assertParseSuccess(parser, TITLE_DESC_AMY + DESC_DESC_AMY,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    //            new AddCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOB + DESC_DESC_BOB,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        // missing desc prefix"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + VALID_DESC_BOB,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOB + TITLE_DESC_BOB,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DESC_DESC_BOB, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        // invalid desc"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + INVALID_DESC_DESC, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + INVALID_DESC_DESC,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_BOB + DESC_DESC_BOB,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 2,
      "rgabelarde": 37,
      "jacetjy": 2,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/BagelParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.logic.commands.FlipCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.testutil.FlashcardUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "public class BagelParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    private final BagelParser parser \u003d new BagelParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(FlashcardUtil.getAddCommand(flashcard));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertEquals(new AddCommand(flashcard), command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_FLASHCARD), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(flashcard).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                + INDEX_FIRST_FLASHCARD.getOneBased() + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                + FlashcardUtil.getEditFlashcardDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_FLASHCARD, descriptor), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void parseCommand_flip() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertTrue(parser.parseCommand(FlipCommand.COMMAND_WORD) instanceof FlipCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void parseCommand_view() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        ViewCommand command \u003d (ViewCommand) parser.parseCommand("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertEquals(new ViewCommand(INDEX_FIRST_FLASHCARD), command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    //public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    //    assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    //    () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 5,
      "rgabelarde": 10,
      "yuki-cell": 6,
      "jacetjy": 9,
      "-": 49,
      "liuyxxy": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESC_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "// import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.flashcard.Description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.flashcard.Title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "// import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertParseFailure(parser, \"-5\" + TITLE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertParseFailure(parser, \"0\" + TITLE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC, Title.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESC_DESC, Description.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // invalid title followed by valid description"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC + DESC_DESC_AMY, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC + VALID_DESC_AMY + INVALID_TITLE_DESC,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() // + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                + DESC_DESC_AMY + TITLE_DESC_AMY; // + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                .withDescription(VALID_DESC_AMY) //.withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // title"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withTitle(VALID_TITLE_AMY).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESC_DESC_AMY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withDescription(VALID_DESC_AMY).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // descriptor \u003d new EditFlashcardDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESC_DESC_AMY // + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                + DESC_DESC_AMY // + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                + DESC_DESC_BOB; // + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withDescription(VALID_DESC_BOB)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                //.withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_TITLE_DESC + TITLE_DESC_BOB;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESC_DESC_BOB + INVALID_TITLE_DESC + TITLE_DESC_BOB;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withTitle(VALID_TITLE_BOB).withDescription(VALID_DESC_BOB)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     Index targetIndex \u003d INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().build(); //.withTags().build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 74,
      "jacetjy": 2,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.flashcard.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.flashcard.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "// import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // private static final String INVALID_DESC \u003d \"+651234\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private static final String VALID_TITLE \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private static final String VALID_DESC \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseTitle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseTitle_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_TITLE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseTitle_validValueWithoutWhitespace_returnsTitle() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Title expectedName \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseTitle(VALID_TITLE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseTitle_validValueWithWhitespace_returnsTrimmedTitle() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_TITLE + WHITESPACE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Title expectedName \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseTitle(nameWithWhitespace));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Description expectedPhone \u003d new Description(VALID_DESC);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parseDescription(VALID_DESC));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_DESC + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Description expectedPhone \u003d new Description(VALID_DESC);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parseDescription(phoneWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 70,
      "jacetjy": 1,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ViewCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liuyxxy": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/BagelTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalBagel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "public class BagelTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    private final Bagel bagel \u003d new Bagel();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertEquals(Collections.emptyList(), bagel.getFlashcardList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e bagel.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void resetData_withValidReadOnlyBagel_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        Bagel newData \u003d getTypicalBagel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        bagel.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertEquals(newData, bagel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void resetData_withDuplicateFlashcards_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        // Two flashcards with the same information fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE).withDescription(VALID_DESC_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                //.withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        List\u003cFlashcard\u003e newFlashcards \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        BagelStub newData \u003d new BagelStub(newFlashcards);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e bagel.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void hasFlashcard_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e bagel.hasFlashcard(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void hasFlashcard_flashcardNotInBagel_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertFalse(bagel.hasFlashcard(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void hasFlashcard_flashcardInBagel_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        bagel.addFlashcard(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertTrue(bagel.hasFlashcard(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void hasFlashcard_flashcardWithSameInformationFieldsInBagel_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        bagel.addFlashcard(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE).withDescription(VALID_DESC_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        //.withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertTrue(bagel.hasFlashcard(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void getFlashcardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e bagel.getFlashcardList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * A stub ReadOnlyBagel whose flashcards list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    private static class BagelStub implements ReadOnlyBagel {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        private final ObservableList\u003cFlashcard\u003e flashcards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        BagelStub(Collection\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            this.flashcards.setAll(flashcards);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            return flashcards;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 5,
      "jacetjy": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.testutil.BagelBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertEquals(new Bagel(), new Bagel(modelManager.getBagel()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        userPrefs.setBagelFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        userPrefs.setBagelFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void setBagelFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setBagelFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void setBagelFilePath_validPath_setsBagelFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        modelManager.setBagelFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertEquals(path, modelManager.getBagelFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void hasFlashcard_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFlashcard(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void hasFlashcard_flashcardNotInBagel_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertFalse(modelManager.hasFlashcard(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void hasFlashcard_flashcardInBagel_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        modelManager.addFlashcard(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertTrue(modelManager.hasFlashcard(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void getFilteredFlashcardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredFlashcardList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        Bagel bagel \u003d new BagelBuilder().withFlashcard(ALICE).withFlashcard(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        Bagel differentBagel \u003d new Bagel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        modelManager \u003d new ModelManager(bagel, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(bagel, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentBagel, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        String[] keywords \u003d ALICE.getTitle().fullTitle.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        modelManager.updateFilteredFlashcardList(new TitleContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(bagel, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        modelManager.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        differentUserPrefs.setBagelFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(bagel, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 33,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void setBagelFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setBagelFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(Description.isValidDescription(\"help me for ger pls\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                + \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                + \"quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                + \"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                + \"pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                + \"mollit anim id est laborum.\")); // long address"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 6,
      "liuyxxy": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/FlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "// import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class FlashcardTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    //public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    //    Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    //    assertThrows(UnsupportedOperationException.class, () -\u003e flashcard.getTags().remove(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(ALICE.isSameFlashcard(ALICE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(ALICE.isSameFlashcard(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(ALICE.isSameFlashcard(editedAlice));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // same title, same description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // leave for when tags are implemented"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // editedAlice \u003d new FlashcardBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        //        .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        Flashcard aliceCopy \u003d new FlashcardBuilder(ALICE).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        editedAlice \u003d new FlashcardBuilder(ALICE).withDescription(VALID_DESC_BOB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // leave for when tags are implemented"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 7,
      "jacetjy": 1,
      "liuyxxy": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/TitleContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class TitleContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d new TitleContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void test_titleContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTitle(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public void test_titleDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTitle(\"Alice\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // Keywords match phone, email and address, but does not match Title"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTitle(\"Alice\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                .withDescription(\"Main Street\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 3,
      "jacetjy": 6,
      "liuyxxy": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(Title.isValidTitle(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        // valid title"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(Title.isValidTitle(\"David Roger Jackson Ray Jr 2nd\")); // long titles"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liuyxxy": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/UniqueFlashcardListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class UniqueFlashcardListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    private final UniqueFlashcardList uniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void contains_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void contains_flashcardNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertFalse(uniqueFlashcardList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void contains_flashcardInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(uniqueFlashcardList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void contains_flashcardWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE).withDescription(VALID_DESC_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertTrue(uniqueFlashcardList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void add_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void add_duplicateFlashcard_throwsFlashcardFlashcardException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void setFlashcard_nullTargetFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcard(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void setFlashcard_nullEditedFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcard(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void setFlashcard_targetFlashcardNotInList_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e uniqueFlashcardList.setFlashcard(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void setFlashcard_editedFlashcardIsSameFlashcard_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.setFlashcard(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        expectedUniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void setFlashcard_editedFlashcardHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE).withTitle(VALID_DESC_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.setFlashcard(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        expectedUniqueFlashcardList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void setFlashcard_editedFlashcardHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.setFlashcard(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        expectedUniqueFlashcardList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void setFlashcard_editedFlashcardHasNonUniqueIdentity_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.setFlashcard(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void remove_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void remove_flashcardDoesNotExist_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e uniqueFlashcardList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void remove_existingFlashcard_removesFlashcard() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void setFlashcards_nullUniqueFlashcardList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcards((UniqueFlashcardList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void setFlashcards_uniqueFlashcardList_replacesOwnListWithProvidedUniqueFlashcardist() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        expectedUniqueFlashcardList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.setFlashcards(expectedUniqueFlashcardList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void setFlashcards_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcards((List\u003cFlashcard\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void setFlashcards_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        List\u003cFlashcard\u003e flashcardList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        uniqueFlashcardList.setFlashcards(flashcardList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        expectedUniqueFlashcardList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void setFlashcards_listWithDuplicateFlashcards_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        List\u003cFlashcard\u003e listWithDuplicateFlashcards \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                uniqueFlashcardList.setFlashcards(listWithDuplicateFlashcards));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            -\u003e uniqueFlashcardList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 4,
      "jacetjy": 2,
      "liuyxxy": 164
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedFlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import static seedu.address.storage.JsonAdaptedFlashcard.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.flashcard.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.flashcard.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "public class JsonAdaptedFlashcardTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"R@chel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // private static final String INVALID_DESC \u003d \"+651234\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private static final String VALID_TITLE \u003d BENSON.getTitle().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private static final String VALID_DESC \u003d BENSON.getDescription().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //         .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //         .collect(Collectors.toList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void toModelType_validFlashcardDetails_returnsFlashcard() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(BENSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertEquals(BENSON, flashcard.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                new JsonAdaptedFlashcard(INVALID_TITLE, VALID_DESC);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(null, VALID_DESC);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_TITLE, null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //    List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     JsonAdaptedFlashcard flashcard \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //             new JsonAdaptedFlashcard(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     assertThrows(IllegalValueException.class, flashcard::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 26,
      "yuki-cell": 8,
      "jacetjy": 3,
      "-": 26,
      "liuyxxy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonBagelStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalBagel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.model.Bagel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import seedu.address.model.ReadOnlyBagel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class JsonBagelStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonBagelStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void readBagel_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readBagel(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private java.util.Optional\u003cReadOnlyBagel\u003e readBagel(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return new JsonBagelStorage(Paths.get(filePath)).readBagel(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertFalse(readBagel(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readBagel(\"notJsonFormatBagel.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void readBagel_invalidPersonBagel_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readBagel(\"invalidPersonBagel.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void readBagel_invalidAndValidPersonBagel_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readBagel(\"invalidAndValidPersonBagel.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void readAndSaveBagel_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempBagel.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        Bagel original \u003d getTypicalBagel();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        JsonBagelStorage jsonBagelStorage \u003d new JsonBagelStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        jsonBagelStorage.saveBagel(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        ReadOnlyBagel readBack \u003d jsonBagelStorage.readBagel(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertEquals(original, new Bagel(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        original.addFlashcard(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        original.removeFlashcard(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        jsonBagelStorage.saveBagel(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        readBack \u003d jsonBagelStorage.readBagel(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertEquals(original, new Bagel(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        original.addFlashcard(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        jsonBagelStorage.saveBagel(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        readBack \u003d jsonBagelStorage.readBagel().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertEquals(original, new Bagel(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void saveBagel_nullBagel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveBagel(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * Saves {@code bagel} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private void saveBagel(ReadOnlyBagel bagel, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            new JsonBagelStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                    .saveBagel(bagel, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void saveBagel_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveBagel(new Bagel(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 7,
      "yuki-cell": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableBagelTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.Bagel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.testutil.TypicalFlashcards;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class JsonSerializableBagelTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableBagelTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private static final Path TYPICAL_FLASHCARDS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFlashcardsBagel.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private static final Path INVALID_FLASHCARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFlashcardBagel.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private static final Path DUPLICATE_FLASHCARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFlashcardBagel.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        JsonSerializableBagel dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FLASHCARDS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                JsonSerializableBagel.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Bagel bagelFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Bagel typicalFlashcardsBagel \u003d TypicalFlashcards.getTypicalBagel();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(bagelFromFile, typicalFlashcardsBagel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        JsonSerializableBagel dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FLASHCARD_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                JsonSerializableBagel.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        JsonSerializableBagel dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FLASHCARD_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                JsonSerializableBagel.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableBagel.MESSAGE_DUPLICATE_FLASHCARD,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        userPrefs.setBagelFilePath(Paths.get(\"bagel.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalBagel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.Bagel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import seedu.address.model.ReadOnlyBagel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        JsonBagelStorage bagelStorage \u003d new JsonBagelStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        storageManager \u003d new StorageManager(bagelStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void bagelReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "         * {@link JsonBagelStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonBagelStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Bagel original \u003d getTypicalBagel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        storageManager.saveBagel(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        ReadOnlyBagel retrieved \u003d storageManager.readBagel().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(original, new Bagel(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void getBagelFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertNotNull(storageManager.getBagelFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 14,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BagelBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.Bagel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " * A utility class to help with building Bagel objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " *     {@code Bagel bagel \u003d new BagelBuilder().withFlashcard(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "public class BagelBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    private Bagel bagel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public BagelBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        bagel \u003d new Bagel();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public BagelBuilder(Bagel bagel) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        this.bagel \u003d bagel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Adds a new {@code Flashcard} to the {@code Bagel} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public BagelBuilder withFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        bagel.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public Bagel build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return bagel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditFlashcardDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "// import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " * A utility class to help with building EditFlashcardDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "public class EditFlashcardDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    private EditFlashcardDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public EditFlashcardDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public EditFlashcardDescriptorBuilder(EditFlashcardDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        this.descriptor \u003d new EditFlashcardDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Returns an {@code EditFlashcardDescriptor} with fields containing {@code flashcard}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public EditFlashcardDescriptorBuilder(Flashcard flashcard) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        descriptor.setTitle(flashcard.getTitle());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        descriptor.setDescription(flashcard.getDescription());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // descriptor.setTags(flashcard.getTags());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Sets the {@code Title} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public EditFlashcardDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Sets the {@code Description} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public EditFlashcardDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // public EditFlashcardDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    //     return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public EditFlashcardDescriptor build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 6,
      "jacetjy": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FlashcardBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " * A utility class to help with building Flashcard objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "public class FlashcardBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Creates a {@code FlashcardBuilder} with the default details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public FlashcardBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Initializes the FlashcardBuilder with the data of {@code flashcardToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public FlashcardBuilder(Flashcard flashcardToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        title \u003d flashcardToCopy.getTitle();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        description \u003d flashcardToCopy.getDescription();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // tags \u003d new HashSet\u003c\u003e(flashcardToCopy.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Sets the {@code Title} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public FlashcardBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public FlashcardBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Sets the {@code Description} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public FlashcardBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public Flashcard build() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Flashcard(title, description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 4,
      "jacetjy": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FlashcardUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "// import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "// import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "// import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " * A utility class for Flashcard."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "public class FlashcardUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Returns an add command string for adding the {@code flashcard}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static String getAddCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getFlashcardDetails(flashcard);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static String getFlashcardDetails(Flashcard flashcard) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        sb.append(PREFIX_TITLE + flashcard.getTitle().fullTitle + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        sb.append(PREFIX_DESC + flashcard.getDescription().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // flashcard.getTags().stream().forEach("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        //     s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Returns the part of command string for the given {@code EditFlashcardDescriptor}\u0027s details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static String getEditFlashcardDescriptorDetails(EditFlashcardDescriptor descriptor) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        descriptor.getTitle().ifPresent(title -\u003e sb.append(PREFIX_TITLE).append(title.fullTitle).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESC).append(description.value)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        //     Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        //     if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        //         sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        //     } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        //         tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        //     }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 15,
      "jacetjy": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Returns the middle index of the flashcard in the {@code model}\u0027s flashcard list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashcardList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Returns the last index of the flashcard in the {@code model}\u0027s flashcard list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Returns the flashcard in the {@code model}\u0027s flashcard list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static Flashcard getFlashcard(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return model.getFilteredFlashcardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jacetjy": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalFlashcards.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.Bagel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " * A utility class containing a list of {@code Flashcard} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jacetjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "public class TypicalFlashcards {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static final Flashcard ALICE \u003d new FlashcardBuilder().withTitle(\"Alice Pauline\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            .withDescription(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static final Flashcard BENSON \u003d new FlashcardBuilder().withTitle(\"Benson Meier\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            .withDescription(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static final Flashcard CARL \u003d new FlashcardBuilder().withTitle(\"Carl Kurz\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            .withDescription(\"wall street\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static final Flashcard DANIEL \u003d new FlashcardBuilder().withTitle(\"Daniel Meier\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liuyxxy"
        },
        "content": "            .withDescription(\"10th street\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static final Flashcard ELLE \u003d new FlashcardBuilder().withTitle(\"Elle Meyer\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            .withDescription(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static final Flashcard FIONA \u003d new FlashcardBuilder().withTitle(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            .withDescription(\"little tokyo\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static final Flashcard GEORGE \u003d new FlashcardBuilder().withTitle(\"George Best\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            .withDescription(\"4th street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static final Flashcard HOON \u003d new FlashcardBuilder().withTitle(\"Hoon Meier\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            .withDescription(\"little india\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static final Flashcard IDA \u003d new FlashcardBuilder().withTitle(\"Ida Mueller\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            .withDescription(\"chicago ave\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    // Manually added - Flashcard\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static final Flashcard AMY \u003d new FlashcardBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            .withDescription(VALID_DESC_AMY).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static final Flashcard BOB \u003d new FlashcardBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "            .withDescription(VALID_DESC_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    private TypicalFlashcards() {} // prevents instantiation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     * Returns an {@code Bagel} with all the typical flashcards."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static Bagel getTypicalBagel() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        Bagel bagel \u003d new Bagel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        for (Flashcard flashcard : getTypicalFlashcards()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "            bagel.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return bagel;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jacetjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    public static List\u003cFlashcard\u003e getTypicalFlashcards() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jacetjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rgabelarde": 4,
      "jacetjy": 60,
      "liuyxxy": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final Index INDEX_FIRST_FLASHCARD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final Index INDEX_SECOND_FLASHCARD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rgabelarde"
        },
        "content": "    public static final Index INDEX_THIRD_FLASHCARD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rgabelarde": 3,
      "-": 9
    }
  }
]
