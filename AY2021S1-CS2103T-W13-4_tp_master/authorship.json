[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W13-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W13-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "# TrackIt@NUS"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "TrackIt@NUS is an all-in-one desktop application for NUS students to manage their modules, tasks and lessons in school. It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you type fast, TrackIt@NUS can improve your efficiency in managing your tasks and classes over using traditional GUI apps."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "## Example Usages:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "* As a module manager to check:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "  * Classes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "  * Times and venues (and/or Zoom links)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "  * Browse module-related information"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "* As a task manager for module-related work"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "* As a contacts manager for school-related contacts"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "For more details about usage, refer to the user guide at `docs/UserGuide.md`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 15,
      "-": 4,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "mainClassName \u003d \u0027trackitnus.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    archiveName \u003d \u0027trackitnus.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "UncleGrandpa925": 6
    }
  },
  {
    "path": "config/checkstyle/suppressions.xml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE suppressions PUBLIC"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"-//Checkstyle//DTD SuppressionFilter Configuration 1.2//EN\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"https://checkstyle.org/dtds/suppressions_1_2.dtd\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csuppressions\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003csuppress checks\u003d\"JavadocType\" files\u003d\".*Test\\.java\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003csuppress checks\u003d\"MissingJavadocMethodCheck\" files\u003d\".*Test\\.java\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  \u003csuppress checks\u003d\"CommentsIndentation\" files\u003d\".*\\.java\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  \u003csuppress checks\u003d\"DeclarationOrder\" files\u003d\".*\\.java\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  \u003csuppress checks\u003d\"OperatorWrap\" files\u003d\".*\\.java\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/suppressions\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "UncleGrandpa925": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Simon Teo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "\u003cimg src\u003d\"images/simonteozw.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[[homepage](https://www.linkedin.com/in/simon-teo-94a4a158/)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[[github](https://github.com/simonteozw)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[[portfolio](https://github.com/simonteozw/tp)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* Role: Documentation Master"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justweihong"
        },
        "content": "### Ng Wei Hong"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "\u003cimg src\u003d\"images/justweihong.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justweihong"
        },
        "content": "[[github](http://github.com/justweihong)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justweihong"
        },
        "content": "[[portfolio](https://github.com/justweihong/tp)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justweihong"
        },
        "content": "* Role: UI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "### Tiffany Chan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "\u003cimg src\u003d\"images/nottiffchan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "[[github](http://github.com/nottiffchan)] [[portfolio](https://github.com/nottiffchan/tp)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "* Role: Deliverables and Deadlines"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "### Vuong Hoang Long"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "\u003cimg src\u003d\"images/unclegrandpa925.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "[[github](https://github.com/UncleGrandpa925)] [[portfolio](https://github.com/UncleGrandpa925)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "* Role: Team Leader"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "### Nguyen Dinh Quang Minh"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "\u003cimg src\u003d\"images/nguyendqminh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "[[github](http://github.com/nguyendqminh)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "[[portfolio](https://github.com/nguyendqminh/tp)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "* Role: Testing Master"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 3,
      "-": 30,
      "simonteozw": 5,
      "UncleGrandpa925": 12,
      "justweihong": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "# TrackIt@NUS - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "By: `Team W13-4` Since: `Aug 2020` License: `MIT`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "1. [**Introduction**](#introduction)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "2. [**Setting up**](#setup)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "3. [**Design**](#design)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    1. [Architecture](#architecture)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    2. [UI Component](#ui)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    3. [Logic Component](#logic)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    4. [Model Component](#model)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    5. [Common Classes](#common)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "4. [**Implementation**](#implementation)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    1. [Module Manager](#module-manager)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    2. [Lesson Manager](#lesson-manager)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    3. [Task Manager](#task-manager)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    4. [Contact Manager](#contact-manager)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    5. [Upcoming Tab](#upcoming-tab)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    6. [Logging](#logging)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    7. [Configuration](#config)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "5. [**Documentation**](#documentation)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "6. [**Testing**](#testing)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "7. [**Dev Ops**](#devops)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[**Appendix A: Product Scope**](#appen-a) \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[**Appendix B: User Stories**](#appen-b) \u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[**Appendix C: Use Cases**](#appen-c) \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[**Appendix D: Non-Functional Requirements**](#appen-d) \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[**Appendix E: Glossary**](#appen-e) \u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[**Appendix F: Instructions for Manual Testing**](#appen-f) \u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[**Appendix G: Effort**](#appen-g) \u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## **Introduction** \u003ca name\u003d\"introduction\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "**TrackIt@NUS** is a desktop application for managing modules, lessons, tasks, and contacts, tailored to the needs of"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " NUS students. It focuses on the _Command Line Interface (CLI)_ while providing users with a simple and clean"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  _Graphical User Interface (GUI)_. The main iteraction with **TrackIt@NUS** will be done via commands."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "**TrackIt@NUS** is an all-in-one solution for busy NUS students. The information that can be managed by **TrackIt@NUS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "** includes:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* Modules"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* Lessons (for each module)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* Tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* Contacts"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "The purpose of this Developer Guide is to help you understand the design and implementation of **TrackIt@NUS** so"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " that you can get started on your contributions to the app."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## **Setting up, getting started** \u003ca name\u003d\"setup\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Refer to the guide [here](./SettingUp.md)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## **Design** \u003ca name\u003d\"design\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "In this section, you will learn about the general design and structure TrackIt@NUS. Subsequently, this section will"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " also describe and explain how each component in TrackIt@NUS works individually. TrackIt@NUS is coded using the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  [_Object Oriented Programming_](#oop) paradigm and it follows the [_Facade Pattern_](#facade-p) and [_Command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "   Pattern_](#command-p) in software design."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### **Architecture** \u003ca name\u003d\"architecture\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "We implemented most of our methods in a similar way to ensure that the logic is uniform. This makes our code less bug"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "-prone, and more maintainable."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### **UI Component** \u003ca name\u003d\"ui\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### **Logic Component** \u003ca name\u003d\"logic\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### **Model Component** \u003ca name\u003d\"model\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### **Common Classes** \u003ca name\u003d\"common\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "The `commons` package contains classes used by multiple other components in the `trackitnus.commons` package."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## **Implementation** \u003ca name\u003d\"implementation\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### **Module Manager** \u003ca name\u003d\"module-manager\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### **Lesson Manager** \u003ca name\u003d\"lesson-manager\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### **Task Manager** \u003ca name\u003d\"task-manager\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "TrackIt@NUS allows users to keep track of his/her tasks. The task manager is one of TrackIt@NUS\u0027s basic components."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " #### Rationale"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " Tasks are an integral part of any student\u0027s day-to-day life. Hence, TrackIt@NUS includes a task manager for students to "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " keep track of all their tasks. To better support NUS students, a task can either belong to a module or not. When"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  adding a task, users can choose to the include the `m/MODULE_CODE` parameter in order to add a task that belongs to"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "   a module. When users click into a specific module tab, they can see the tasks belonging to each module."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "   "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "![ModuleTasks](images/ModuleTasks.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":information_source: A task does not have to belong a module. In this case, the module parameter of the task is"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " simply treated as null and the task can only be viewed in the upcoming tab."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":warning: The module must exist (i.e. there must be a module with the specified `MODULE_CODE`) otherwise the add and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " edit commands will not work."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":bulb: To remove a task from a module, simply type `T edit INDEX m/` (use the `m/` prefix but leave the `MODULE_CODE` parameter empty)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "In this section, we will outline the key commands of the Task Manager, namely:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* `AddTaskCommand`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* `DeleteTaskCommand`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* `EditTaskCommand`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "We will also elaborate on one more key function, namely `getModuleTasks`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Generally, this is how the Task Manager handles a command."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " ![Add Task](images/AddTaskActivityDiagram.png)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "The add, delete, and edit commands are all implemented in similar ways. When they are executed they will:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * call on the relevant Model methods"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * update the `UniqueTaskList` depending on the command"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Save the updated task list to `data/trackIter.json`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * return the relevant CommandResult message"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "When `AddTaskCommand` is executed, it will first call the model\u0027s `hasTask` method to ensure that the task does not"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " yet exist in the app. Following this, if the task is added with a non-null module code, it will call the model\u0027s"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  `hasModule` method to ensure that the specified module exists. If both these checks pass, `AddTaskCommand` will"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "   call the model\u0027s `addTask` method."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "   "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "The model will then call the `addTask` method of TrackIter, which calls the `add` method of UniqueTaskList and adds"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " the task to the app."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "The following shows the sequence diagram of the `AddTaskCommand`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "![Add Task Sequence Diagram](images/AddTaskSequenceDiagram.png)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "When the `DeleteTaskCommand` is executed, it will first call the model\u0027s `getFilteredTaskList` method to"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " determine the last shown list of tasks. Then, it will call the index\u0027s `getZeroBased` method to find the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " zero-based index of the task it must delete. Then, it will check if this index is within range. If it is, it"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " calls the model\u0027s `deleteTask` method."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "The model will then call the `removeTask` method of TrackIter, which calls the `remove` method of UniqueTaskList and"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " deletes the task in question from the app."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "The following shows the sequence diagram of the `DeleteTaskCommand`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "![Delete Task Sequence Diagram](images/DeleteTaskSequenceDiagram.png)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "When the `EditTaskCommand` is executed, it will first call the model\u0027s `getFilteredTaskList` method to determine the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " last shown list of tasks. Then, it will call the index\u0027s `getZeroBased` method to find the zero-basd index of the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  task we must edit. It will then check if the index is within range. If it is, it calls the model\u0027s `setTask` method."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "The model will then call the `setTask` method of TrackIter, which calls the `setTask` method of UniqueTaskList and"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " replace the original task with the edited version in the app."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "The follow shows the sequence diagram of the `EditTaskCommand`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "![Edit Task Sequence Diagram](images/EditTaskSequenceDiagram.png)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "The `getModuleTasks` function takes in a Module Code and returns all tasks that belong to the specified module."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ". When `getModuleTasks` is called, it uses the `TaskHasCodePredicate` to update the task list in the app to only show"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " the tasks that belong the specified module code."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "This is the sequence diagram of `getModuleTasks`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "![Get Module Tasks Sequence Diagram](images/GetModuleTasksSequenceDiagram.png)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "As mentioned, a task may or may not belong to a module. In the case it does not, we store the module code as"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " null. A task also may or may not have a remark. In the case it does not, we store the remark as the empty"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  string. These 2 optional fields made the `EditTaskCommand` more challenging to implement. We wanted the user to be"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "   able to remove an existing module code or remark simply by typing `T edit INDEX m/` and `T edit INDEX r/` respectively."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "![Edit Task Activity Diagram](images/EditTaskActivityDiagram.png)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "   "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "The original AB3 implementation of edit commands, which would default to the original field if the edited"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " field was null, would not be sufficient. Hence, we added 2 additional boolean variables - `isRemarkChanged` and"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  `isCodeChanged`, to know whether users wanted to remove the existing module code or remark."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### **Contact Manager** \u003ca name\u003d\"contact-manager\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### **Upcoming Tab** \u003ca name\u003d\"upcoming-tab\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### **Logging** \u003ca name\u003d\"logging\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### **Configuration** \u003ca name\u003d\"config\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## **Documentation** \u003ca name\u003d\"documentation\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Refer to the guide [here](./Documentation.md)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## **Testing** \u003ca name\u003d\"testing\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Refer to the guide [here](./Testing.md)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## **Dev Ops** \u003ca name\u003d\"devops\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Refer to the guide [here](./DevOps.md)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## **Appendix A: Product Scope** \u003ca name\u003d\"appen-a\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "* take multiple modules"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "* want to easily track their weekly calendar"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "* want to be notified about important academic dates coming up"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "* want to have their personal todos \u0026 events integrated with their academic calendar"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "* want to access related contacts when they browse a module"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "* want to keep track of modules\u0027 details (grading scheme, module\u0027s knowledge coverage)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "**Value proposition**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "* able to integrate personal todos/events into the weekly academic calendar."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "* able to manage modules\u0027 information (module\u0027s knowledge coverage, grading scheme) \u0026 related contacts in one app"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## **Appendix B: User stories** \u003ca name\u003d\"appen-b\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                                                   | So that I can…​                                                        |"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "| -------- | -------------------- | ---------------------------------------------------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "| `* * *`  | student              | have all modules\u0027 important dates in one place                         | never miss any event                                                   |"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "| `* * *`  | student              | have information (name, description, time) about any important dates   | always know what to prepare                                            |"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "| `* * *`  | student              | have all the tutorial/lab details (Zoom link, time) in one place       | easily find them when I need it                                        |"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "| `* * *`  | forgetful student    | find the grading structure of a module                                 | better revise for each assignment / mid-term / exam                    |"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "| `* *`    | student              | have all the module descriptions in one place                          | read them if I need to                                                 |"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "| `*`      | struggling student   | access the contact information of my TA/Prof                           | ask question or schedule a consultation                                |"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## **Appendix C: Use cases** \u003ca name\u003d\"appen-c\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "(For all use cases below, the **System** is the `TrackIt@NUS` application and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "**Use case: Find the grading structure of a module**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "1.  User requests to list the modules"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "2.  TrackIt@NUS shows a list of all modules"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "3.  User requests to find the grading structure of a module in the list"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "4.  TrackIt@NUS shows the requested grading structure"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "* 3a. The given index (or module name) is invalid."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    * 3a1. TrackIt@NUS shows an error message."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## **Appendix D: Non-Functional Requirements** \u003ca name\u003d\"appen-d\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "2.  Should be able to hold up to 1000 tasks/contacts/classes without a noticeable sluggishness in performance for"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " typical usage."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "3.  Users of the app find the app intuitive and easy to use"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "4.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "5. The UI of the app is attractive to the users"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## **Appendix E: Glossary** \u003ca name\u003d\"appen-e\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* **Obect Oriented Programming** \u003ca name\u003d\"oop\"\u003e\u003c/a\u003e: A type of computer programming paradigm (software design) in which"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " programmers define the data type of a data structure, and the types of operations (functions) that can be applied "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " to the data structure"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* **Facade Pattern** \u003ca name\u003d\"facade-p\"\u003e\u003c/a\u003e: A structural design pattern that provides a simplified "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "(but limited) interface to a complex system of classes, library or framework."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " While decreasing the overall complexity of the application, it also helps to move unwanted dependencies to one place"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* **Command Pattern** \u003ca name\u003d\"command-p\"\u003e\u003c/a\u003e: A Design Pattern that lets you encapsulate actions within Java"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " classes. Of which, each class has an `execute()` method which is declared in the Command interface the class implements"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## **Appendix F: Instructions for Manual Testing** \u003ca name\u003d\"appen-f\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## **Appendix G: Effort** \u003ca name\u003d\"appen-g\"\u003e\u003c/a\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 80,
      "simonteozw": 186,
      "UncleGrandpa925": 15,
      "nguyendqminh": 15
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "#TrackIt@NUS - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## Prerequisites"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "1. JDK `11` or above"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "2. IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":information_source: IntelliJ by default has Gradle and JavaFX plugins installed. If you have disabled them, go to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "1. Fork this repo, and clone the fork into your computer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "2. Open IntelliJ (if your are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " dialog first)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "3. Configure the JDK"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "   1. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "   2. Click `New…​` and find the directory of the JDK"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "   3. Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "   for more information"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "4. Click `Import Project`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "5. Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "6. Click `Open as Project`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "7. Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "8. Run the `Main` and try a few commands"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "9. [Run the tests](Testing.md) to ensure they all pass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Configuring the Coding Style"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":bulb: Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems as you write code."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    [TrackIt@NUS\u0027s architecture](DeveloperGuide.md#architecture)."
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "simonteozw": 30
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "   e.g. `StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "   e.g. `LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "UncleGrandpa925": 2
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "# TrackIt@NUS - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "By: `Team W13-4` Since: `Aug 2020` License: `MIT`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "1. [Introduction](#introduction)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "2. [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "3. [About](#about)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    1. [Common Symbols](#common-symbols)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    2. [Command Format](#command-format)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    3. [Commands and their Purposes](#command-purpose)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "4. [Layout](#layout)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    1. [Upcoming Tab](#upcomingtab)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    2. [Contacts Tab](#contactstab)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    3. [Module Tabs](#moduletabs)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "5. [Features](#features)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    1. [Module](#module)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    2. [Lesson](#lesson)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    3. [Task](#task)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    4. [Contact](#contact)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    5. [Help](#help)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    6. [Exit](#exit)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "6. [FAQ](#faq)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "7. [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    1. [Module Commands](#module-commands)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    2. [Task Commands](#task-commands)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    3. [Lesson Commands](#lesson-commands)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    4. [Contact Commands](#contact-commands)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    5. [General Commands](#general-commands)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## Introduction \u003ca name\u003d\"introduction\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Welcome to the **TrackIt@NUS** user-guide!"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Do you want to balance schoolwork and having a social life, but dislike having to use 3 different"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " apps to keep track of everything? Then look no further! TrackIt@NUS is a one-stop solution for busy students like you"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  and I."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "TrackIt@NUS is a desktop app for managing modules, lessons, tasks, and contacts, tailored to the needs of NUS students and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  optimized for use via a **Command Line Interface (CLI)** while still having the benefits of a **Graphical User"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "   Interface (GUI)**. If you can type fast, you will be able to manage your academic and social commitments much faster"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    than by using other traditional GUI apps."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "What are you waiting for? Head on to [Section 2, **Quick Start**](#quick-start) to learn more!"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## Quick start \u003ca name\u003d\"quick-start\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "1. Ensure you have **Java 11** or above on your Computer."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "1. Download the latest version of TrackIt@NUS from [here](https://github.com/AY2021S1-CS2103T-W13-4/tp/releases/tag/v1.2)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "1. Copy the file to the folder you want to use as the home folder for TrackIt@NUS."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "1. Double-click the file to start the app. The GUI shown below should appear in a few seconds."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "1. You are now on the home page of TrackIt@NUS."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "1. At the bottom of the screen, type your command in the Command Box (see [Features](#features) for more info) and"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " press `Enter` on your keyboard to execute it."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## About \u003ca name\u003d\"about\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "There are many things you can use TrackIt@NUS for. We have structured this document so it is easy for you to find"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " what you need. In the [Common Symbols](#common-symbols), [Command Format](#command-format), and [Commands and their"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  Purposes](#command-purpose) sections, you will find useful tips on reading this document. It is"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  then followed by the [Features](#features) section, where the main features of TrackIt@NUS are documented."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Common Symbols \u003ca name\u003d\"common-symbols\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| Symbol | Description |"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| --- | ----------- |"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| :information_source: | Something important to take note of |"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| :bulb: | A tip is being mentioned |"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| :warning: | Something to be careful of |"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Command Format \u003ca name\u003d\"command-format\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Format** | **Meaning** | **Example** |"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| ----- | -------- | -------------- |"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| `lower_case/` | These are **prefixes** and are used to separate the different parameters of a command | `n/`, `d/`, `t/` |"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| `UPPER_CASE` | These are **parameters** and need to be supplied to complete certain commands | `C add n/John ...` |"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| `[UPPER_CASE]` |  These are **optional parameters** | `C add n/John ...` or `C add n/John t/Friend ...` both work |"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| `…`​ | These are parameters that can be used **multiple times** or **none at all** | `C add n/John t/Brother-in-law t/Colleague t/Friend ...` |"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":information_source: Parameters can be in any order. e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Commands and their Purposes \u003ca name\u003d\"command-purpose\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Command** | ** Purpose** |"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| -------- | --------- |"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Add** | Add a module/lesson/task/contact to TrackIt@NUS. Relevant parameters must be present |"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Edit** | Edit a module/lesson/task/contact. Relevant parameters must be present. All parameters that are not specified will **remain unchanged** |"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Delete** | Delete a module/lesson/task/contact. Relevant parameters must be present |"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "## Layout \u003ca name\u003d\"layout\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "This section gives you a brief overview of the layout of TrackIt@NUS."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "TrackIt@NUS is divided into three main types of tabs:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "* The **Upcoming** Tab,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "* The **Contacts** Tab, and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "* **Module** Tabs"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "When you switch to a tab, the tab text will be highlighted in **blue**."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "### Upcoming Tab \u003ca name\u003d\"upcomingtab\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "This is the main tab of the application, and is the default page when the app is started. It features a calendar view of the days for the next week, as well as the **Tasks** and **Lessons** you have added under the respective days they fall under. "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "1. The first section labelled **\"Overdue\"** in red text, shows the Tasks that are past their deadline, and you have yet to complete. These **Tasks** will remain there until you delete them."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "2. The second section is the weekly calendar view, with your **Lessons** and **Tasks** shown under each day."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "3. The last section is labelled **Future**, and shows any **Tasks** that you may have added with a deadline falling after the date 7 days from today."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "![UpcomingPanelUi](images/UpcomingPanelUi.png)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "### Contacts Tab \u003ca name\u003d\"contactstab\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "The contacts tab shows you all the **contacts** you have within the app. It will show you information for each contact such as:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "* **NAME**: contact name"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "* **PHONE NUMBER**: contact\u0027s phone number"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "* **EMAIL**: contact\u0027s email"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "* **TAG**: any additional information you have about the contact, such as which module they are associated with (e.g. CS1010S), or their role (e.g. friend, TA)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "### Module Tabs \u003ca name\u003d\"moduletabs\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "![ModuleTab](images/ModuleTab.png)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "Here under each module\u0027s tab you can find all relevant **Lessons**, **Tasks** and **Contacts** that are related to the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " module. Very convenient right? These information will be displayed in 3 sections:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": " "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "1. **Lessons**: Here you can find the info for all weekly lessons, including its time, locations/Zoom links so"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " say goodbye to missing classes (intentional skip not included😉)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "2. **Tasks**: All the tasks for the module that you haven\u0027t done, listed in **chronological** order so that you know"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " what"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " to prioritize! Tips: Don\u0027t leave tutorials or assignments until the last day, chances are you not gonna finish it."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "3. **Contacts**: Having difficulties with your assignment? Need TA\u0027s emails to ask? Look no further, this section"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " will list all contacts that are tagged with this module code! "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## Features \u003ca name\u003d\"features\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "This section contains all the information you need to know about the features of TrackIt@NUS. To use each feature or"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " sub-feature, you will need to enter the command into the Command Box."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## Module \u003ca name\u003d\"module\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "Module is the first thing you need to create when you start using the app, because each module will be the house for "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "all of its lessons, tasks and related contacts. So, let\u0027s find out how to create a new module! "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Add"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "Create a new house for your data (Or shall I say it is to create a new category of things to worry about?)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Format: `M add m/MODULE_CODE n/NAME`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Examples: `M add m/CS1231S n/Discrete Structures`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Edit"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "Because modules are displayed on the sidebar, it doesn\u0027t come with index. That\u0027s why to edit \u0026 delete module, its"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " code will be used! Let\u0027s see how the syntax of a module edit command:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "Format: `M edit m/MODULE_CODE n/NAME`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "Examples: `M edit m/CS1231S n/Programming Methodology`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "Remark: The `MODULE_CODE` provided must be present in the Module list. After the command, the specified module will"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " have a new name."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Delete"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "And what if you realized you accidentally added in a wrong module, or have finished one? Just delete that module! The"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " command\u0027s syntax is as follows: "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Format: `M delete m/MODULE_CODE`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Examples: `M delete m/CS2100`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "Remark: **IMPORTANT**: When you delete a module, the app will delete all of its related tasks \u0026 lessons, so check"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " twice before you delete them! "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## Lesson \u003ca name\u003d\"lesson\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "Lectures, tutorials, labs, lectures, lectures, recitations, lectures..."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "Sometimes, just looking at the timetable makes you question your life choices,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "probably until the next class starts. "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "While TrackIt@NUS can\u0027t do much to ease your pain, it can, at the very least,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "make sure you won\u0027t miss any of those beloved (or dreaded) classes!"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "To view all your lessons (classes) for the next week, "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "simply click on the upcoming tab as shown below."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "![Ui](images/UpcomingLessons.png)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "This sorts all your lessons by date."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "To view the lessons of a specific module, click on any of the module tabs as shown below."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "![Ui](images/ModuleLessons.png)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ":information_source: As of v1.3, only weekly lessons are supported."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "Biweekly and monthly lessons may be added in subsequent versions."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "You can also perform commands on the lessons as explained below."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Add"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "The command that makes you moan every time you have to use it. "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "Use this command to add a lesson to a module."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "Format: `L add m/MODULE_CODE n/TYPE d/DATE`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "* `L add m/GET1020 n/lecture d/Mon 8:00-10:00`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "* `L add m/CS3233 n/tutorial d/MON 17:30-20:00`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ":warning: The `TYPE` must be one of the following: `lecture`, `tutorial`,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "`lab`, `recitation`, or `sectional`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ":warning: The `DATE` provided must be in the format `ddd H:mm-H:mm`;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "times are in 24-hour format."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Edit"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "After adding a lesson, you might still want to change its details. "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "This is the command to do so."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "Format: `L edit INDEX [m/MODULE_CODE] [n/TYPE] [d/DATE]`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "* `L edit 1 m/CS2103T n/tutorial d/Mon 14:00-15:00`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "* `L edit 4 m/CS3233`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ":information_source: The parameters `m/MODULE_CODE`, `n/TYPE`, and `d/DATE` are optional;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "however, at least one parameter must be provided, i.e. `L edit 1` is not a valid command"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ":information_source: The `INDEX` provided must be positive "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "and cannot be larger than the number of lessons currently shown"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Delete"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "Sometimes, you might want to delete a particular lesson, probably since you\u0027ve added"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "it by mistake, or you hate it so much you want to forget its existence,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "or simply because the module has finished (hooray!). This is the command to do so."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Format: `L delete INDEX`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "* `L delete 1`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ":information_source: The `INDEX` provided must be positive "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "and cannot be larger than the number of lessons currently shown"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## Task \u003ca name\u003d\"task\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Managing all your tasks can be so stressful! TrackIt@NUS helps alleviate that stress with our built-in Task Manager"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "! To view all your tasks, simply click on the upcoming tab as shown below."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "![Upcoming](images/Upcoming.png)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "This sorts all your tasks by date. To view module-specific tasks, click on any of the module tabs as shown below."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "![ModuleTasks](images/ModuleTasks.png)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":information_source: All module-specific tasks are shown in the upcoming tab, but not vice versa."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "You can also perform commands on the tasks as explained below."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Add"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "After a day of school you realise that you now have a few more tasks to complete and wish to keep track of them. This is"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " the command for adding a new task to TrackIt@NUS."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Format: `T add n/NAME d/DATE [m/MODULE_CODE] [r/REMARK]`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* `T add n/Assignment 1 m/CS2100 d/20/11/2020 r/Focus on Chapters 1-3`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* `T add n/Plan for Bob\u0027s birthday d/12/11/2020`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* `T add n/Buy mooncakes for Mum d/28/10/2020 r/Remember to get Durian-flavoured ones`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":information_source: The parameters `m/MODULE_CODE` and `r/REMARK` are optional"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":warning: The `DATE` provided must be in the format `dd/MM/yyyy`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Edit"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "After adding a task to TrackIt@NUS, you may want to change it, perhaps extend the deadline or change it\u0027s remark. The"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " edit command is what you should use to do so."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Format: `T edit INDEX [n/NAME] [d/DATE] [m/MODULE_CODE] [r/REMARK]`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "![EditTask](images/EditTask.png)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* `T edit 2 n/Work on midterm report` changes the name of the Task"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* `T edit 2 r/min 1000 words` changes the remark of the Task"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* `T edit 2 m/CS2100` changes the module code of the Task"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":information_source: The `INDEX` provided must be positive and cannot be larger than number of Tasks"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":warning: At least 1 field must be provided for editing. i.e. `T edit 1` is not allowed"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":bulb: Write `T edit 1 m/` to remove the module code from the task. Now, the task does not belong to any module"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Delete"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Once you have completed a task, you can delete it. This is the command to do so."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Format: `T delete INDEX`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Examples: `T delete 2`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":information_source: The `INDEX` provided must be positive and cannot be larger than the number of Tasks"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## Contact \u003ca name\u003d\"contact\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "Don\u0027t you hate it when you need help for one of your modules but you just can\u0027t remember who else is taking the module with you? "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "Luckily for you, TrackIt@NUS allows you to tag your contacts with the modules you have in common, and lets you see those contacts all at once! Simply click on a module tab and you will find the list of contacts associated with that module, as you can see below."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "![ModuleTabContacts](images/ModuleTabContacts.png)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "To view all contacts from all modules, as well as any contacts that are not associated with any module, click on the **Contacts** tab in the side panel."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "### Add"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "A new semester has started and you want to keep track of your new classmates. This is the command to add a new contact."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Format: `C add n/NAME p/PHONE_NUMBER e/EMAIL [t/TAG]...`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "* `C add n/John Doe p/98765432 e/jon@jon.com t/CS2020`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "* `C add n/Rajesh Kumar p/98762342 e/raj@law.com t/Friend`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Edit"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "After adding a contact to TrackIt@NUS, maybe you realised you spelt their name wrong, or you want to update the contact fields. The edit command is what you should use to do so."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Format: `C edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [t/TAG]...`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "* `C edit 1 n/Johnny Depp` changes the name of the Contact."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "* `C edit 2 n/Sam e/sam@gmail.com t/CS2100 t/TA` changes the name, email and tags of the Contact."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Remark: The `INDEX` provided must be positive and cannot be larger than the number of Contacts. At least 1"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " field must be provided for editing. i.e. `C edit 1` is not allowed."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":warning: When editing tags, existing tags of contact will be removed (i.e. adding tags is not cumulative)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":bulb: Can remove all tags by typing t/ without any tags following it"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Delete"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "You have broken up with your girlfriend and want to forget their existence, starting by deleting their contact in TrackIt@NUS. This is the command to do so."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Format: `C delete INDEX`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Examples: `C delete 1`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Remark: The `INDEX` provided must be positive and cannot be larger than the number of Contacts."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## Getting help \u003ca name\u003d\"help\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "For: Getting help from the program."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Examples: `help`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## Exiting the app \u003ca name\u003d\"exit\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "For: Exit the program."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Examples: `exit`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## Saving the data"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "TrackIt@NUS data is saved in the hard disk automatically after any command that changes the data. There is no need to"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " save manually."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## FAQ \u003ca name\u003d\"faq\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " the data of your previous TrackIt@NUS home folder."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "## Command Summary \u003ca name\u003d\"command-summary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Module \u003ca name\u003d\"module-commands\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| Command | Example |"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| ---- | ------ |"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Add:** `M add m/MODULE_CODE n/NAME` | `M add m/CS2100 n/Computer Organisation` |"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "| **Edit:** `M edit m/MODULE_CODE [n/NAME]` | `M edit n/Discrete Mathematics` |"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Delete:** `M delete m/MODULE_CODE` | `M delete m/CS1101S` |"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Task \u003ca name\u003d\"task-commands\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| Command | Example |"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| ---- | ------ |"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Add:** `T add n/NAME d/DATE [m/MODULE_CODE] [r/REMARK]` | `T add n/Assignment 1 d/20/11/2020 r/Focus on Chapters 1-3` |"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Edit:** `T edit INDEX [n/NAME] [d/DATE] [m/MODULE_CODE] [r/REMARK]` | `T edit 1 n/Finish Assignment` |"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Delete:** `T delete INDEX` | `T delete 1` |"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Lesson \u003ca name\u003d\"lesson-commands\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| Command | Example |"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| ---- | ------ |"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Add:** `L add m/MODULE_CODE n/TYPE d/DATE a/LOCATION` | `L add m/CS2103T n/tutorial d/2pm - 3pm Wed a/COM1` |"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Edit:** `L edit INDEX [m/MODULE_CODE] [n/TYPE] [d/DATE] [a/LOCATION]` | `L edit 1 a/LT17` |"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Delete:** `L delete INDEX` | `L delete 1` |"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Contact \u003ca name\u003d\"contact-commands\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| Command | Example |"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| ------ | ---------- |"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Add:** `C add n/NAME p/PHONE_NUMBER e/EMAIL [t/TAG]...` | `C add n/John Doe p/98765432 e/jon@jon.com t/Brother` |"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Edit:** `C edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [t/TAG]...` | `C edit 1 n/Johnny Depp p/98999899` |"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Delete:** `C delete INDEX` | `C delete 1` |"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### General \u003ca name\u003d\"general-commands\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| Command | Example |"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| ---- | ------ |"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Help:** `help` | `help` |"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "| **Exit:** `exit` | `exit` |"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 43,
      "-": 99,
      "simonteozw": 216,
      "UncleGrandpa925": 23,
      "nguyendqminh": 49
    }
  },
  {
    "path": "docs/diagrams/AddTaskActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":User enters command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "if () then ([valid command])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    :Parse command arguments;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    :Execute command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    :Save new task list to trackIter.json;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    :Show success message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    :Shows an invalid command message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 17
    }
  },
  {
    "path": "docs/diagrams/AddTaskSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \":AddTaskCommand\" as AddTaskCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \"t:Task\" as task LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \"m:Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \":TrackIter\" as TrackIter MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \":UniqueTaskList\" as UniqueTaskList MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[-\u003e AddTaskCommand : execute(m)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate AddTaskCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "AddTaskCommand -\u003e Model : hasTask(t)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Model --\u003e AddTaskCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "AddTaskCommand -\u003e task : getCode()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "task --\u003e AddTaskCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "AddTaskCommand -\u003e Model : hasModule(t.getCode().get())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Model --\u003e AddTaskCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "AddTaskCommand -\u003e Model : addTask(t)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Model -\u003e TrackIter : addTask(t)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate TrackIter"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "TrackIter -\u003e UniqueTaskList : add(t)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate UniqueTaskList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "UniqueTaskList --\u003e TrackIter"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate UniqueTaskList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "TrackIter --\u003e Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate TrackIter"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Model --\u003e AddTaskCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "AddTaskCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "CommandResult --\u003e AddTaskCommand : r"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[\u003c--AddTaskCommand : r"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate AddTaskCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 65
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(trackIter)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "docs/diagrams/DeleteTaskSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \":DeleteTaskCommand\" as DeleteTaskCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \"targetIndex:Index\" as index LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \"r:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \"m:Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \":TrackIter\" as TrackIter MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \":UniqueTaskList\" as UniqueTaskList MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[-\u003e DeleteTaskCommand : execute(m)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate DeleteTaskCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "DeleteTaskCommand -\u003e Model : getFilteredTaskList()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "DeleteTaskCommand -\u003e index : getZeroBased()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate index"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "index --\u003e DeleteTaskCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate index"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Model --\u003e DeleteTaskCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "DeleteTaskCommand -\u003e Model : deleteTask(t)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Model -\u003e TrackIter : removeTask(t)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate TrackIter"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "TrackIter -\u003e UniqueTaskList : remove(t)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate UniqueTaskList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "UniqueTaskList --\u003e TrackIter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate UniqueTaskList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "TrackIter --\u003e Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate TrackIter"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Model --\u003e DeleteTaskCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "DeleteTaskCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "CommandResult --\u003e DeleteTaskCommand : r"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[\u003c--DeleteTaskCommand : r"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate DeleteTaskCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 59
    }
  },
  {
    "path": "docs/diagrams/EditTaskActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":User enters `T edit INDEX m/`;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":ArgumentMultimap checks that the module code prefix is present;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":ParserUtil parses the module code and returns null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":EditTaskDescriptor sets the module code to null and sets isCodeChanged to true;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":EditTaskCommand checks isCodeChanged and confirms that user intends to remove the module code;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ":EditTaskCommand sets the edited task\u0027s module code field to null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 14
    }
  },
  {
    "path": "docs/diagrams/EditTaskSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \":EditTaskCommand\" as EditTaskCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \"index:Index\" as index LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \"m:Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \":TrackIter\" as TrackIter MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \":UniqueTaskList\" as UniqueTaskList MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[-\u003e EditTaskCommand : execute(m)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate EditTaskCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "EditTaskCommand -\u003e Model : getFilteredTaskList()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Model --\u003e EditTaskCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "EditTaskCommand -\u003e index : getZeroBased()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate index"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "index --\u003e EditTaskCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "EditTaskCommand -\u003e EditTaskCommand : createEditedTask(taskToEdit, editTaskDescriptor)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate EditTaskCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "EditTaskCommand --\u003e EditTaskCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate EditTaskCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "EditTaskCommand -\u003e Model : setTask(taskToEdit, editedTask)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Model -\u003e TrackIter : setTask(taskToEdit, editedTask)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate TrackIter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "TrackIter -\u003e UniqueTaskList : setTask(taskToEdit, editedTask)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate UniqueTaskList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "UniqueTaskList --\u003e TrackIter"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate UniqueTaskList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "TrackIter --\u003e Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate TrackIter"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Model --\u003e EditTaskCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "EditTaskCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "CommandResult --\u003e EditTaskCommand : r"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[\u003c--EditTaskCommand : r"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate EditTaskCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 64
    }
  },
  {
    "path": "docs/diagrams/GetModuleTasksSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "participant \"p:TaskhasCodePredicate\" as Pred MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[-\u003e LogicManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "LogicManager -\u003e Model : getModuleTasks(code)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "create Pred"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Model -\u003e Pred"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate Pred"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Pred --\u003e Model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate Pred"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Model -\u003e Model : updateFilteredTaskList(p)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Model --\u003e Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Model --\u003e LogicManager"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 38
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "Participant \":TrackIterParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "ecp -\u003e ec ++: index, editContactDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "UncleGrandpa925": 2
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "title: TrackIt@NUS"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W13-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W13-4/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "**TrackIt@NUS is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "* If you are interested in using TrackIt@NUS, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "* If you are interested about developing TrackIt@NUS, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "UncleGrandpa925": 6
    }
  },
  {
    "path": "src/main/java/trackitnus/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "UncleGrandpa925": 11
    }
  },
  {
    "path": "src/main/java/trackitnus/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "UncleGrandpa925": 5
    }
  },
  {
    "path": "src/main/java/trackitnus/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyTrackIter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.TrackIter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.storage.JsonTrackIterStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.storage.TrackIterStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TrackIter ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        TrackIterStorage trackIterStorage \u003d new JsonTrackIterStorage(userPrefs.getTrackIterFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        storage \u003d new StorageManager(trackIterStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Optional\u003cReadOnlyTrackIter\u003e trackIterOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ReadOnlyTrackIter initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            trackIterOptional \u003d storage.readTrackIter();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            if (!trackIterOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TrackIter\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            initialData \u003d trackIterOptional.orElseGet(SampleDataUtil::getSampleTrackIter);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TrackIter\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            initialData \u003d new TrackIter();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TrackIter\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            initialData \u003d new TrackIter();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TrackIter\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        logger.info(\"Starting TrackIter \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 144,
      "UncleGrandpa925": 39
    }
  },
  {
    "path": "src/main/java/trackitnus/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static final String LOG_FILE \u003d \"trackIter.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 109,
      "UncleGrandpa925": 4
    }
  },
  {
    "path": "src/main/java/trackitnus/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX \u003d \"The contact index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String MESSAGE_INVALID_TYPE \u003d \"The type provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public static final String MESSAGE_INVALID_TAB_VALUE \u003d \"Invalid tab values.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_CONTACTS_LISTED_OVERVIEW \u003d \"%1$d contacts listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String MESSAGE_LESSON_DOES_NOT_EXIST \u003d \"There is no such lesson\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String MESSAGE_INVALID_LESSON_DISPLAYED_INDEX \u003d \"The lesson index provided is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_MODULE_DOES_NOT_EXIST \u003d \"The module specified in the command doesn\u0027t exist.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_TASK_DOES_NOT_EXIST \u003d \"There is no such task\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONTACT \u003d \"This contact already exists\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"This lesson already exists\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String DATE_MESSAGE_CONSTRAINTS \u003d \"Date should be in the format dd/MM/yyyy\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String WEIGHTAGE_MESSAGE_CONSTRAINTS \u003d \"Weightage should be in the\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        + \" form of a floating point number\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "UncleGrandpa925": 15,
      "simonteozw": 3,
      "justweihong": 1,
      "nguyendqminh": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 98,
      "UncleGrandpa925": 19
    }
  },
  {
    "path": "src/main/java/trackitnus/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "UncleGrandpa925": 11
    }
  },
  {
    "path": "src/main/java/trackitnus/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "UncleGrandpa925": 2
    }
  },
  {
    "path": "src/main/java/trackitnus/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "UncleGrandpa925": 4
    }
  },
  {
    "path": "src/main/java/trackitnus/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "UncleGrandpa925": 3
    }
  },
  {
    "path": "src/main/java/trackitnus/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "UncleGrandpa925": 3
    }
  },
  {
    "path": "src/main/java/trackitnus/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static final ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 138,
      "UncleGrandpa925": 8
    }
  },
  {
    "path": "src/main/java/trackitnus/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        AppUtil.checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        AppUtil.checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "UncleGrandpa925": 5
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyTrackIter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns the TrackIter."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @see Model#getTrackIter()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ReadOnlyTrackIter getTrackIter();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A list of all contacts."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    ObservableList\u003cContact\u003e getAllContacts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of contacts"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cContact\u003e getFilteredContactList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of modules"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of tasks"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of lessons"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    ObservableList\u003cLesson\u003e getFilteredLessonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param date The date to query"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @return all lessons happens on that date"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cLesson\u003e getDayUpcomingLessons(LocalDate date);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param code The module code to query"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @return the list of lesson for a specific module"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cLesson\u003e getModuleLessons(Code code);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @param code The module code to query"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @return the list of contacts for a specific module"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cContact\u003e getModuleContacts(Code code);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param code The module code to query"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @return the list of task for a specific module"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cTask\u003e getModuleTasks(Code code);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return The list of all tasks that were due before today."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    ObservableList\u003cTask\u003e getOverdueTasks();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return The list of all tasks that are not due until more than a week later."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    ObservableList\u003cTask\u003e getFutureTasks();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param date The date to query"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @return the list of all tasks that take place on that specific day"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cTask\u003e getDayUpcomingTasks(LocalDate date);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param module The module to get index of"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @return The index of the module in the list of all modules"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    Index getModuleIndex(Module module) throws CommandException;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param task The task to get index of."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return The index of the task in list of all tasks."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    Index getTaskIndex(Task task) throws CommandException;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param lesson The lesson to get index of."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return The index of the lesson in list of all lessons."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    Index getLessonIndex(Lesson lesson) throws CommandException;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    Path getTrackIterFilePath();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 10,
      "-": 37,
      "UncleGrandpa925": 60,
      "simonteozw": 21,
      "justweihong": 9,
      "nguyendqminh": 5
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.TrackIterParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyTrackIter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final TrackIterParser trackIterParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIterParser \u003d new TrackIterParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Command command \u003d trackIterParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            storage.saveTrackIter(model.getTrackIter());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ReadOnlyTrackIter getTrackIter() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return model.getTrackIter();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public ObservableList\u003cContact\u003e getAllContacts() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return model.getAllContacts();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cContact\u003e getFilteredContactList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return model.getFilteredContactList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        return model.getFilteredLessonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //--------------------------------START of V1.3\u0027s new functions--------------------------------"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cLesson\u003e getDayUpcomingLessons(LocalDate date) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return model.getDayUpcomingLessons(date);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cLesson\u003e getModuleLessons(Code code) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return model.getModuleLessons(code);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Index getLessonIndex(Lesson lesson) throws CommandException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return model.getLessonIndex(lesson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public ObservableList\u003cContact\u003e getModuleContacts(Code code) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return model.getModuleContacts(code);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cTask\u003e getModuleTasks(Code code) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return model.getModuleTasks(code);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public ObservableList\u003cTask\u003e getOverdueTasks() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return model.getOverdueTasks();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public ObservableList\u003cTask\u003e getFutureTasks() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return model.getFutureTasks();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cTask\u003e getDayUpcomingTasks(LocalDate date) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return model.getDayUpcomingTasks(date);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Index getModuleIndex(Module module) throws CommandException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return model.getModuleIndex(module);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public Index getTaskIndex(Task task) throws CommandException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return model.getTaskIndex(task);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //--------------------------------END of V1.3\u0027s new functions--------------------------------"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Path getTrackIterFilePath() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return model.getTrackIterFilePath();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 10,
      "-": 60,
      "UncleGrandpa925": 59,
      "justweihong": 14,
      "simonteozw": 16,
      "nguyendqminh": 2
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "UncleGrandpa925": 3
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "UncleGrandpa925": 7
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "UncleGrandpa925": 2
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "UncleGrandpa925": 2
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/contact/AddContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Adds a contact to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class AddContactCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d Contact.TYPE + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \": Adds a contact to the app.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"Example: \" + Contact.TYPE + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_ADD_CONTACT_SUCCESS \u003d \"New contact added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final Contact toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Creates an AddContactCommand to add the specified {@code Contact}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public AddContactCommand(Contact contact) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        toAdd \u003d contact;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (model.hasContact(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        model.addContact(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_CONTACT_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            || (other instanceof AddContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddContactCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "UncleGrandpa925": 16,
      "simonteozw": 9,
      "nguyendqminh": 3
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/contact/DeleteContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Deletes a contact identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class DeleteContactCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d Contact.TYPE + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \": Deletes the contact identified by the index number currently displayed on the screen.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"Example: \" + Contact.TYPE + \" \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_DELETE_CONTACT_SUCCESS \u003d \"Deleted Contact: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public DeleteContactCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        List\u003cContact\u003e lastShownList \u003d model.getFilteredContactList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Contact contactToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        model.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CONTACT_SUCCESS, contactToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            || (other instanceof DeleteContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteContactCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "UncleGrandpa925": 13,
      "simonteozw": 6,
      "nguyendqminh": 3
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/contact/EditContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.commons.core.Messages.MESSAGE_DUPLICATE_CONTACT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Edits the details of an existing contact in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class EditContactCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d Contact.TYPE + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \": Edits the details of the contact identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"by the index number currently displayed on the screen. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"Example: \" + Contact.TYPE + \" \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_EDIT_CONTACT_SUCCESS \u003d \"Edited Contact: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final EditContactDescriptor editContactDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param index                 of the contact in the filtered contact list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param editContactDescriptor details to edit the contact with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public EditContactCommand(Index index, EditContactDescriptor editContactDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(editContactDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.editContactDescriptor \u003d new EditContactDescriptor(editContactDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Creates and returns a {@code Contact} with the details of {@code contactToEdit}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * edited with {@code editContactDescriptor}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static Contact createEditedContact(Contact contactToEdit, EditContactDescriptor editContactDescriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assert contactToEdit !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Name updatedName \u003d editContactDescriptor.getName().orElse(contactToEdit.getName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Phone updatedPhone \u003d editContactDescriptor.getIsPhoneChanged()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ? editContactDescriptor.getPhone().orElse(null)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            : contactToEdit.getPhone().orElse(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Email updatedEmail \u003d editContactDescriptor.getIsEmailChanged()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ? editContactDescriptor.getEmail().orElse(null)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            : contactToEdit.getEmail().orElse(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editContactDescriptor.getTags().orElse(contactToEdit.getTags());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new Contact(updatedName, updatedPhone, updatedEmail, updatedTags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        List\u003cContact\u003e lastShownList \u003d model.getFilteredContactList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Contact contactToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact editedContact \u003d createEditedContact(contactToEdit, editContactDescriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!contactToEdit.isSameContact(editedContact) \u0026\u0026 model.hasContact(editedContact)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        model.setContact(contactToEdit, editedContact);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CONTACT_SUCCESS, editedContact));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (!(other instanceof EditContactCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        EditContactCommand e \u003d (EditContactCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 editContactDescriptor.equals(e.editContactDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Stores the details to edit the contact with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * corresponding field value of the contact."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static class EditContactDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        private boolean isPhoneChanged;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        private boolean isEmailChanged;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "         * Constructor for EditContactDescriptor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "         * By default both isChanged fields should be false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public EditContactDescriptor() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            isPhoneChanged \u003d false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            isEmailChanged \u003d false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public EditContactDescriptor(EditContactDescriptor toCopy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            isPhoneChanged \u003d toCopy.isPhoneChanged;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            isEmailChanged \u003d toCopy.isEmailChanged;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, tags) || isPhoneChanged || isEmailChanged;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            isPhoneChanged \u003d true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            isEmailChanged \u003d true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "         */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            if (!(other instanceof EditContactDescriptor)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            EditContactDescriptor e \u003d (EditContactDescriptor) other;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public boolean getIsPhoneChanged() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return isPhoneChanged;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public boolean getIsEmailChanged() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return isEmailChanged;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 132,
      "UncleGrandpa925": 92,
      "simonteozw": 10,
      "nguyendqminh": 4
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/contact/FindContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Finds and lists all contacts in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class FindContactCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d Contact.TYPE + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \": Finds all contacts whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"Example: \" + Contact.TYPE + \" \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public FindContactCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        model.updateFilteredContactList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            String.format(Messages.MESSAGE_CONTACTS_LISTED_OVERVIEW, model.getFilteredContactList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            || (other instanceof FindContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindContactCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "UncleGrandpa925": 9,
      "nguyendqminh": 4,
      "simonteozw": 4
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/lesson/AddLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.commons.core.Messages.MESSAGE_MODULE_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "public class AddLessonCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d Lesson.TYPE + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \": Adds a lesson to the app.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + PREFIX_CODE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + PREFIX_DATE + \"DATE\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"Example: \" + Lesson.TYPE + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + PREFIX_CODE + \"CS3233 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + PREFIX_TYPE + \"lecture \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + PREFIX_DATE + \"Wed 17:45-21:00\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_ADD_LESSON_SUCCESS \u003d \"New lesson added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    private final Lesson toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Creates an AddLessonCommand to add the specified {@code Lesson}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public AddLessonCommand(Lesson lesson) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        toAdd \u003d lesson;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!model.hasModule(toAdd.getCode())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        if (model.hasLesson(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        model.addLesson(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_LESSON_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            || (other instanceof AddLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddLessonCommand) other).toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 18,
      "nguyendqminh": 47
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/lesson/DeleteLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "public class DeleteLessonCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d Lesson.TYPE + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \": Deletes the lesson identified by the index number currently displayed on the screen.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"INDEX\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"Example: \" + Lesson.TYPE + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"2\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String MESSAGE_DELETE_LESSON_SUCCESS \u003d \"Deleted Lesson: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Creates a DeleteLessonCommand to delete the specified {@code Lesson}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public DeleteLessonCommand(Index index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        List\u003cLesson\u003e lastShownList \u003d model.getFilteredLessonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        Lesson lessonToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        model.deleteLesson(lessonToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_LESSON_SUCCESS, lessonToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            || (other instanceof DeleteLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteLessonCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 8,
      "nguyendqminh": 51
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/lesson/EditLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.commons.core.Messages.MESSAGE_DUPLICATE_LESSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.commons.core.Messages.MESSAGE_MODULE_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import trackitnus.model.lesson.LessonDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "public class EditLessonCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d Lesson.TYPE + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \": Edits the details of the lesson\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \" identified by the index number currently displayed on the screen.\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \" At least one of the details has to be specified.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"[\" + PREFIX_CODE + \"MODULE_CODE] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"[\" + PREFIX_TYPE + \"TYPE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"[\" + PREFIX_DATE + \"DATE]\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"Example: \" + Lesson.TYPE + \" \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + PREFIX_CODE + \"CS3233 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + PREFIX_TYPE + \"lecture \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + PREFIX_DATE + \"Mon 17:45-21:00\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String MESSAGE_EDIT_LESSON_SUCCESS \u003d \"Edited Lesson: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    private final EditLessonDescriptor editLessonDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Creates a EditLessonCommand to edit the specified {@code Lesson}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @param editLessonDescriptor"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public EditLessonCommand(Index index, EditLessonDescriptor editLessonDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        requireNonNull(editLessonDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        this.editLessonDescriptor \u003d new EditLessonDescriptor(editLessonDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Creates and returns a {@code Contact} with the details of {@code contactToEdit}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * edited with {@code editContactDescriptor}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    private static Lesson createEditedLesson(Lesson lessonToEdit, EditLessonDescriptor editLessonDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        assert lessonToEdit !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        Code updatedCode \u003d editLessonDescriptor.getCode().orElse(lessonToEdit.getCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Type updatedType \u003d editLessonDescriptor.getType().orElse(lessonToEdit.getType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        LessonDateTime updatedDate \u003d editLessonDescriptor.getDate().orElse(lessonToEdit.getDate());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return new Lesson(updatedCode, updatedType, updatedDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        List\u003cLesson\u003e lastShownList \u003d model.getFilteredLessonList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        if (!editLessonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        Lesson lessonToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        Lesson editedLesson \u003d createEditedLesson(lessonToEdit, editLessonDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        if (!lessonToEdit.isSameLesson(editedLesson) \u0026\u0026 model.hasLesson(editedLesson)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!model.hasModule(editedLesson.getCode())) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        model.setLesson(lessonToEdit, editedLesson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_LESSON_SUCCESS, editedLesson));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        if (!(other instanceof EditLessonCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        EditLessonCommand e \u003d (EditLessonCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            \u0026\u0026 editLessonDescriptor.equals(e.editLessonDescriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Stores the details to edit the contact with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * corresponding field value of the contact."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static class EditLessonDescriptor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        private Code code;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        private Type type;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        private LessonDateTime date;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        public EditLessonDescriptor() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        public EditLessonDescriptor(EditLessonDescriptor toCopy) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            setCode(toCopy.code);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            setType(toCopy.type);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return CollectionUtil.isAnyNonNull(code, type, date);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        public Optional\u003cCode\u003e getCode() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return Optional.ofNullable(code);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        public void setCode(Code code) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            this.code \u003d code;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        public Optional\u003cType\u003e getType() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return Optional.ofNullable(type);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        public void setType(Type type) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        public Optional\u003cLessonDateTime\u003e getDate() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        public void setDate(LessonDateTime date) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            if (!(other instanceof EditLessonDescriptor)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            EditLessonDescriptor e \u003d (EditLessonDescriptor) other;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return getCode().equals(e.getCode())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                \u0026\u0026 getType().equals(e.getType())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                \u0026\u0026 getDate().equals(e.getDate());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 22,
      "nguyendqminh": 172
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/module/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d Module.TYPE + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \": Adds a module to the app.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + PREFIX_CODE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + PREFIX_NAME + \"NAME\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"Example: \" + Module.TYPE + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        + PREFIX_CODE + \"CS1231S \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        + PREFIX_NAME + \"Discrete Structures\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_ADD_MODULE_SUCCESS \u003d \"New module added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Creates an AddModule to add the specified {@code Module}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public AddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_MODULE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            || (other instanceof AddModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddModuleCommand) other).toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 51,
      "nguyendqminh": 5
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/module/DeleteModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d Module.TYPE + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        + \": Deletes the module identified by the module code.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"Parameters: \" + PREFIX_CODE + \"MODULE_CODE (must be an existing code)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        + String.format(\"Example: %s %s %sCS1231S\", Module.TYPE, COMMAND_WORD, PREFIX_CODE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"Deleted Module: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Code targetCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public DeleteModuleCommand(Code targetCode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.targetCode \u003d targetCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Optional\u003cModule\u003e moduleToDelete \u003d model.getModule(targetCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (moduleToDelete.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // delete all the related tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ObservableList\u003cTask\u003e moduleTasks \u003d model.getModuleTasks(targetCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (Task task : moduleTasks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            model.deleteTask(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // delete all the related lessons"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ObservableList\u003cLesson\u003e moduleLessons \u003d model.getModuleLessons(targetCode);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (Lesson lesson : moduleLessons) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            model.deleteLesson(lesson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // delete the module"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        model.deleteModule(moduleToDelete.get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete.get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            || (other instanceof DeleteModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 targetCode.equals(((DeleteModuleCommand) other).targetCode)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 67,
      "nguyendqminh": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/module/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.commons.core.Messages.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class EditModuleCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d Module.TYPE + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \": Edits the details of the module \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        + \"identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"by the module code. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + PREFIX_CODE + \"MODULE_CODE (must be an existing code) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        + String.format(\"Example: %s %s %sCS1231S %sDiscrete Structures\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Module.TYPE, COMMAND_WORD, PREFIX_CODE, PREFIX_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"Edited Module: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Code code;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final EditModuleDescriptor editModuleDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param code                 of the module in the filtered module list to edit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param editModuleDescriptor details to edit the module with"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public EditModuleCommand(Code code, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(editModuleDescriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.editModuleDescriptor \u003d new EditModuleDescriptor(editModuleDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Creates and returns a {@code Model} with the details of {@code moduleToEdit}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static Module createEditedModule(Module moduleToEdit,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                                             EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Code originalCode \u003d moduleToEdit.getCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Name updatedName \u003d editModuleDescriptor.getName().orElse(moduleToEdit.getName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new Module(originalCode, updatedName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Optional\u003cModule\u003e moduleToEdit \u003d model.getModule(code);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (moduleToEdit.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Module editedModule \u003d createEditedModule(moduleToEdit.get(), editModuleDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!moduleToEdit.get().isSameModule(editedModule) \u0026\u0026 model.hasModule(editedModule)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        model.setModule(moduleToEdit.get(), editedModule);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MODULE_SUCCESS, editedModule));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!(other instanceof EditModuleCommand)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditModuleCommand e \u003d (EditModuleCommand) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return code.equals(e.code)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 editModuleDescriptor.equals(e.editModuleDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return \"EditModuleCommand{\" +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \"code\u003d\" + code +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \", editModuleDescriptor\u003d\" + editModuleDescriptor +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0027}\u0027;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Stores the details to edit the module with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * corresponding field value of the module."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static class EditModuleDescriptor {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public EditModuleDescriptor() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public EditModuleDescriptor(EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            if (!(other instanceof EditModuleDescriptor)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            EditModuleDescriptor e \u003d (EditModuleDescriptor) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return getName().equals(e.getName());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return \"EditModuleDescriptor{\" +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                \"name\u003d\" + name +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                \u0027}\u0027;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 164,
      "nguyendqminh": 5
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/task/AddTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.commons.core.Messages.MESSAGE_MODULE_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d Task.TYPE + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \": Adds a task to the app.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"[\" + PREFIX_CODE + \"MODULE_CODE] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + \"[\" + PREFIX_REMARK + \"REMARK]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + \"Example: \" + Task.TYPE + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + PREFIX_NAME + \"CS2103T Final \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + PREFIX_DATE + \"22/12/2020 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + PREFIX_REMARK + \"Favourite module!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_ADD_TASK_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Creates an AddContactCommand to add the specified {@code Contact}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (toAdd.getCode().isPresent() \u0026\u0026 !model.hasModule(toAdd.getCode().get())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_TASK_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddTaskCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 18,
      "simonteozw": 46,
      "nguyendqminh": 3
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/task/DeleteTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d Task.TYPE + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \": Deletes the task identified by the index number currently displayed on the screen.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + \"Example: \" + Task.TYPE + \" \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public DeleteTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteTaskCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 8,
      "simonteozw": 43,
      "nguyendqminh": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/commands/task/EditTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.commons.core.Messages.MESSAGE_DUPLICATE_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.commons.core.Messages.MESSAGE_MODULE_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class EditTaskCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d Task.TYPE + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        + \"by the index number currently displayed on the screen. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + \"[\" + PREFIX_CODE + \"MODULE_CODE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + \"[\" + PREFIX_REMARK + \"REMARK]...\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + \"Example: \" + Task.TYPE + \" \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + PREFIX_REMARK + \"New remark\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final EditTaskCommand.EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param index              of the task in the filtered contact list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public EditTaskCommand(Index index, EditTaskCommand.EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskCommand.EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Name updatedName \u003d editTaskDescriptor.getName().orElse(taskToEdit.getName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        LocalDate updatedDate \u003d editTaskDescriptor.getDate().orElse(taskToEdit.getDate());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Code updatedCode \u003d editTaskDescriptor.getIsCodeChanged()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            ? editTaskDescriptor.getCode().orElse(null)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            : taskToEdit.getCode().orElse(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String updatedRemarks \u003d editTaskDescriptor.getIsRemarkChanged()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            ? editTaskDescriptor.getRemark().orElse(\"\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            : taskToEdit.getRemark();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new Task(updatedName, updatedDate, updatedCode, updatedRemarks);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (editedTask.getCode().isPresent() \u0026\u0026 !model.hasModule(editedTask.getCode().get())) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (!(other instanceof EditTaskCommand)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        EditTaskCommand e \u003d (EditTaskCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return \"EditTaskCommand{\" +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \"index\u003d\" + index +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \", editTaskDescriptor\u003d\" + editTaskDescriptor +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0027}\u0027;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        private LocalDate date;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        private Code code;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        private String remark;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        private boolean isCodeChanged;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        private boolean isRemarkChanged;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "         * Constructor for EditTaskDescriptor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        public EditTaskDescriptor() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            isCodeChanged \u003d false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            isRemarkChanged \u003d false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        public EditTaskDescriptor(EditTaskCommand.EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            setCode(toCopy.code);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            isCodeChanged \u003d toCopy.isCodeChanged;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            isRemarkChanged \u003d toCopy.isRemarkChanged;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, date) || isRemarkChanged || isCodeChanged;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        public Optional\u003cLocalDate\u003e getDate() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        public Optional\u003cCode\u003e getCode() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return Optional.ofNullable(code);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        public void setCode(Code code) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            this.code \u003d code;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            this.isCodeChanged \u003d true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        public Optional\u003cString\u003e getRemark() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        public void setRemark(String remark) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            this.remark \u003d (remark \u003d\u003d null ? \"\" : remark);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            this.isRemarkChanged \u003d true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        public boolean getIsCodeChanged() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return isCodeChanged;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        public boolean getIsRemarkChanged() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return isRemarkChanged;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            if (!(other instanceof EditTaskCommand.EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            EditTaskCommand.EditTaskDescriptor e \u003d (EditTaskCommand.EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                \u0026\u0026 getRemark().equals(e.getRemark());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return \"EditTaskDescriptor{\" +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                \"name\u003d\" + name +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                \", date\u003d\" + date +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                \", code\u003d\" + code +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                \", remark\u003d\u0027\" + remark +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                \u0027}\u0027;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 38,
      "simonteozw": 198,
      "nguyendqminh": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "UncleGrandpa925": 4
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        private final int startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 145,
      "UncleGrandpa925": 3
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final Prefix PREFIX_CODE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final Prefix PREFIX_WEIGHTAGE \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "UncleGrandpa925": 1,
      "nguyendqminh": 3,
      "simonteozw": 2
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "UncleGrandpa925": 4
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.DayOfWeek;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import trackitnus.model.lesson.LessonDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final DateTimeFormatter DATE_PATTERN \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Parses an {@code Optional\u003cString\u003e phone} into an {@code Phone}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static Phone parseOptionalPhone(Optional\u003cString\u003e phone) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (phone.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String trimmedPhone \u003d phone.get().trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (trimmedPhone.isBlank()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static Email parseOptionalEmail(Optional\u003cString\u003e email) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (email.isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String trimmedEmail \u003d email.get().trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (trimmedEmail.isBlank()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Parses a {@code String code} into an {@code Code}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @throws ParseException if the given {@code code} is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static Code parseCode(String code) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String trimmedCode \u003d code.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!Code.isValidCode(trimmedCode)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new Code(trimmedCode);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Parses an {@code Optional\u003cString\u003e code} into an {@code Code}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws ParseException if the given {@code code} is invalid."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static Code parseOptionalCode(Optional\u003cString\u003e code) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (code.isEmpty()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String trimmedCode \u003d code.get().trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (trimmedCode.isBlank()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (!Code.isValidCode(trimmedCode)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new ParseException(Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new Code(trimmedCode);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Parses a {@code String str} into a {@code String}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @throws ParseException if the given {@code str} is invalid."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static String parseString(String str) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(str);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return str.trim();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Parses a {@code String date} into a {@code LocalDate}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return LocalDate.parse(trimmedDate, DATE_PATTERN);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(Messages.DATE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Parses a VALID {@code String date} into a {@code LocalDate}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Crash the program if the date cannot be parsed (it\u0027s the caller responsibility to make sure the date passed in"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * is valid!). The function is written so that the caller doesn\u0027t need to handle the possible exception since"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * it\u0027s expected that no exception will be thrown."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static LocalDate parseValidDate(String date) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return LocalDate.parse(trimmedDate, DATE_PATTERN);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new IllegalArgumentException(\"An invalid date has been passed into parseValidDate\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Parses a {@code String weightage} into a {@code double}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @throws ParseException if the given {@code weightage} is invalid."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static double parseWeightage(String weightage) throws ParseException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        requireNonNull(weightage);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        String trimmedWeightage \u003d weightage.trim();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return Double.parseDouble(trimmedWeightage);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(Messages.WEIGHTAGE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Parses a {@code String remark} into a {@code String}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws ParseException if the given {@code remark} is invalid."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static String parseRemark(Optional\u003cString\u003e remark) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (remark.isEmpty()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String trimmedRemark \u003d remark.get().trim();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return trimmedRemark;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Parses a {@code String type} into a {@code Type}."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static Type parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String rawType \u003d type.trim().toLowerCase();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        switch (rawType) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        case \"lecture\":"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        case \"lec\":"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return Type.LEC;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        case \"tutorial\":"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        case \"tut\":"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return Type.TUT;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        case \"lab\":"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        case \"laboratory\":"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return Type.LAB;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        case \"recitation\":"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        case \"rec\":"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return Type.REC;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        case \"sectional\":"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        case \"sec\":"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return Type.SEC;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            throw new ParseException(Lesson.TYPE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Parses a {@code String weekday} into a {@code LessonWeekday}."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @throws ParseException if the given {@code weekday} is invalid."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static DayOfWeek parseLessonWeekday(String weekday) throws ParseException {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        requireNonNull(weekday);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        String raw \u003d weekday.trim().toLowerCase();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        switch (raw) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        case \"sun\":"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return DayOfWeek.Sun;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        case \"mon\":"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return DayOfWeek.Mon;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        case \"tue\":"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return DayOfWeek.Tue;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        case \"wed\":"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return DayOfWeek.Wed;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        case \"thu\":"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return DayOfWeek.Thu;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        case \"fri\":"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return DayOfWeek.Fri;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        case \"sat\":"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return DayOfWeek.Sat;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(Lesson.LESSON_TIME_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Parses a {@code String date} into a {@code LessonDateTime}."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static LessonDateTime parseLessonDateTime(String date) throws ParseException {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            String[] tokens \u003d trimmedDate.split(\" \", 2);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            String[] startEndTime \u003d tokens[1].split(\"-\", 2);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            DayOfWeek weekday \u003d parseLessonWeekday(tokens[0]);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(startEndTime[0], LessonDateTime.FORMATTER);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(startEndTime[1], LessonDateTime.FORMATTER);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            if (startTime.compareTo(endTime) \u003e 0) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                throw new ParseException(Lesson.TIME_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return new LessonDateTime(weekday, startTime, endTime);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            if (e instanceof ParseException) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                throw new ParseException(Lesson.LESSON_TIME_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 106,
      "UncleGrandpa925": 110,
      "nguyendqminh": 97,
      "simonteozw": 28
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/TrackIterParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.AddContactCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.DeleteContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.EditContactCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.FindContactCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.lesson.AddLessonCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.lesson.DeleteLessonCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.lesson.EditLessonCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.module.DeleteModuleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.module.EditModuleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.contact.AddContactCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.contact.DeleteContactCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.contact.EditContactCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.contact.FindContactCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.lesson.AddLessonCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.lesson.DeleteLessonCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.lesson.EditLessonCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.module.AddModuleCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.module.DeleteModuleCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.module.EditModuleCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.task.AddTaskCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.task.DeleteTaskCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.task.EditTaskCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class TrackIterParser {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ctype\u003e[A-Z]\\\\s+)?\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        + \"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        final String type \u003d matcher.group(\"type\") \u003d\u003d null ? \"\" : matcher.group(\"type\").trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        case Contact.TYPE:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            case AddContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return new AddContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            case EditContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return new EditContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            case DeleteContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return new DeleteContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            case FindContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return new FindContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        case Module.TYPE:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                return new AddModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            case EditModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                return new EditModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                return new DeleteModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        case Task.TYPE:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return new EditTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        case Lesson.TYPE:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            case AddLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                return new AddLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            case EditLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                return new EditLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            case DeleteLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                return new DeleteLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_TYPE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "UncleGrandpa925": 57,
      "simonteozw": 33,
      "nguyendqminh": 13
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/contact/AddContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.AddContactCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Parses input arguments and creates a new AddContactCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class AddContactCommandParser implements Parser\u003cAddContactCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddContactCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * and returns an AddContactCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public AddContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                AddContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Phone phone \u003d ParserUtil.parseOptionalPhone(argMultimap.getValue(PREFIX_PHONE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Email email \u003d ParserUtil.parseOptionalEmail(argMultimap.getValue(PREFIX_EMAIL));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Contact contact \u003d new Contact(name, phone, email, tagList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new AddContactCommand(contact);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "UncleGrandpa925": 32,
      "simonteozw": 8
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/contact/DeleteContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.DeleteContactCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Parses input arguments and creates a new DeleteContactCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class DeleteContactCommandParser implements Parser\u003cDeleteContactCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteContactCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * and returns a DeleteContactCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public DeleteContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return new DeleteContactCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteContactCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "UncleGrandpa925": 9,
      "simonteozw": 6
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/contact/EditContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.commons.core.Messages.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.EditContactCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Parses input arguments and creates a new EditContactCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class EditContactCommandParser implements Parser\u003cEditContactCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditContactCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * and returns an EditContactCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public EditContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                EditContactCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand.EditContactDescriptor editContactDescriptor \u003d new EditContactCommand.EditContactDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            editContactDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            editContactDescriptor.setPhone(ParserUtil.parseOptionalPhone(argMultimap.getValue(PREFIX_PHONE)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            editContactDescriptor.setEmail(ParserUtil.parseOptionalEmail(argMultimap.getValue(PREFIX_EMAIL)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editContactDescriptor::setTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!editContactDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new EditContactCommand(index, editContactDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "UncleGrandpa925": 25,
      "simonteozw": 7
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/contact/FindContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.FindContactCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Parses input arguments and creates a new FindContactCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class FindContactCommandParser implements Parser\u003cFindContactCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindContactCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * and returns a FindContactCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public FindContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new FindContactCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "UncleGrandpa925": 8,
      "simonteozw": 6
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "UncleGrandpa925": 2
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/lesson/AddLessonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.lesson.AddLessonCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import trackitnus.model.lesson.LessonDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": " * Parses input arguments and creates a new AddLessonCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "public class AddLessonCommandParser implements Parser\u003cAddLessonCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddLessonCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * and returns an AddLessonCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public AddLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                PREFIX_CODE, PREFIX_TYPE, PREFIX_DATE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CODE, PREFIX_TYPE, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        Code code \u003d ParserUtil.parseCode(argMultimap.getValue(PREFIX_CODE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        LessonDateTime date \u003d ParserUtil.parseLessonDateTime(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        Lesson lesson \u003d new Lesson(code, type, date);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return new AddLessonCommand(lesson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 18,
      "nguyendqminh": 42
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/lesson/DeleteLessonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.lesson.DeleteLessonCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": " * Parses input arguments and creates a new DeleteLessonCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "public class DeleteLessonCommandParser implements Parser\u003cDeleteLessonCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteLessonCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * and returns a DeleteLessonCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public DeleteLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return new DeleteLessonCommand(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteLessonCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 8,
      "nguyendqminh": 34
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/lesson/EditLessonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.lesson.EditLessonCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.lesson.EditLessonCommand.EditLessonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import trackitnus.model.lesson.LessonDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": " * Parses input arguments and creates a new EditLessonCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "public class EditLessonCommandParser implements Parser\u003cEditLessonCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditLessonCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * and returns an EditLessonCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public EditLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                PREFIX_CODE, PREFIX_TYPE, PREFIX_DATE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                EditLessonCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        EditLessonDescriptor editLessonDescriptor \u003d new EditLessonDescriptor();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CODE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            Code code \u003d ParserUtil.parseCode(argMultimap.getValue(PREFIX_CODE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            editLessonDescriptor.setCode(code);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            editLessonDescriptor.setType(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            LessonDateTime date \u003d ParserUtil.parseLessonDateTime(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            editLessonDescriptor.setDate(date);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        if (!editLessonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return new EditLessonCommand(index, editLessonDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 17,
      "nguyendqminh": 62
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/module/AddModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Parses input arguments and creates a new AddModuleCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class AddModuleCommandParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModuleCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * and returns an AddModuleCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_CODE, PREFIX_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CODE, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Code code \u003d ParserUtil.parseCode(argMultimap.getValue(PREFIX_CODE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Module module \u003d new Module(code, name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new AddModuleCommand(module);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 56
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/module/DeleteModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.module.DeleteModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Parses input arguments and creates a new DeleteModuleCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class DeleteModuleCommandParser implements Parser\u003cDeleteModuleCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteModuleCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * and returns a DeleteModuleCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public DeleteModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_CODE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CODE)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Code code \u003d ParserUtil.parseCode(argMultimap.getValue(PREFIX_CODE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return new DeleteModuleCommand(code);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 53,
      "nguyendqminh": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/module/EditModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.commons.core.Messages.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.module.EditModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Parses input arguments and creates a new EditModuleCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class EditModuleCommandParser implements Parser\u003cEditModuleCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditModuleCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * and returns an EditModuleCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public EditModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_CODE, PREFIX_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Code code;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            if (argMultimap.getValue(PREFIX_CODE).isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                throw new ParseException(\"No module code is provided\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            code \u003d ParserUtil.parseCode(argMultimap.getValue(PREFIX_CODE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                EditModuleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditModuleCommand.EditModuleDescriptor editModuleDescriptor \u003d new EditModuleCommand.EditModuleDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            editModuleDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!editModuleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new EditModuleCommand(code, editModuleDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 57
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/task/AddTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddContactCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * and returns an AddContactCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_CODE, PREFIX_REMARK);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Code code \u003d ParserUtil.parseOptionalCode(argMultimap.getValue(PREFIX_CODE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Task task \u003d new Task(name, date, code, remark);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new AddTaskCommand(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 16,
      "simonteozw": 41
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/task/DeleteTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * and returns a DeleteTaskCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 8,
      "simonteozw": 19
    }
  },
  {
    "path": "src/main/java/trackitnus/logic/parser/task/EditTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.commons.core.Messages.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Parses input arguments and creates a new EditTaskCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class EditTaskCommandParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTaskCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * and returns an EditTaskCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public EditTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_CODE, PREFIX_REMARK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                EditTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditTaskCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditTaskCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            editTaskDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            editTaskDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CODE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            editTaskDescriptor.setCode(ParserUtil.parseOptionalCode(argMultimap.getValue(PREFIX_CODE)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            editTaskDescriptor.setRemark(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new EditTaskCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 16,
      "simonteozw": 48
    }
  },
  {
    "path": "src/main/java/trackitnus/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    Predicate\u003cContact\u003e PREDICATE_SHOW_ALL_CONTACTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    Predicate\u003cLesson\u003e PREDICATE_SHOW_ALL_LESSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns the user prefs\u0027 TrackIter file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    Path getTrackIterFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Sets the user prefs\u0027 TrackIter file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void setTrackIterFilePath(Path trackIterFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns the TrackIter"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ReadOnlyTrackIter getTrackIter();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Replaces TrackIter data with the data in {@code trackIt}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void setTrackIter(ReadOnlyTrackIter trackIt);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Contact \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if a contact with the same identity as {@code contact} exists in the TrackIter."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    boolean hasContact(Contact contact);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Deletes the given contact."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The contact must exist in the TrackIter."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void deleteContact(Contact target);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Adds the given contact."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code contact} must not already exist in the TrackIter."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void addContact(Contact contact);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Replaces the given contact {@code target} with {@code editedContact}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code target} must exist in the TrackIter."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * The contact identity of {@code editedContact} must not"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * be the same as another existing contact in the TrackIter."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void setContact(Contact target, Contact editedContact);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A list of all contacts"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    ObservableList\u003cContact\u003e getAllContacts();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns an unmodifiable view of the filtered contact list"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cContact\u003e getFilteredContactList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Updates the filter of the filtered contact list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void updateFilteredContactList(Predicate\u003cContact\u003e predicate) throws NullPointerException;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the TrackIter."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * another version of hasModule where only code need to be passed in"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    boolean hasModule(Code code);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns the Module with the provided code, wraps in an Optional"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    Optional\u003cModule\u003e getModule(Code code);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The module must exist in the TrackIter."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code module} must not already exist in the TrackIter."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code target} must exist in the TrackIter."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The module identity of {@code editedModule} must not"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * be the same as another existing module in the TrackIter."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void setModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns an unmodifiable view of the filtered module list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) throws NullPointerException;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the TrackIter."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The task must exist in the TrackIter."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code task} must not already exist in the TrackIter."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code target} must exist in the TrackIter."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The task identity of {@code editedTask} must not"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * be the same as another existing task in the TrackIter."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns an unmodifiable view of the filtered task list"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Returns the Index of the task in the current last shown list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param task The task to query."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return an Index object representing the task object."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws CommandException If the index is invalid."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    Index getTaskIndex(Task task) throws CommandException;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Lesson \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if a lesson with the same identity as {@code lesson} exists in the TrackIter."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    boolean hasLesson(Lesson lesson);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Deletes the given lesson."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The lesson must exist in the TrackIter."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void deleteLesson(Lesson target);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Adds the given lesson."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code lesson} must not already exist in the TrackIter."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void addLesson(Lesson lesson);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Replaces the given lesson {@code target} with {@code editedLesson}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code target} must exist in the TrackIter."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The lesson identity of {@code editedLesson} must not"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * be the same as another existing lesson in the TrackIter."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void setLesson(Lesson target, Lesson editedLesson);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns an unmodifiable view of the filtered lesson list"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cLesson\u003e getFilteredLessonList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //--------------------------------START of V1.3\u0027s new functions--------------------------------"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param date The date to query"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @return all lessons happens on that date"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cLesson\u003e getDayUpcomingLessons(LocalDate date);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param code The module code to query"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @return the list of lesson for a specific module"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cLesson\u003e getModuleLessons(Code code);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param lesson The lesson to get index of"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return The index of the lesson w.r.t the last shown Lesson list."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    Index getLessonIndex(Lesson lesson) throws CommandException;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param module The module to get index of"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @return The index of the lesson in the list of all modules"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    Index getModuleIndex(Module module) throws CommandException;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @param code The module code to query"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @return the list of contacts for a specific module"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cContact\u003e getModuleContacts(Code code);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param code The module code to query"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @return the list of task for a specific module"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cTask\u003e getModuleTasks(Code code);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A list of tasks where each task\u0027s deadline is before today."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    ObservableList\u003cTask\u003e getOverdueTasks();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A list of tasks where each task\u0027s deadline is more than 7 days away."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    ObservableList\u003cTask\u003e getFutureTasks();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param date The date to query"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @return the list of all tasks that take place on the specified date"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cTask\u003e getDayUpcomingTasks(LocalDate date);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //--------------------------------END of V1.3\u0027s new functions--------------------------------"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Updates the filter of the filtered lesson list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    Optional\u003cLesson\u003e getLesson(Code code, Type type);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    void sortLesson();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "UncleGrandpa925": 212,
      "nguyendqminh": 10,
      "simonteozw": 36
    }
  },
  {
    "path": "src/main/java/trackitnus/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.ContactHasTagPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.DayOfWeek;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.LessonHasCodePredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.LessonOnWeekdayPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.TaskAfterDatePredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.TaskHasCodePredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.TaskIsOverduePredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.TaskOnDatePredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final TrackIter trackIter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final FilteredList\u003cContact\u003e filteredContacts;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final FilteredList\u003cLesson\u003e filteredLessons;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Initializes a ModelManager with the given trackIter and userPrefs."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ModelManager(ReadOnlyTrackIter trackIter, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(trackIter, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        logger.fine(\"Initializing with TrackIter: \" + trackIter + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.trackIter \u003d new TrackIter(trackIter);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        filteredContacts \u003d new FilteredList\u003c\u003e(this.trackIter.getContactList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(this.trackIter.getModuleList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.trackIter.getTaskList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        filteredLessons \u003d new FilteredList\u003c\u003e(this.trackIter.getLessonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this(new TrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Path getTrackIterFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return userPrefs.getTrackIterFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setTrackIterFilePath(Path trackIterFilePath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(trackIterFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        userPrefs.setTrackIterFilePath(trackIterFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TrackIter \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ReadOnlyTrackIter getTrackIter() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return trackIter;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setTrackIter(ReadOnlyTrackIter trackIt) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.trackIter.resetData(trackIt);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Contact \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return trackIter.hasContact(contact);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void deleteContact(Contact target) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.removeContact(target);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void addContact(Contact contact) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.addContact(contact);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContact(Contact target, Contact editedContact) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedContact);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.setContact(target, editedContact);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Contact List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public ObservableList\u003cContact\u003e getAllContacts() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        updateFilteredContactList(PREDICATE_SHOW_ALL_CONTACTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return getFilteredContactList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Contact} backed by the internal list of"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code versionedTrackIter}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cContact\u003e getFilteredContactList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return filteredContacts;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void updateFilteredContactList(Predicate\u003cContact\u003e predicate) throws NullPointerException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        filteredContacts.setPredicate(predicate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean hasModule(Module task) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return trackIter.hasModule(task);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean hasModule(Code code) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return trackIter.hasModule(new Module(code, new Name(\"dummy\")));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Optional\u003cModule\u003e getModule(Code code) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        List\u003cModule\u003e allModules \u003d trackIter.getModuleList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (Module module : allModules) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            if (module.getCode().equals(code)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                return Optional.of(module);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.removeModule(target);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.addModule(module);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setModule(Module target, Module editedTask) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.setModule(target, editedTask);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) throws NullPointerException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return trackIter.hasTask(task);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.removeTask(target);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.addTask(task);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.setTask(target, editedTask);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public Index getTaskIndex(Task task) throws CommandException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        ObservableList\u003cTask\u003e tasklist \u003d getFilteredTaskList();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        int index \u003d tasklist.indexOf(task);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_TASK_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return Index.fromZeroBased(index);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Lesson \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return trackIter.hasLesson(lesson);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void deleteLesson(Lesson target) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.removeLesson(target);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void addLesson(Lesson module) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.addLesson(module);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedLesson);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.setLesson(target, editedLesson);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public void sortLesson() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        trackIter.sortLesson();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Lesson List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return filteredLessons;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //--------------------------------START of V1.3\u0027s new functions--------------------------------"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cLesson\u003e getDayUpcomingLessons(LocalDate date) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        sortLesson();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        updateFilteredLessonList(PREDICATE_SHOW_ALL_LESSONS);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DayOfWeek weekday \u003d DayOfWeek.getLessonWeekDay(date);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return getFilteredLessonList().filtered(new LessonOnWeekdayPredicate(weekday));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cLesson\u003e getModuleLessons(Code code) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        updateFilteredLessonList(new LessonHasCodePredicate(code));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return getFilteredLessonList();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Index getLessonIndex(Lesson lesson) throws CommandException {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        ObservableList\u003cLesson\u003e lessonList \u003d getFilteredLessonList();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        int index \u003d lessonList.indexOf(lesson);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_LESSON_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return Index.fromZeroBased(index);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Index getModuleIndex(Module module) throws CommandException {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ObservableList\u003cModule\u003e moduleList \u003d getFilteredModuleList();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        int index \u003d moduleList.indexOf(module);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Index.fromZeroBased(index);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public ObservableList\u003cContact\u003e getModuleContacts(Code code) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        Tag target \u003d new Tag(code.toString());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        updateFilteredContactList(new ContactHasTagPredicate(target));"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return getFilteredContactList();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cTask\u003e getModuleTasks(Code code) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        updateFilteredTaskList(new TaskHasCodePredicate(code));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return getFilteredTaskList();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public ObservableList\u003cTask\u003e getOverdueTasks() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return getFilteredTaskList().filtered(new TaskIsOverduePredicate());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public ObservableList\u003cTask\u003e getFutureTasks() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        LocalDate oneWeekLater \u003d LocalDate.now().plusWeeks(1);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return getFilteredTaskList().filtered(new TaskAfterDatePredicate(oneWeekLater));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cTask\u003e getDayUpcomingTasks(LocalDate date) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return getFilteredTaskList().filtered(new TaskOnDatePredicate(date));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        filteredLessons.setPredicate(predicate);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public Optional\u003cLesson\u003e getLesson(Code code, Type type) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        List\u003cLesson\u003e allLessons \u003d trackIter.getLessonList();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        for (Lesson lesson : allLessons) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            if (lesson.getCode().equals(code) \u0026\u0026 lesson.getType().equals(type)) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                return Optional.of(lesson);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return trackIter.equals(other.trackIter)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 filteredContacts.equals(other.filteredContacts)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 filteredModules.equals(other.filteredModules)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 filteredTasks.equals(other.filteredTasks)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 filteredLessons.equals(other.filteredLessons);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 3,
      "-": 102,
      "UncleGrandpa925": 244,
      "simonteozw": 40,
      "nguyendqminh": 23
    }
  },
  {
    "path": "src/main/java/trackitnus/model/ReadOnlyTrackIter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public interface ReadOnlyTrackIter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns an unmodifiable view of the contacts list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * This list will not contain any duplicate contacts."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cContact\u003e getContactList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns an unmodifiable view of the tasks list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns an unmodifiable view of the lessons list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * This list will not contain any duplicate lessons."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    ObservableList\u003cLesson\u003e getLessonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "UncleGrandpa925": 26
    }
  },
  {
    "path": "src/main/java/trackitnus/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    Path getTrackIterFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "UncleGrandpa925": 3
    }
  },
  {
    "path": "src/main/java/trackitnus/model/TrackIter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.UniqueContactList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.LessonComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.TaskComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Duplicates are not allowed (by .isSameContact comparison)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class TrackIter implements ReadOnlyTrackIter {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final UniqueContactList contacts;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final UniqueLessonList lessons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */ {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        contacts \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        lessons \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public TrackIter() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Creates an TrackIter using the Contacts in the {@code toBeCopied}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public TrackIter(ReadOnlyTrackIter toBeCopied) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Replaces the contents of the contact list with {@code contacts}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * {@code contacts} must not contain duplicate contacts."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContacts(List\u003cContact\u003e contacts) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.contacts.setContacts(contacts);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Replaces the contents of the lessons list with {@code lessons}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.lessons.setLessons(lessons);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Resets the existing data of this {@code TrackIter} with {@code newData}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void resetData(ReadOnlyTrackIter newData) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        setContacts(newData.getContactList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        setLessons(newData.getLessonList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Adds a module to the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The module must not already exist in the address book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void addModule(Module p) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        modules.add(p);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The module identity of {@code editedModule} must not"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * be the same as another existing module in the address book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Removes {@code key} from this {@code TrackIter}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Contact \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Returns true if a contact with the same identity as {@code contact} exists in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return contacts.contains(contact);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Adds a module to the address book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The module must not already exist in the address book."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void addContact(Contact p) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        contacts.add(p);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Replaces the given contact {@code target} in the list with {@code editedContact}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * The contact identity of {@code editedContact} must not"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * be the same as another existing contact in the address book."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContact(Contact target, Contact editedContact) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        requireNonNull(editedContact);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        contacts.setContact(target, editedContact);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Removes {@code key} from this {@code TrackIter}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void removeContact(Contact key) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        contacts.remove(key);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the address book."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Adds a task to the address book."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The task must not already exist in the address book."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void addTask(Task p) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        tasks.add(p);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The task identity of {@code editedTask} must not"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * be the same as another existing task in the address book."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Removes {@code key} from this {@code TrackIter}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Lesson \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if a lesson with the same identity as {@code lesson} exists in the address book."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return lessons.contains(lesson);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Adds a lesson to the address book."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The lesson must not already exist in the address book."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void addLesson(Lesson p) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        lessons.add(p);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Replaces the given lesson {@code target} in the list with {@code editedLesson}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The lesson identity of {@code editedLesson} must not"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * be the same as another existing lesson in the address book."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(editedLesson);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        lessons.setLesson(target, editedLesson);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Removes {@code key} from this {@code TrackIter}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void removeLesson(Lesson key) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        lessons.remove(key);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return \"TrackIter{\" +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \"contacts\u003d\" + contacts +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \", modules\u003d\" + modules +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \", tasks\u003d\" + tasks +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \", lessons\u003d\" + lessons +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0027}\u0027;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cContact\u003e getContactList() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return contacts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        tasks.sort(new TaskComparator());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        lessons.sort(new LessonComparator());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return lessons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!(other instanceof TrackIter)) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // Two TrackIter will be considered equal if they have the SAME SET of contacts, modules, tasks \u0026 lessons"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // Since we sometimes sort tasks \u0026 lessons, before comparing equality it\u0027s necessary to sort as well"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        TrackIter casted \u003d (TrackIter) other;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        sortAll();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        casted.sortAll();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return contacts.equals(casted.contacts)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 modules.equals(casted.modules)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 tasks.equals(casted.tasks)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 lessons.equals(casted.lessons);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private void sortAll() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        tasks.sort(new TaskComparator());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        lessons.sort(new LessonComparator());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Objects.hash(contacts, modules, tasks, lessons);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void sortLesson() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        lessons.sort(new LessonComparator());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "UncleGrandpa925": 220,
      "simonteozw": 26
    }
  },
  {
    "path": "src/main/java/trackitnus/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private Path trackIterFilePath \u003d Paths.get(\"data\", \"trackIter.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        setTrackIterFilePath(newUserPrefs.getTrackIterFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Path getTrackIterFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return trackIterFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setTrackIterFilePath(Path trackIterFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(trackIterFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.trackIterFilePath \u003d trackIterFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 trackIterFilePath.equals(o.trackIterFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Objects.hash(guiSettings, trackIterFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + trackIterFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "UncleGrandpa925": 14
    }
  },
  {
    "path": "src/main/java/trackitnus/model/commons/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Represents a Contact\u0027s address in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        AppUtil.checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "UncleGrandpa925": 4,
      "simonteozw": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/model/commons/Code.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Represents a module code. Has form of AB1234 or ABC1234"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCode(String)} (String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class Code {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        \"Module code should start with 2 or 3 upper-case letters, follow by 4 numeric digits and optionally a single \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            + \"letter\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[A-Z]{2,3}[0-9]{4}[A-Z]?$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public final String code;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Code(String code) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        AppUtil.checkArgument(isValidCode(code), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static boolean isValidCode(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            || (other instanceof Code // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 code.equals(((Code) other).code)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return code.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 56
    }
  },
  {
    "path": "src/main/java/trackitnus/model/commons/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Represents a Contact\u0027s name in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        \"Names should be a non-empty string and should not contain \u0027/\u0027\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^/ ][^/]+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        value \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 value.equals(((Name) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "UncleGrandpa925": 12,
      "simonteozw": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/model/contact/Contact.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Represents a Contact in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class Contact {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String TYPE \u003d \"C\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Contact(Name name, Phone phone, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if both contacts of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * This defines a weaker notion of equality between two contacts."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean isSameContact(Contact otherContact) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (otherContact \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return otherContact !\u003d null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u0026\u0026 otherContact.getName().equals(getName())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u0026\u0026 (otherContact.getPhone().equals(getPhone()) || otherContact.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if both contacts have the same identity and data fields."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * This defines a stronger notion of equality between two contacts."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (!(other instanceof Contact)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Contact otherContact \u003d (Contact) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return otherContact.getName().equals(getName())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u0026\u0026 otherContact.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u0026\u0026 otherContact.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u0026\u0026 otherContact.getTags().equals(getTags());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return Objects.hash(name, phone, email, tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (getPhone().isPresent()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            builder.append(\" Phone: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .append(getPhone().get());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (getEmail().isPresent()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            builder.append(\" Email: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .append(getEmail().get());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "UncleGrandpa925": 25,
      "simonteozw": 15
    }
  },
  {
    "path": "src/main/java/trackitnus/model/contact/ContactHasTagPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class ContactHasTagPredicate implements Predicate\u003cContact\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Tag tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ContactHasTagPredicate(Tag tag) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean test(Contact contact) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return contact.getTags().contains(tag);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            || (other instanceof ContactHasTagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 tag.equals(((ContactHasTagPredicate) other).tag)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 26
    }
  },
  {
    "path": "src/main/java/trackitnus/model/contact/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Represents a Contact\u0027s email in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        AppUtil.checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 63,
      "UncleGrandpa925": 4,
      "simonteozw": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/model/contact/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Tests that a {@code Contact}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cContact\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public boolean test(Contact contact) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(contact.getName().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "UncleGrandpa925": 3,
      "simonteozw": 3
    }
  },
  {
    "path": "src/main/java/trackitnus/model/contact/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Represents a Contact\u0027s phone number in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        AppUtil.checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "UncleGrandpa925": 4,
      "simonteozw": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/model/contact/UniqueContactList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.exceptions.ContactNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.exceptions.DuplicateContactException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * A list of contacts that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * A contact is considered unique by comparing using {@code Contact#isSameContact(Contact)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * adding and updating of contacts uses Contact#isSameContact(Contact) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * the contact being added or updated is unique in terms of identity in the UniqueContactList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * However, the removal of a contact uses Contact#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * as to ensure that the contact with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * @see Contact#isSameContact(Contact)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class UniqueContactList implements Iterable\u003cContact\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final ObservableList\u003cContact\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final ObservableList\u003cContact\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Returns true if the list contains an equivalent contact as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public boolean contains(Contact toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameContact);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Adds a contact to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * The contact must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void add(Contact toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new DuplicateContactException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Replaces the contact {@code target} in the list with {@code editedContact}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * The contact identity of {@code editedContact} must not be the same as another existing contact in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContact(Contact target, Contact editedContact) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedContact);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ContactNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!target.isSameContact(editedContact) \u0026\u0026 contains(editedContact)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new DuplicateContactException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        internalList.set(index, editedContact);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Removes the equivalent contact from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * The contact must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void remove(Contact toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ContactNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContacts(UniqueContactList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Replaces the contents of this list with {@code contacts}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * {@code contacts} must not contain duplicate contacts."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContacts(List\u003cContact\u003e contacts) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(contacts);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!contactsAreUnique(contacts)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new DuplicateContactException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        internalList.setAll(contacts);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public ObservableList\u003cContact\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Iterator\u003cContact\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            || (other instanceof UniqueContactList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueContactList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Returns true if {@code contacts} contains only unique contacts."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private boolean contactsAreUnique(List\u003cContact\u003e contacts) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        for (int i \u003d 0; i \u003c contacts.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            for (int j \u003d i + 1; j \u003c contacts.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                if (contacts.get(i).isSameContact(contacts.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "UncleGrandpa925": 28,
      "simonteozw": 23
    }
  },
  {
    "path": "src/main/java/trackitnus/model/contact/exceptions/ContactNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.contact.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Signals that the operation is unable to find the specified contact."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class ContactNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "UncleGrandpa925": 3,
      "simonteozw": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/model/contact/exceptions/DuplicateContactException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.contact.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Signals that the operation will result in duplicate Contacts (Contacts are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class DuplicateContactException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public DuplicateContactException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        super(\"Operation would result in duplicate contacts\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "UncleGrandpa925": 6
    }
  },
  {
    "path": "src/main/java/trackitnus/model/lesson/DayOfWeek.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "package trackitnus.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public enum DayOfWeek {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    Sun,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    Mon,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    Tue,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    Wed,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    Thu,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    Fri,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    Sat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    private static final int SIZE \u003d 7;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static DayOfWeek getLessonWeekDay(LocalDate date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        java.time.DayOfWeek dayOfWeek \u003d date.getDayOfWeek();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        switch (dayOfWeek) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        case SUNDAY:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return Sun;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        case MONDAY:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return Mon;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        case TUESDAY:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return Tue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        case WEDNESDAY:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return Wed;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        case THURSDAY:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return Thu;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        case FRIDAY:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return Fri;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        case SATURDAY:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return Sat;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            throw new AssertionError("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                \"Unexpected error: Unable to retrieve weekday from LocalDate.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static Integer distanceBetweenTwoDay(DayOfWeek from, DayOfWeek to) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return (to.ordinal() - from.ordinal() + SIZE) % SIZE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyendqminh": 36,
      "UncleGrandpa925": 5
    }
  },
  {
    "path": "src/main/java/trackitnus/model/lesson/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Represents a Lesson in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final ZoneId DEFAULT_TIME_ZONE \u003d ZoneId.of(\"UTC+8\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String TYPE \u003d \"L\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String TIME_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        \"Starting time should be earlier than finishing time\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String LESSON_TIME_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        \"Lesson\u0027s time should be in the format \\\"ddd H:mm-H:mm\\\" (in 24-hour format), e.g. Mon 8:00-13:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String WEIGHTAGE_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        \"Weightage should be in the form of a floating point number\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String TYPE_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        \"Type should be either \u0027lecture\u0027, \u0027tutorial\u0027, \u0027lab\u0027, \u0027recitation\u0027, or \u0027sectional\u0027\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final String CODE_MESSAGE_CONSTRAINTS \u003d \"Module code is invalid\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Code code;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Type type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    private final LessonDateTime date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param type"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public Lesson(Code code, Type type, LessonDateTime date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        CollectionUtil.requireAllNonNull(code, type, date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!(other instanceof Lesson)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Lesson otherLesson \u003d (Lesson) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return otherLesson.code.equals(code)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 otherLesson.type.equals(type)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            \u0026\u0026 otherLesson.date.equals(date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return Objects.hash(code, type, date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return getCode()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            + getTypeStr()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            + \" at: \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            + getDate();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Code getCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public String getTypeStr() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return type.name();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public LessonDateTime getDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public DayOfWeek getWeekday() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return date.getWeekday();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return date.getStartTime();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return date.getEndTime();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if the two lessons are the same"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * This methods is here for to act as a compatibility layer for UniqueModuleList"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean isSameLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return this.equals(lesson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 83,
      "nguyendqminh": 29
    }
  },
  {
    "path": "src/main/java/trackitnus/model/lesson/LessonComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "package trackitnus.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "public class LessonComparator implements Comparator\u003cLesson\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Compares 2 lessons in chronological order to facilitate sorting."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @param firstLesson  First lesson to compare."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @param secondLesson Second lesson to compare."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @return an int \u003c 0 if firstLesson is \"less than\" secondLesson."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public int compare(Lesson firstLesson, Lesson secondLesson) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        int res \u003d firstLesson.getDate().compareTo(secondLesson.getDate());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return res \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            ? firstLesson.toString().compareTo(secondLesson.toString())"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            : res;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyendqminh": 20
    }
  },
  {
    "path": "src/main/java/trackitnus/model/lesson/LessonDateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "package trackitnus.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import trackitnus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "public class LessonDateTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"H:mm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final DayOfWeek weekday;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    private final LocalTime endTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @param weekday"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @param startTime"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @param endTime"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public LessonDateTime(DayOfWeek weekday, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        CollectionUtil.requireAllNonNull(weekday, startTime, endTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        this.weekday \u003d weekday;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public DayOfWeek getWeekday() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return this.weekday;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return this.endTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * Compares this LessonDateTime with another LessonDateTime in chronological order."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @param other The other LessonDateTime to compare."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     * @return an int \u003c 0 if this is \"less than\" other."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public int compareTo(LessonDateTime other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        if (equals(other)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            LocalDate currentDate \u003d LocalDate.now(Lesson.DEFAULT_TIME_ZONE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            DayOfWeek currentWeekday \u003d DayOfWeek.getLessonWeekDay(currentDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Integer currentToThis \u003d DayOfWeek.distanceBetweenTwoDay(currentWeekday, this.getWeekday());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Integer currentToOther \u003d DayOfWeek.distanceBetweenTwoDay(currentWeekday, other.getWeekday());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            int result \u003d currentToThis.compareTo(currentToOther);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return result \u003d\u003d 0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                ? this.getStartTime().compareTo(other.getStartTime())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                : result;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        if (!(other instanceof LessonDateTime)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        LessonDateTime otherDate \u003d (LessonDateTime) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return otherDate.weekday.equals(weekday)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            \u0026\u0026 otherDate.startTime.equals(startTime)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            \u0026\u0026 otherDate.endTime.equals(endTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return weekday.name() + \" \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            + startTime.format(FORMATTER) + \"-\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            + endTime.format(FORMATTER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguyendqminh": 80,
      "UncleGrandpa925": 6
    }
  },
  {
    "path": "src/main/java/trackitnus/model/lesson/LessonHasCodePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class LessonHasCodePredicate implements Predicate\u003cLesson\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Code code;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public LessonHasCodePredicate(Code code) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean test(Lesson lesson) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return lesson.getCode().equals(code);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            || (other instanceof LessonHasCodePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 code.equals(((LessonHasCodePredicate) other).code)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 26
    }
  },
  {
    "path": "src/main/java/trackitnus/model/lesson/LessonOnWeekdayPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class LessonOnWeekdayPredicate implements Predicate\u003cLesson\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final DayOfWeek weekday;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public LessonOnWeekdayPredicate(DayOfWeek weekday) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.weekday \u003d weekday;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean test(Lesson lesson) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return lesson.getWeekday().equals(weekday);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            || (other instanceof LessonOnWeekdayPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 weekday.equals(((LessonOnWeekdayPredicate) other).weekday)); // state check"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 24
    }
  },
  {
    "path": "src/main/java/trackitnus/model/lesson/Type.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public enum Type {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    LEC,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    TUT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    LAB,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    REC,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    SEC"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 8,
      "nguyendqminh": 2
    }
  },
  {
    "path": "src/main/java/trackitnus/model/lesson/UniqueLessonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.exceptions.LessonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * A list of lessons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * A lesson is considered unique by comparing using {@code Lesson#isSameLesson(Lesson)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * adding and updating of lessons uses Lesson#isSameLesson(Lesson) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * the lesson being added or updated is unique in terms of identity in the UniqueLessonList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * However, the removal of a lesson uses Lesson#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * as to ensure that the lesson with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * @see Lesson#isSameLesson(Lesson)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class UniqueLessonList implements Iterable\u003cLesson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if the list contains an equivalent lesson as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean contains(Lesson toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameLesson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Adds a lesson to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The lesson must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void add(Lesson toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Replaces the lesson {@code target} in the list with {@code editedLesson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The lesson identity of {@code editedLesson} must not be the same as another existing lesson in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedLesson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!target.isSameLesson(editedLesson) \u0026\u0026 contains(editedLesson)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        internalList.set(index, editedLesson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Removes the equivalent lesson from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The lesson must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void remove(Lesson toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setLessons(UniqueLessonList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Replaces the contents of this list with {@code lessons}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(lessons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!lessonsAreUnique(lessons)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        internalList.setAll(lessons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cLesson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Iterator\u003cLesson\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            || (other instanceof UniqueLessonList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueLessonList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if {@code lessons} contains only unique lessons."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private boolean lessonsAreUnique(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (int i \u003d 0; i \u003c lessons.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            for (int j \u003d i + 1; j \u003c lessons.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                if (lessons.get(i).isSameLesson(lessons.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void sort(LessonComparator lessonComparator) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        internalList.sort(lessonComparator);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 140,
      "nguyendqminh": 2
    }
  },
  {
    "path": "src/main/java/trackitnus/model/lesson/exceptions/DuplicateLessonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Signals that the operation will result in duplicate Lessons (Lessons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class DuplicateLessonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public DuplicateLessonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        super(\"Operation would result in duplicate lesson\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 11
    }
  },
  {
    "path": "src/main/java/trackitnus/model/lesson/exceptions/LessonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Signals that the operation is unable to find the specified lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class LessonNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 7
    }
  },
  {
    "path": "src/main/java/trackitnus/model/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Represents a Lesson in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String TYPE \u003d \"M\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Code code;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param code"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Module(Code code, Name name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(code, name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Code getCode() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Module otherLesson \u003d (Module) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return otherLesson.code.equals(code)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 otherLesson.name.equals(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Objects.hash(code, name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return \" Code: \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            + getCode()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            + \" Name: \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            + getName();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if both modules have the same code"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean isSameModule(Module module) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return this.code.equals(module.code);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 75
    }
  },
  {
    "path": "src/main/java/trackitnus/model/module/UniqueModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * A module is considered unique by comparing using {@code Module#isSameModule(Module)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * adding and updating of contacts uses Module#isSameModule(Module) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * the module being added or updated is unique in terms of identity in the UniqueModuleList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * However, the removal of a module uses Module#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * as to ensure that the contact with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * @see Module#isSameModule(Module)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!target.isSameModule(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(modules);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if {@code contacts} contains only unique contacts."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e contacts) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (int i \u003d 0; i \u003c contacts.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            for (int j \u003d i + 1; j \u003c contacts.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                if (contacts.get(i).isSameModule(contacts.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 139
    }
  },
  {
    "path": "src/main/java/trackitnus/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Signals that the operation will result in duplicate Modules (Modules are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 11
    }
  },
  {
    "path": "src/main/java/trackitnus/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 7
    }
  },
  {
    "path": "src/main/java/trackitnus/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "UncleGrandpa925": 4
    }
  },
  {
    "path": "src/main/java/trackitnus/model/task/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getName().value, keyword));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "UncleGrandpa925": 7
    }
  },
  {
    "path": "src/main/java/trackitnus/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Represents a Task in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String TYPE \u003d \"T\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final Code code;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * name, date \u0026 remark must be present and not null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param remark"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Task(Name name, LocalDate date, Code code, String remark) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, date, remark);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public boolean belongsToModule(Code code) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return getCode().isPresent() \u0026\u0026 getCode().get().equals(code);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String getRemark() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Optional\u003cCode\u003e getCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return Optional.ofNullable(code);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return otherTask.name.equals(name)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u0026\u0026 otherTask.date.equals(date)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u0026\u0026 otherTask.getCode().equals(getCode())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u0026\u0026 otherTask.getRemark().equals(getRemark());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return Objects.hash(name, date, code, remark);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            .append(\" Date: \")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            .append(getDate());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (getCode().isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            builder.append(\" Code: \").append(getCode().get());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (!getRemark().equals(\"\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            builder.append(\" Remark: \").append(getRemark());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if the two tasks are the same"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * This methods is here for to act as a compatibility layer for UniqueTaskList"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean isSameTask(Task task) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return this.equals(task);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 2,
      "UncleGrandpa925": 54,
      "simonteozw": 48
    }
  },
  {
    "path": "src/main/java/trackitnus/model/task/TaskAfterDatePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class TaskAfterDatePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public TaskAfterDatePredicate(LocalDate date) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return task.getDate().isAfter(date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            || (other instanceof TaskAfterDatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 date.equals(((TaskAfterDatePredicate) other).date)); // state check"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 25
    }
  },
  {
    "path": "src/main/java/trackitnus/model/task/TaskComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package trackitnus.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class TaskComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Compares 2 tasks to faciliate sorting."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param t1 First task to compare."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param t2 Second task to compare."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return an int \u003c 0 if t1 is \"less than\" t2."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public int compare(Task t1, Task t2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        int res \u003d t1.getDate().compareTo(t2.getDate());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return res \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ? t1.getName().value.compareTo(t2.getName().value)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            : res;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 18,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/model/task/TaskHasCodePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class TaskHasCodePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Code code;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public TaskHasCodePredicate(Code code) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return task.belongsToModule(code);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            || (other instanceof TaskHasCodePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 code.equals(((TaskHasCodePredicate) other).code)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 26
    }
  },
  {
    "path": "src/main/java/trackitnus/model/task/TaskIsOverduePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class TaskIsOverduePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public TaskIsOverduePredicate() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return task.getDate().isBefore(today);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return (other instanceof TaskIsOverduePredicate); // instanceof handles nulls"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 21
    }
  },
  {
    "path": "src/main/java/trackitnus/model/task/TaskOnDatePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class TaskOnDatePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public TaskOnDatePredicate(LocalDate date) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return task.getDate().equals(date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            || (other instanceof TaskOnDatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 date.equals(((TaskOnDatePredicate) other).date)); // state check"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 25
    }
  },
  {
    "path": "src/main/java/trackitnus/model/task/UniqueTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * adding and updating of tasks uses Task#isSameTask(Task) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * the task being added or updated is unique in terms of identity in the UniqueTaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void sort(TaskComparator taskComparator) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        internalList.sort(taskComparator);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 141,
      "simonteozw": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 11
    }
  },
  {
    "path": "src/main/java/trackitnus/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 7
    }
  },
  {
    "path": "src/main/java/trackitnus/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyTrackIter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.TrackIter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.lesson.DayOfWeek;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.lesson.LessonDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.lesson.Type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Contains utility methods for populating {@code TrackIter} with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static Contact[] getSampleContacts() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new Contact[]{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Contact(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                getTagSet(\"friends\", \"MA1101R\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Contact(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Contact(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Contact(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                getTagSet(\"family\", \"CS2100\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Contact(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                getTagSet(\"classmates\", \"CS2103T\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Contact(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                getTagSet(\"colleagues\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Contact(new Name(\"Henry CHIA Wai Kit\"), new Phone(\"65161556\"), new Email(\"hchia@comp.nus.edu.sg\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static Module[] getSampleModules() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new Module[]{"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Module(new Code(\"CS1101S\"), new Name(\"Programming Methodology\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Module(new Code(\"CS2100\"), new Name(\"Computer Organisation\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Module(new Code(\"CS2103T\"), new Name(\"Software Engineering\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Module(new Code(\"MA1101R\"), new Name(\"Linear Algebra\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Module(new Code(\"GER1000H\"), new Name(\"Quantitative Reasoning\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Module(new Code(\"CS2030S\"), new Name(\"Programming Methodology\"))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static Lesson[] getSampleLessons() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new Lesson[]{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Lesson(new Code(\"CS1101S\"), Type.LEC, new LessonDateTime(DayOfWeek.Fri, LocalTime.NOON,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                LocalTime.NOON.plusHours(2))),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Lesson(new Code(\"CS1101S\"), Type.TUT, new LessonDateTime(DayOfWeek.Mon, LocalTime.NOON,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                LocalTime.NOON.plusHours(2))),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Lesson(new Code(\"CS2100\"), Type.LEC, new LessonDateTime(DayOfWeek.Tue, LocalTime.NOON.plusHours(4),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                LocalTime.NOON.plusHours(6))),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Lesson(new Code(\"CS2100\"), Type.LAB, new LessonDateTime(DayOfWeek.Mon, LocalTime.MIDNIGHT.plusHours(9),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                LocalTime.MIDNIGHT.plusHours(10))),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Lesson(new Code(\"CS2103T\"), Type.LEC, new LessonDateTime(DayOfWeek.Wed, LocalTime.NOON.plusHours(2),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                LocalTime.NOON.plusHours(4))),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Lesson(new Code(\"CS2103T\"), Type.TUT, new LessonDateTime(DayOfWeek.Thu, LocalTime.NOON.plusHours(2),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                LocalTime.NOON.plusHours(3))),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Lesson(new Code(\"MA1101R\"), Type.LEC, new LessonDateTime(DayOfWeek.Thu, LocalTime.NOON.plusHours(4),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                LocalTime.NOON.plusHours(6))),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Lesson(new Code(\"MA1101R\"), Type.SEC, new LessonDateTime(DayOfWeek.Wed, LocalTime.NOON,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                LocalTime.NOON.plusHours(1))),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Lesson(new Code(\"GER1000H\"), Type.LEC, new LessonDateTime(DayOfWeek.Tue, LocalTime.NOON,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                LocalTime.NOON.plusHours(2))),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Lesson(new Code(\"GER1000H\"), Type.SEC, new LessonDateTime(DayOfWeek.Fri, LocalTime.NOON.plusHours(2),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                LocalTime.NOON.plusHours(4))),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Lesson(new Code(\"CS2030S\"), Type.LEC, new LessonDateTime(DayOfWeek.Mon, LocalTime.NOON,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                LocalTime.NOON.plusHours(2))),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Lesson(new Code(\"CS2030S\"), Type.REC, new LessonDateTime(DayOfWeek.Wed, LocalTime.NOON,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                LocalTime.NOON.plusHours(1))),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Lesson(new Code(\"CS2030S\"), Type.LAB, new LessonDateTime(DayOfWeek.Fri, LocalTime.NOON,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                LocalTime.NOON.plusHours(2))),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        };"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new Task[]{"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Task(new Name(\"Plan for Alex\u0027s birthday\"), ParserUtil.parseValidDate(\"12/12/2020\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                null, \"Buy a cake\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new Task(new Name(\"Buy Mooncakes for Mum\"), LocalDate.now().plusDays(3), null, \"\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Task(new Name(\"Do Tutorial\"), LocalDate.now().plusDays(5),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                new Code(\"CS2100\"), \"\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Task(new Name(\"Do this week\u0027s Mission\"), LocalDate.now().plusDays(3),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                new Code(\"CS1101S\"), \"Recursion\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Task(new Name(\"Work on the final report\"), LocalDate.now().plusDays(2),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                new Code(\"GER1000H\"), \"min 500 words\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Task(new Name(\"Study for Final Exam\"), ParserUtil.parseValidDate(\"05/11/2020\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                new Code(\"MA1101R\"), \"Focus on Diagonalisation\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Task(new Name(\"Prepare for v1.3 Demo\"), LocalDate.now().plusDays(1),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                new Code(\"CS2103T\"), \"Ensure app runs smoothly\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Task(new Name(\"Code Project 2\"), ParserUtil.parseValidDate(\"20/11/2020\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                new Code(\"CS2030S\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                \"(deadline is at the end of reading week)\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        };"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static ReadOnlyTrackIter getSampleTrackIter() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        TrackIter sampleTrackIter \u003d new TrackIter();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        for (Module sampleModule : getSampleModules()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            sampleTrackIter.addModule(sampleModule);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        for (Lesson sampleLesson : getSampleLessons()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            sampleTrackIter.addLesson(sampleLesson);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            sampleTrackIter.addTask(sampleTask);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (Contact sampleContact : getSampleContacts()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            sampleTrackIter.addContact(sampleContact);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return sampleTrackIter;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "UncleGrandpa925": 33,
      "simonteozw": 76
    }
  },
  {
    "path": "src/main/java/trackitnus/storage/JsonAdaptedContact.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Jackson-friendly version of {@link Contact}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "class JsonAdaptedContact {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Contact\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Constructs a {@code JsonAdaptedContact} with the given contact details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public JsonAdaptedContact(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                              @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Converts a given {@code Contact} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public JsonAdaptedContact(Contact source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        name \u003d source.getName().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        phone \u003d source.getPhone().isPresent() ? source.getPhone().get().value : null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        email \u003d source.getEmail().isPresent() ? source.getEmail().get().value : null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Converts this Jackson-friendly adapted contact object into the model\u0027s {@code Contact} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted contact."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Contact toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        final List\u003cTag\u003e contactTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            contactTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        final Phone modelPhone;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            modelPhone \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        } else if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        final Email modelEmail;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            modelEmail \u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        } else if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(contactTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new Contact(modelName, modelPhone, modelEmail, modelTags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "UncleGrandpa925": 29,
      "simonteozw": 8
    }
  },
  {
    "path": "src/main/java/trackitnus/storage/JsonAdaptedLesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "import trackitnus.model.lesson.LessonDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Jackson-friendly version of {@link Lesson}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class JsonAdaptedLesson {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Lesson\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructs a {@code JsonAdaptedLesson} with the given lesson details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public JsonAdaptedLesson(@JsonProperty(\"code\") String code, @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "                             @JsonProperty(\"date\") String date) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Converts a given {@code Lesson} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public JsonAdaptedLesson(Lesson source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        code \u003d source.getCode().code;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        type \u003d source.getTypeStr();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Converts this Jackson-friendly adapted contact object into the model\u0027s {@code Lesson} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted contact."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Lesson toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (code \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Code.class.getSimpleName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (!Code.isValidCode(code)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new IllegalValueException(Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        final Code modelCode \u003d new Code(code);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        final Type modelType \u003d Enum.valueOf(Type.class, type);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                LocalDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "            ParserUtil.parseLessonDateTime(date);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new IllegalValueException(Lesson.LESSON_TIME_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        final LessonDateTime modelTime \u003d ParserUtil.parseLessonDateTime(date);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        return new Lesson(modelCode, modelType, modelTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 6,
      "simonteozw": 65,
      "nguyendqminh": 8
    }
  },
  {
    "path": "src/main/java/trackitnus/storage/JsonAdaptedModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class JsonAdaptedModule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"code\") String code, @JsonProperty(\"name\") String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        code \u003d source.getCode().code;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        name \u003d source.getName().value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Converts this Jackson-friendly adapted contact object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (code \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Code.class.getSimpleName()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (!Code.isValidCode(code)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new IllegalValueException(Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        final Code modelCode \u003d new Code(code);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new Module(modelCode, modelName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 8,
      "simonteozw": 56
    }
  },
  {
    "path": "src/main/java/trackitnus/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "UncleGrandpa925": 3
    }
  },
  {
    "path": "src/main/java/trackitnus/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class JsonAdaptedTask {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"name\") String name, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                           @JsonProperty(\"code\") String code, @JsonProperty(\"remark\") String remark) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        name \u003d source.getName().value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        date \u003d source.getDate().format(ParserUtil.DATE_PATTERN);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        code \u003d source.getCode().isPresent() ? source.getCode().get().code : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        remark \u003d source.getRemark();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Converts this Jackson-friendly adapted contact object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted contact."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                LocalDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        LocalDate modelDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            modelDate \u003d ParserUtil.parseDate(date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            throw new IllegalValueException(Messages.DATE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Remark\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        final String modelRemark \u003d remark;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        final Code modelCode \u003d code \u003d\u003d null ? null : new Code(code);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new Task(modelName, modelDate, modelCode, modelRemark);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 14,
      "simonteozw": 72
    }
  },
  {
    "path": "src/main/java/trackitnus/storage/JsonSerializableTrackIter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyTrackIter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.TrackIter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * An Immutable TrackIter that is serializable to JSON format.gi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "@JsonRootName(value \u003d \"trackIter\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "class JsonSerializableTrackIter {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONTACT \u003d \"Contact list contains duplicate contact(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Module list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"Lesson list contains duplicate lesson(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final List\u003cJsonAdaptedContact\u003e contacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final List\u003cJsonAdaptedLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Constructs a {@code JsonSerializableTrackIter} with the given contacts."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public JsonSerializableTrackIter(@JsonProperty(\"contacts\") List\u003cJsonAdaptedContact\u003e contacts,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                                     @JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                                     @JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                                     @JsonProperty(\"lessons\") List\u003cJsonAdaptedLesson\u003e lessons) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.contacts.addAll(contacts);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.lessons.addAll(lessons);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Converts a given {@code ReadOnlyTrackIter} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTrackIter}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public JsonSerializableTrackIter(ReadOnlyTrackIter source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        contacts.addAll(source.getContactList().stream().map(JsonAdaptedContact::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        lessons.addAll(source.getLessonList().stream().map(JsonAdaptedLesson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Converts this address book into the model\u0027s {@code TrackIter} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public TrackIter toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        TrackIter trackIter \u003d new TrackIter();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (JsonAdaptedContact jsonAdaptedContact : contacts) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Contact contact \u003d jsonAdaptedContact.toModelType();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            if (trackIter.hasContact(contact)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            trackIter.addContact(contact);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            if (trackIter.hasTask(task)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            trackIter.addTask(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            if (trackIter.hasModule(module)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            trackIter.addModule(module);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        for (JsonAdaptedLesson jsonAdaptedLesson : lessons) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            Lesson lesson \u003d jsonAdaptedLesson.toModelType();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            if (trackIter.hasLesson(lesson)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            trackIter.addLesson(lesson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return trackIter;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "UncleGrandpa925": 27,
      "simonteozw": 39
    }
  },
  {
    "path": "src/main/java/trackitnus/storage/JsonTrackIterStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyTrackIter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * A class to access TrackIter data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class JsonTrackIterStorage implements TrackIterStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTrackIterStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public JsonTrackIterStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Path getTrackIterFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Optional\u003cReadOnlyTrackIter\u003e readTrackIter() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return readTrackIter(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Similar to {@link #readTrackIter()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Optional\u003cReadOnlyTrackIter\u003e readTrackIter(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Optional\u003cJsonSerializableTrackIter\u003e jsonTrackIter \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            filePath, JsonSerializableTrackIter.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!jsonTrackIter.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return Optional.of(jsonTrackIter.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void saveTrackIter(ReadOnlyTrackIter trackIter) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        saveTrackIter(trackIter, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Similar to {@link #saveTrackIter(ReadOnlyTrackIter)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void saveTrackIter(ReadOnlyTrackIter trackIter, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(trackIter);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTrackIter(trackIter), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "UncleGrandpa925": 27
    }
  },
  {
    "path": "src/main/java/trackitnus/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "UncleGrandpa925": 7
    }
  },
  {
    "path": "src/main/java/trackitnus/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyTrackIter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public interface Storage extends TrackIterStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    Path getTrackIterFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    Optional\u003cReadOnlyTrackIter\u003e readTrackIter() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void saveTrackIter(ReadOnlyTrackIter trackIter) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "UncleGrandpa925": 9
    }
  },
  {
    "path": "src/main/java/trackitnus/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyTrackIter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Manages storage of TrackIter data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final TrackIterStorage trackIterStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code TrackIterStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public StorageManager(TrackIterStorage trackIterStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.trackIterStorage \u003d trackIterStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TrackIter methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Path getTrackIterFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return trackIterStorage.getTrackIterFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Optional\u003cReadOnlyTrackIter\u003e readTrackIter() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return readTrackIter(trackIterStorage.getTrackIterFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Optional\u003cReadOnlyTrackIter\u003e readTrackIter(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return trackIterStorage.readTrackIter(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void saveTrackIter(ReadOnlyTrackIter trackIter) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        saveTrackIter(trackIter, trackIterStorage.getTrackIterFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void saveTrackIter(ReadOnlyTrackIter trackIter, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIterStorage.saveTrackIter(trackIter, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "UncleGrandpa925": 23
    }
  },
  {
    "path": "src/main/java/trackitnus/storage/TrackIterStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyTrackIter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.TrackIter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Represents a storage for {@link TrackIter}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public interface TrackIterStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    Path getTrackIterFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns TrackIter data as a {@link ReadOnlyTrackIter}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    Optional\u003cReadOnlyTrackIter\u003e readTrackIter() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @see #getTrackIterFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    Optional\u003cReadOnlyTrackIter\u003e readTrackIter(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Saves the given {@link ReadOnlyTrackIter} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @param trackIter cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void saveTrackIter(ReadOnlyTrackIter trackIter) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @see #saveTrackIter(ReadOnlyTrackIter)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void saveTrackIter(ReadOnlyTrackIter trackIter, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "UncleGrandpa925": 18
    }
  },
  {
    "path": "src/main/java/trackitnus/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "UncleGrandpa925": 8
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            String command \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            commandExecutor.execute(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 2,
      "-": 74,
      "UncleGrandpa925": 6
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/HelpCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "package trackitnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": " * Represents a command as well as the action it executes"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "public class HelpCard {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private String action;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * Constructor for a HelpCard"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * @param action is what results from the command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * @param command is what to input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public HelpCard(String action, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public String getAction() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return action;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 27
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/HelpPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justweihong"
        },
        "content": "package trackitnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justweihong"
        },
        "content": "public class HelpPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public static final String TYPE \u003d \"H\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://bit.ly/2HDhjac\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public static final String HELP_MESSAGE \u003d USERGUIDE_URL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"HelpPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(trackitnus.ui.HelpPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private TableView helpCardTableView;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Creates a {@code HelpPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public HelpPanel() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCardTableView.setItems(helpCommands());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCardTableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCardTableView.setColumnResizePolicy(new Callback\u003cTableView.ResizeFeatures, Boolean\u003e() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            public Boolean call(TableView.ResizeFeatures p) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        TableColumn\u003cHelpCard, String\u003e actionCol \u003d new TableColumn\u003c\u003e(\"Action\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        actionCol.setSortable(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        actionCol.setCellValueFactory(new PropertyValueFactory\u003cHelpCard, String\u003e(\"Action\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        TableColumn\u003cHelpCard, String\u003e commandCol \u003d new TableColumn\u003c\u003e(\"Command\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        commandCol.setSortable(false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        commandCol.setCellValueFactory(new PropertyValueFactory\u003cHelpCard, String\u003e(\"Command\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCardTableView.getColumns().addAll(actionCol, commandCol);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static ObservableList\u003cHelpCard\u003e helpCommands() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        ObservableList\u003cHelpCard\u003e helpCommands \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCommands.add(new HelpCard(\"Module: Add\", \"M add m/MODULE_CODE n/NAME\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCommands.add(new HelpCard(\"Module: Edit\", \"M edit m/MODULE_CODE n/NAME\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCommands.add(new HelpCard(\"Module: Delete\", \"M delete m/MODULE_CODE\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCommands.add(new HelpCard(\"Lesson: Add\", \"L add m/MODULE_CODE n/TYPE d/HH:MM DAY\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCommands.add(new HelpCard(\"Lesson: Edit\", \"L edit INDEX [m/MODULE_CODE] [n/TYPE] [d/HH:MM DAY]\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCommands.add(new HelpCard(\"Lesson: Delete\", \"L delete INDEX\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCommands.add(new HelpCard(\"Task: Add\", \"T add n/NAME d/DATE [m/MODULE_CODE] [r/REMARK]\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCommands.add(new HelpCard(\"Task: Edit\", \"T edit INDEX [n/NAME] [d/DATE] [m/MODULE_CODE] [r/REMARK]\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCommands.add(new HelpCard(\"Task: Delete\", \"T delete INDEX\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCommands.add(new HelpCard(\"Contacts: Add\", \"C add n/NAME p/PHONE_NUMBER e/EMAIL [t/TAG]\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCommands.add(new HelpCard(\"Contacts: Edit\", \"C edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [t/TAG]\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCommands.add(new HelpCard(\"Contacts: Delete\", \"C delete INDEX\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCommands.add(new HelpCard(\"Getting help\", \"help\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        helpCommands.add(new HelpCard(\"Exiting the app\", \"exit\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return helpCommands;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justweihong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 65,
      "justweihong": 21,
      "UncleGrandpa925": 2
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.ui.contact.ContactPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.ui.module.ModulePanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.ui.upcoming.UpcomingPanel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Stage primaryStage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private ModulePanel modulePanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private ContactPanel contactPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private SidePanel sidePanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private UpcomingPanel upcomingPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private HelpPanel helpPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private StackPane modulePanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private StackPane contactPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private BorderPane borderPane;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private StackPane sidePanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private StackPane tabPanelPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private StackPane upcomingPanelPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "//        setAccelerators();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "//    private void setAccelerators() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "//        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        upcomingPanel \u003d new UpcomingPanel(logic);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        sidePanel \u003d new SidePanel(this::switchTab, logic);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        sidePanelPlaceholder.getChildren().add(sidePanel.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        //Default tab open"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        ArrayList\u003cObject\u003e upcomingValues \u003d new ArrayList\u003c\u003e(Arrays.asList((Object) \"U\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        switchTab(upcomingValues);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTrackIterFilePath());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private void switchTab(ArrayList\u003cObject\u003e tabValues) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        assert(tabValues.size() \u003e\u003d 1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        logger.info(\"Switching tab to: \" + String.valueOf(tabValues.get(0)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        tabPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        String tabName \u003d String.valueOf(tabValues.get(0));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        switch(tabName) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        case UpcomingPanel.TYPE:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            tabPanelPlaceholder.getChildren().add(upcomingPanel.getRoot());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        case Module.TYPE:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            assert(tabValues.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            Module tabModule \u003d (Module) tabValues.get(1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            modulePanel \u003d new ModulePanel(tabModule, logic);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            tabPanelPlaceholder.getChildren().add(modulePanel.getRoot());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        case Contact.TYPE:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            contactPanel \u003d new ContactPanel(logic);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            tabPanelPlaceholder.getChildren().add(contactPanel.getRoot());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        case HelpPanel.TYPE:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            helpPanel \u003d new HelpPanel();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            tabPanelPlaceholder.getChildren().add(helpPanel.getRoot());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            throw new IllegalArgumentException(Messages.MESSAGE_INVALID_TAB_VALUE);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                switchTab(new ArrayList\u003c\u003e(Arrays.asList((Object) \"H\")));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 32,
      "-": 152,
      "UncleGrandpa925": 12,
      "justweihong": 43
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/SidePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "package trackitnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.ui.upcoming.UpcomingPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "public class SidePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"SidePanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SidePanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private Consumer\u003cArrayList\u003cObject\u003e\u003e tabConsumer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private final int moduleRowHeight \u003d 32;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private Button selectedTabButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private Button upcomingButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private Button contactButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private Button helpButton;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * Constructor for SidePanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * @param tabConsumer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public SidePanel(Consumer\u003cArrayList\u003cObject\u003e\u003e tabConsumer, Logic logic) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        this.tabConsumer \u003d tabConsumer;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        this.initialize();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Initialises/reloads the tab buttons in the side panel."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        if (logic !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            // Get modules tab buttons."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            ObservableList\u003cModule\u003e modules \u003d logic.getFilteredModuleList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            moduleListView.setPrefHeight(modules.size() * moduleRowHeight);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            moduleListView.setItems(modules);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            // Set Default tab as upcoming tab."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            selectedTabButton \u003d upcomingButton;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            updateButtonDetails(upcomingButton);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Sets the view of the module tab in the side panel."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                Button updatedButton \u003d getModuleButton(module);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                setGraphic(updatedButton);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                ArrayList\u003cObject\u003e upcomingValues \u003d new ArrayList\u003c\u003e(Arrays.asList(Module.TYPE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                    module));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justweihong"
        },
        "content": "//                tabConsumer.accept(upcomingValues);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justweihong"
        },
        "content": "//                updateButtonDetails(updatedButton);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Relays message to MainWindow to get Upcoming panel information in TabPanel."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public void toggleUpcomingTab() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        ArrayList\u003cObject\u003e upcomingValues \u003d new ArrayList\u003c\u003e(Arrays.asList((Object) UpcomingPanel.TYPE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        updateButtonDetails(upcomingButton);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        tabConsumer.accept(upcomingValues);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Relays message to MainWindow to get Contact panel information in TabPanel."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public void toggleContactTab() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        ArrayList\u003cObject\u003e contactValues \u003d new ArrayList\u003c\u003e(Arrays.asList((Object) Contact.TYPE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        updateButtonDetails(contactButton);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        tabConsumer.accept(contactValues);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Relays message to MainWindow to get Help tab information in TabPanel."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public void toggleHelpTab() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        ArrayList\u003cObject\u003e helpValues \u003d new ArrayList\u003c\u003e(Arrays.asList((Object) HelpPanel.TYPE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        updateButtonDetails(helpButton);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        tabConsumer.accept(helpValues);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Updates the details of the current selected tab button."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * @param button The new selected tab button."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public void updateButtonDetails(Button button) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        selectedTabButton.setStyle(\"-fx-text-fill: white;\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        selectedTabButton \u003d button;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        selectedTabButton.setStyle(\"-fx-text-fill: #68C2E8;\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Configure the module button tab in the side panel."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * @return moduleButton The module button."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public Button getModuleButton(Module module) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        Button button \u003d new Button(module.getCode().code);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        ArrayList\u003cObject\u003e moduleValues \u003d new ArrayList\u003c\u003e(Arrays.asList(Module.TYPE, module));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        button.setOnAction(actionEvent -\u003e {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            updateButtonDetails(button);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            tabConsumer.accept(moduleValues);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        return button;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 25,
      "justweihong": 117
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "UncleGrandpa925": 4
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/logo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "//            primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 2,
      "-": 62,
      "UncleGrandpa925": 26
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "UncleGrandpa925": 18
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/contact/ContactCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * An UI component that displays information of a {@code Contact}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class ContactCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"Contact/ContactListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on TrackIter level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public final Contact contact;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Creates a {@code ContactCode} with the given {@code Contact} and index to display."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ContactCard(Contact contact, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        id.setText(\"[\" + displayedIndex + \"] \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        name.setText(contact.getName().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (contact.getPhone().isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            phone.setText(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            phone.setText(contact.getPhone().get().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (contact.getEmail().isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            email.setText(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            email.setText(contact.getEmail().get().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        contact.getTags().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (!(other instanceof ContactCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ContactCard card \u003d (ContactCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u0026\u0026 contact.equals(card.contact);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 11,
      "-": 56,
      "UncleGrandpa925": 13,
      "simonteozw": 5,
      "justweihong": 1
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/contact/ContactListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Panel containing the list of contacts."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class ContactListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"Contact/ContactListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ContactListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private ListView\u003cContact\u003e contactListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Creates a {@code ContactListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ContactListPanel(ObservableList\u003cContact\u003e contactList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        contactListView.setItems(contactList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        contactListView.setCellFactory(listView -\u003e new ContactListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Contact} using a {@code ContactCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    class ContactListViewCell extends ListCell\u003cContact\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        protected void updateItem(Contact contact, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            super.updateItem(contact, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            if (empty || contact \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                setGraphic(new ContactCard(contact, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 1,
      "-": 31,
      "UncleGrandpa925": 15,
      "simonteozw": 3
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/contact/ContactPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justweihong"
        },
        "content": "package trackitnus.ui.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justweihong"
        },
        "content": "public class ContactPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"Contact/ContactPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ContactPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private ContactListPanel contactListPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private final int defaultRowHeight \u003d 50;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private final int paddingHeight \u003d 10;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private StackPane contactListPanelPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Creates a {@code ContactListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public ContactPanel(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        ObservableList\u003cContact\u003e contacts \u003d logic.getAllContacts();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        // Allow height of lists to update automatically"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        contactListPanelPlaceholder.prefHeightProperty().bind(Bindings.size(contacts)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                .multiply(defaultRowHeight).add(paddingHeight));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        contactListPanel \u003d new ContactListPanel(contacts);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        contactListPanelPlaceholder.getChildren().add(contactListPanel.getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justweihong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 2,
      "justweihong": 42
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/lesson/LessonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justweihong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justweihong"
        },
        "content": " * An UI component that displays information of a {@code Lesson}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justweihong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justweihong"
        },
        "content": "public class LessonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"Lesson/LessonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on TrackIter level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public final Lesson lesson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "//    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "//    private Label code;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Creates a {@code ContactCode} with the given {@code Lesson} and index to display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public LessonCard(Lesson lesson, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "//        code.setText(lesson.getCode().code);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        type.setText(lesson.getType().name());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        date.setText(lesson.getDate().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        if (!(other instanceof LessonCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        LessonCard card \u003d (LessonCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u0026\u0026 lesson.equals(card.lesson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justweihong"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 4,
      "UncleGrandpa925": 4,
      "justweihong": 62
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/lesson/LessonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justweihong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justweihong"
        },
        "content": " * Panel containing the list of lessons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justweihong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justweihong"
        },
        "content": "public class LessonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"Lesson/LessonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LessonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private ListView\u003cLesson\u003e lessonListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Creates a {@code LessonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public LessonListPanel(ObservableList\u003cLesson\u003e lessonList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        lessonListView.setItems(lessonList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        lessonListView.setCellFactory(listView -\u003e new LessonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Lesson} using a {@code LessonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    class LessonListViewCell extends ListCell\u003cLesson\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        protected void updateItem(Lesson lesson, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            super.updateItem(lesson, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            if (empty || lesson \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                setGraphic(new LessonCard(lesson, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justweihong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 1,
      "UncleGrandpa925": 4,
      "justweihong": 45
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/module/ModuleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justweihong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justweihong"
        },
        "content": " * An UI component that displays information of a {@code module}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justweihong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justweihong"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"Module/ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on TrackIter level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private Label code;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * Creates a {@code ModuleCard} with the given {@code Module} and index to display."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        code.setText(module.getCode().code);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        name.setText(module.getName().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justweihong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 2,
      "UncleGrandpa925": 3,
      "justweihong": 60
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/module/ModuleListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justweihong"
        },
        "content": "package trackitnus.ui.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.ui.UiPart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justweihong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justweihong"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justweihong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justweihong"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Creates a {@code ContactListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ContactCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                setGraphic(getModuleButton(module));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public Button getModuleButton(Module module) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        Button button \u003d new Button(module.getCode().code);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        ArrayList\u003cObject\u003e moduleValues \u003d new ArrayList\u003c\u003e(Arrays.asList((Object) Module.TYPE, (Object) module));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justweihong"
        },
        "content": "//        button.setOnAction(actionEvent -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justweihong"
        },
        "content": "//            tabConsumer.accept(moduleValues);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justweihong"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        return button;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justweihong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justweihong": 62
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/module/ModulePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justweihong"
        },
        "content": "package trackitnus.ui.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.ui.UiPart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.ui.contact.ContactListPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.ui.lesson.LessonListPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justweihong"
        },
        "content": "import trackitnus.ui.task.TaskListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justweihong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justweihong"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justweihong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justweihong"
        },
        "content": "public class ModulePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"Module/ModulePanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModulePanel.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private LessonListPanel lessonListPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private ContactListPanel contactListPanel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private final int defaultRowHeight \u003d 50;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private final int lessonRowHeight \u003d 40;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private final int paddingHeight \u003d 10;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private HBox moduleHeader;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Label header;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private StackPane lessonListPanelPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private StackPane contactListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * Creates a {@code ModuleListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public ModulePanel(Module module, Logic logic) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        header.setWrapText(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        header.setMaxWidth(500);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        header.setText(module.getCode().code + \" \" + module.getName().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        ObservableList\u003cLesson\u003e lessons \u003d logic.getModuleLessons(module.getCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        ObservableList\u003cTask\u003e tasks \u003d logic.getModuleTasks(module.getCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        ObservableList\u003cContact\u003e contacts \u003d logic.getModuleContacts(module.getCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        // Allow height of lists to update automatically"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        lessonListPanelPlaceholder.prefHeightProperty().bind(Bindings.size(lessons)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                .multiply(lessonRowHeight).add(paddingHeight));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        taskListPanelPlaceholder.prefHeightProperty().bind(Bindings.size(tasks)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                .multiply(defaultRowHeight).add(paddingHeight));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        contactListPanelPlaceholder.prefHeightProperty().bind(Bindings.size(contacts)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                .multiply(defaultRowHeight).add(paddingHeight));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        lessonListPanel \u003d new LessonListPanel(lessons);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        lessonListPanelPlaceholder.getChildren().add(lessonListPanel.getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(tasks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        contactListPanel \u003d new ContactListPanel(contacts);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        contactListPanelPlaceholder.getChildren().add(contactListPanel.getRoot());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justweihong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 33,
      "justweihong": 48
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/task/OverdueTaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "package trackitnus.ui.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "public class OverdueTaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"Task/OverdueTaskListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private Label code;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * Creates a {@code TaskCard} with the given {@code Task} and index to display."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public OverdueTaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        id.setText(\"[\" + displayedIndex + \"] \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        name.setText(task.getName().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        date.setText(task.getDate().format(formatter));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        date.setStyle(\"-fx-text-fill: #C24949\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        remark.setText(task.getRemark());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        code.setText(task.getCode().isPresent() ? task.getCode().get().code + \" \" : \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 42,
      "justweihong": 4
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/task/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": " * An UI component that displays information of a {@code task}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"Task/TaskListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    private Label code;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * Creates a {@code TaskCard} with the given {@code Task} and index to display."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        id.setText(\"[\" + displayedIndex + \"] \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        name.setText(task.getName().toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        remark.setText(task.getRemark());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        code.setText(task.getCode().isPresent() ? task.getCode().get().code + \" \" : \"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u0026\u0026 name.equals(card.name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 51,
      "UncleGrandpa925": 3,
      "justweihong": 4
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/task/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"Task/TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListPanel.TaskListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 46,
      "UncleGrandpa925": 5
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/upcoming/CalendarSection.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "package trackitnus.ui.upcoming;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "public class CalendarSection {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public CalendarSection(String title) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        if (!(other instanceof CalendarSection)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        CalendarSection otherCalSection \u003d (CalendarSection) other;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return otherCalSection.title.equals(title);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return Objects.hash(title);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 35
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/upcoming/CalendarSectionCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "package trackitnus.ui.upcoming;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.ui.task.OverdueTaskCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "public class CalendarSectionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"Upcoming/CalendarSectionCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public final CalendarSection calendarSection;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private final int taskRowHeight \u003d 45;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Label sectionTitle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * Constructor for a section in the calendar"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * @param calendarSection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * @param logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public CalendarSectionCard(CalendarSection calendarSection, ObservableList\u003cTask\u003e taskList, Logic logic) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        this.calendarSection \u003d calendarSection;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        sectionTitle.setText(calendarSection.getTitle());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        if (calendarSection.getTitle().equals(\"Overdue\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            sectionTitle.setStyle(\"-fx-text-fill: #C24949\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        taskListView.prefHeightProperty().bind(Bindings.size(taskList).multiply(taskRowHeight).add(10));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        if (!(other instanceof CalendarSectionCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        CalendarSectionCard card \u003d (CalendarSectionCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return title.equals(card.title);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    setGraphic(new OverdueTaskCard(task, logic.getTaskIndex(task).getOneBased()).getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                } catch (CommandException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 83
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/upcoming/Day.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "package trackitnus.ui.upcoming;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": " * Represents a Day in the Calendar view."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM EEEE\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public Day(LocalDate date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public String getSectionHeader() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return date.format(formatter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        if (!(other instanceof Day)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        Day otherDay \u003d (Day) other;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return otherDay.date.equals(date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return Objects.hash(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 51
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/upcoming/DayCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "package trackitnus.ui.upcoming;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.ui.UiPart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.ui.task.TaskCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "public class DayCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"Upcoming/DayCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public final Day day;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private final int lessonRowHeight \u003d 30;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private final int taskRowHeight \u003d 45;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private ListView\u003cLesson\u003e lessonListView;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * Constructor for DayCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public DayCard(Day day, ObservableList\u003cTask\u003e taskList, ObservableList\u003cLesson\u003e lessonList, Logic logic) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        if (date.equals(LocalDate.now())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            date.setText(\"TODAY - \" + day.getSectionHeader());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            date.setText(day.getSectionHeader());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        if (lessonList.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            lessonListView.setStyle(\"-fx-background-color: transparent\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        setUpLessonView(lessonList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        setUpTaskView(taskList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private void setUpLessonView(ObservableList\u003cLesson\u003e lessonList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        lessonListView.prefHeightProperty().bind(Bindings.size(lessonList).multiply(lessonRowHeight).add(10));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        lessonListView.setItems(lessonList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        lessonListView.setCellFactory(listView -\u003e new LessonListViewCell());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private void setUpTaskView(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        taskListView.prefHeightProperty().bind(Bindings.size(taskList).multiply(taskRowHeight).add(35));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        if (!(other instanceof DayCard)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        DayCard card \u003d (DayCard) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return date.getText().equals(card.date.getText());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    setGraphic(new TaskCard(task, logic.getTaskIndex(task).getOneBased()).getRoot());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                } catch (CommandException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    class LessonListViewCell extends ListCell\u003cLesson\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        protected void updateItem(Lesson lesson, boolean empty) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            super.updateItem(lesson, empty);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            if (empty || lesson \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    setGraphic(new UpcomingLessonCard(lesson, logic.getLessonIndex(lesson).getOneBased()).getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                } catch (CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 128
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/upcoming/UpcomingLessonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "package trackitnus.ui.upcoming;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": " * An UI component that displays information of a {@code Lesson}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "public class UpcomingLessonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"Upcoming/UpcomingLessonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on TrackIter level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public final Lesson lesson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Label code;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * Creates a {@code ContactCode} with the given {@code Lesson} and index to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public UpcomingLessonCard(Lesson lesson, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        id.setText(\"[\" + displayedIndex + \"] \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        code.setText(lesson.getCode().code);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        type.setText(lesson.getType().name());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        date.setText(lesson.getDate().toString().substring(4));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        if (!(other instanceof UpcomingLessonCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        UpcomingLessonCard card \u003d (UpcomingLessonCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u0026\u0026 lesson.equals(card.lesson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 68
    }
  },
  {
    "path": "src/main/java/trackitnus/ui/upcoming/UpcomingPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "package trackitnus.ui.upcoming;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "import trackitnus.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "public class UpcomingPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    public static final String TYPE \u003d \"U\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private static final String FXML \u003d \"Upcoming/UpcomingPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(UpcomingPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private final ObservableList\u003cObject\u003e calendarDates \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private ListView\u003cObject\u003e calendarView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     * Constructor for Upcoming Panel"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    public UpcomingPanel(Logic logic) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        getDatesForTheWeek(today);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        calendarView.setItems(calendarDates);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        calendarView.setCellFactory(listView -\u003e new DateListViewCell());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    private void getDatesForTheWeek(LocalDate today) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        List\u003cLocalDate\u003e list \u003d today.datesUntil(today.plusDays(7)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        calendarDates.add(new CalendarSection(\"Overdue\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        for (LocalDate date : list) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            calendarDates.add(new Day(date));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        calendarDates.add(new CalendarSection(\"Future\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    class DateListViewCell extends ListCell\u003cObject\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        protected void updateItem(Object object, boolean empty) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            super.updateItem(object, empty);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            if (empty || object \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                if (object instanceof Day) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    Day day \u003d (Day) object;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    setGraphic(new DayCard(day, logic.getDayUpcomingTasks(day.getDate()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                            logic.getDayUpcomingLessons(day.getDate()), logic).getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    assert(object instanceof CalendarSection);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    CalendarSection calendarSection \u003d (CalendarSection) object;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    allocateCalendarSections(calendarSection);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        public void allocateCalendarSections(CalendarSection c) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            if (c.getTitle().equals(\"Overdue\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                setGraphic(new CalendarSectionCard(c, logic.getOverdueTasks(), logic).getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                assert(c.getTitle().equals(\"Future\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                setGraphic(new CalendarSectionCard(c, logic.getFutureTasks(), logic).getRoot());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 85,
      "justweihong": 1
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" maxWidth\u003d\"Infinity\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/Contact/ContactListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cInsets top\u003d\"1\" right\u003d\"5\" bottom\u003d\"1\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 4,
      "-": 29,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/main/resources/view/Contact/ContactListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    \u003cListView fx:id\u003d\"contactListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "UncleGrandpa925": 2,
      "justweihong": 1
    }
  },
  {
    "path": "src/main/resources/view/Contact/ContactPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003cListView xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"modulePanel\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cInsets top\u003d\"1\" right\u003d\"5\" bottom\u003d\"1\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cLabel text\u003d\"All Contacts\" styleClass\u003d\"date_label\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cLine startX\u003d\"0\" endX\u003d\"500\" style\u003d\"-fx-stroke: #8C8C89\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cStackPane fx:id\u003d\"contactListPanelPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                \u003cInsets bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c/ListView\u003e"
      }
    ],
    "authorContributionMap": {
      "justweihong": 21
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    font-family: \"Poppins\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    src: url(\"/fonts/Poppins-Regular.ttf\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    font-family: \"PoppinsSemiBold\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    src: url(\"/fonts/Poppins-SemiBold.ttf\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    font-family: \"PoppinsBold\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    src: url(\"/fonts/Poppins-Bold.ttf\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #434754;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    background-color: #434754;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \u0027Poppins\u0027;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justweihong"
        },
        "content": ".side-panel {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    -fx-background-color: #313543!important;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    -fx-padding: 0px!important;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-base: #434754;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-control-inner-background: #434754;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #434754;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    /*-fx-border-width: 0 0 1 0;*/"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    -fx-border-color: transparent transparent derive(-fx-base, 80%) transparent;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #59687C;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #59687C;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #434754;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ".lesson-list-view {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #62687A;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justweihong"
        },
        "content": "#tabContainer {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    -fx-background-color: #434754;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justweihong"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justweihong"
        },
        "content": "#modulePanel {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    -fx-background-color: #434754;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justweihong"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ".module_big_label {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    -fx-font-size: 25px;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ".date_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-size: 17px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justweihong"
        },
        "content": "#HelpPanel {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justweihong"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justweihong"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "justweihong"
        },
        "content": ".help_panel {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "justweihong"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justweihong"
        },
        "content": ".help_intro {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    -fx-font-size: 17px;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "justweihong"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: Poppins;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-size: 17px;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ".table-row-cell:selected {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ".copy-url-button {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "justweihong"
        },
        "content": ".module_small_label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #434754;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #434754;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-border-color: #434754;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-padding: 5 10 5 5;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #434754;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #8C8C89;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ".result-container {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #8C8C89;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-radius: 5, 5, 5, 5;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-border-radius: 5, 5, 5, 5;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-pref-height: 20px;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ".item-pane {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #434754;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #434754;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #434754;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #434754;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-text-fill: #68C2E8;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ".command-box-label {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #434754;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #5D606C;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #3D3F45;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #8C8C89;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-radius: 5, 5, 5, 5;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-font-family: \"Poppins\";"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "#resultDisplay {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #8C8C89;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-color: #D14F4F;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 107,
      "-": 240,
      "justweihong": 27,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/main/resources/view/HelpPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.shape.Rectangle?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003cListView fx:id\u003d\"HelpPanel\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003cVBox styleClass\u003d\"help_panel\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cInsets bottom\u003d\"1\" left\u003d\"15\" right\u003d\"5\" top\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cLabel styleClass\u003d\"module_big_label\" text\u003d\"Command Summary\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cLine endX\u003d\"500\" startX\u003d\"0\" style\u003d\"-fx-stroke: #8C8C89\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "      \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"#1f93ff00\" height\u003d\"6.0\" stroke\u003d\"#ffffff00\" strokeType\u003d\"INSIDE\" width\u003d\"214.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cLabel styleClass\u003d\"help_intro\" text\u003d\"For more info, refer to User Guide:\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" style\u003d\"-fx-font-size: 15\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    styleClass\u003d\"copyurl-button\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cTableView fx:id\u003d\"helpCardTableView\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c/ListView\u003e"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 30,
      "justweihong": 9
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Button\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cTableView fx:id\u003d\"helpCardTableView\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 8,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/Lesson/LessonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cInsets right\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justweihong"
        },
        "content": "                \u003cLabel fx:id\u003d\"type\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$type\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$date\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 3,
      "justweihong": 29
    }
  },
  {
    "path": "src/main/resources/view/Lesson/LessonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003cListView fx:id\u003d\"lessonListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "justweihong": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003cfx:root onCloseRequest\u003d\"#handleExit\" title\u003d\"TrackIt@NUS\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cImage url\u003d\"@/images/logo.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cHBox fx:id\u003d\"side_pane\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cStackPane fx:id\u003d\"sidePanelPlaceholder\" minWidth\u003d\"150\" styleClass\u003d\"side_panel\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cVBox VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"tabPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                               VBox.vgrow\u003d\"NEVER\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 13,
      "-": 20,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/main/resources/view/Module/ModuleListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"25\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cInsets top\u003d\"1\" right\u003d\"5\" bottom\u003d\"1\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cLabel fx:id\u003d\"code\" text\u003d\"\\$first\" styleClass\u003d\"module_small_label\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 1,
      "justweihong": 20
    }
  },
  {
    "path": "src/main/resources/view/Module/ModuleListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 1,
      "justweihong": 6
    }
  },
  {
    "path": "src/main/resources/view/Module/ModulePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003cListView fx:id\u003d\"modulePanel\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cInsets top\u003d\"1\" right\u003d\"5\" bottom\u003d\"1\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cHBox spacing\u003d\"10\" id\u003d\"moduleHeader\" fx:id\u003d\"moduleHeader\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cInsets bottom\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cLabel fx:id\u003d\"header\" text\u003d\"\\$header\" styleClass\u003d\"module_big_label\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cLine startX\u003d\"0\" endX\u003d\"500\" style\u003d\"-fx-stroke: #8C8C89\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cStackPane fx:id\u003d\"lessonListPanelPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cInsets bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cLabel text\u003d\"Tasks\" styleClass\u003d\"date_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cLine startX\u003d\"0\" endX\u003d\"500\" style\u003d\"-fx-stroke: #8C8C89\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cInsets bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cLabel text\u003d\"Contacts\" styleClass\u003d\"date_label\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cLine startX\u003d\"0\" endX\u003d\"500\" style\u003d\"-fx-stroke: #8C8C89\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cStackPane fx:id\u003d\"contactListPanelPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cInsets bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c/ListView\u003e"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 32,
      "justweihong": 12
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"result-container\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" maxWidth\u003d\"1.7976931348623157E308\" styleClass\u003d\"result-display\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "              text\u003d\"Welcome to TrackIt@NUS. Click the Help button on the side menu if you\u0027re lost!\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 4,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/SidePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justweihong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\" styleClass\u003d\"side-panel\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003cButton fx:id\u003d\"upcomingButton\" styleClass\u003d\"side-panel-button\" onAction\u003d\"#toggleUpcomingTab\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cInsets top\u003d\"20\" right\u003d\"5\" bottom\u003d\"8\" left\u003d\"19\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/padding\u003eUpcoming\u003c/Button\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003cButton fx:id\u003d\"contactButton\" styleClass\u003d\"side-panel-button\" onAction\u003d\"#toggleContactTab\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"5\" bottom\u003d\"8\" left\u003d\"19\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/padding\u003eContacts\u003c/Button\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleListView\" prefWidth\u003d\"20\" styleClass\u003d\"side-panel\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003cButton fx:id\u003d\"helpButton\" onAction\u003d\"#toggleHelpTab\" \u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cInsets top\u003d\"0\" right\u003d\"5\" bottom\u003d\"15\" left\u003d\"19\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/padding\u003eHelp\u003c/Button\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 6,
      "justweihong": 19
    }
  },
  {
    "path": "src/main/resources/view/Task/OverdueTaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cInsets left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cInsets left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cLabel fx:id\u003d\"code\" text\u003d\"\\$code\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cLabel text\u003d\" - \" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 22,
      "justweihong": 13
    }
  },
  {
    "path": "src/main/resources/view/Task/TaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cInsets left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justweihong"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cInsets left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cLabel fx:id\u003d\"code\" text\u003d\"\\$code\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justweihong"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justweihong"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justweihong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 21,
      "justweihong": 12
    }
  },
  {
    "path": "src/main/resources/view/Task/TaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 7
    }
  },
  {
    "path": "src/main/resources/view/Upcoming/CalendarSectionCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"75\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cInsets top\u003d\"1\" right\u003d\"5\" bottom\u003d\"1\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cLabel fx:id\u003d\"sectionTitle\" text\u003d\"\\$sectionTitle\" styleClass\u003d\"date_label\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cLine startX\u003d\"0\" startY\u003d\"200\" endX\u003d\"500\" endY\u003d\"200\" style\u003d\"-fx-stroke: #8C8C89\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/ListView\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 29
    }
  },
  {
    "path": "src/main/resources/view/Upcoming/DayCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.shape.Rectangle?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.stage.Screen?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"75\" GridPane.columnIndex\u003d\"0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cInsets bottom\u003d\"1\" left\u003d\"15\" right\u003d\"5\" top\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"date_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cLine endX\u003d\"500\" endY\u003d\"200\" startX\u003d\"0\" startY\u003d\"200\" style\u003d\"-fx-stroke: #8C8C89\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"#1f93ff00\" height\u003d\"16.0\" strokeWidth\u003d\"0.0\" width\u003d\"500.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cListView fx:id\u003d\"lessonListView\" maxWidth\u003d\"500\" styleClass\u003d\"lesson-list-view\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    \u003cInsets top\u003d\"5\" bottom\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/ListView\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" top\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/ListView\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 42
    }
  },
  {
    "path": "src/main/resources/view/Upcoming/UpcomingLessonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cInsets right\u003d\"50\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$date\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cLabel fx:id\u003d\"code\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "                \u003cLabel fx:id\u003d\"type\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$type\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 32
    }
  },
  {
    "path": "src/main/resources/view/Upcoming/UpcomingPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": "    \u003cListView fx:id\u003d\"calendarView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nottiffchan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nottiffchan": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableTrackIterTest/duplicateContactTrackIter.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  \"contacts\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  \"tasks\": [],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  \"modules\": [],"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  \"lessons\": []"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "UncleGrandpa925": 8,
      "simonteozw": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableTrackIterTest/invalidContactTrackIter.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  \"contacts\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  \"tasks\": [],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  \"modules\": [],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  \"lessons\": []"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "UncleGrandpa925": 3,
      "simonteozw": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableTrackIterTest/typicalTrackIter.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  \"contacts\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Benson Meier\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"98765432\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"johnd@example.com\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        \"owesMoney\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Carl Kurz\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"95352563\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"heinz@example.com\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Daniel Meier\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"87652533\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"cornelia@example.com\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Elle Meyer\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482224\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"werner@example.com\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Fiona Kunz\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482427\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"lydia@example.com\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"George Best\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482442\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"anna@example.com\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  \"modules\": ["
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS1101S\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Programming Methodology\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS2100\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Computer Organisation\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS2103T\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Software Engineering\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"MA1101R\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Linear Algebra\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"GER1000H\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Quantitative Reasoning\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS2030S\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Programming Methodology\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  \"tasks\": ["
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Prepare for v1.3 Demo\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"01/11/2020\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS2103T\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"remark\": \"Ensure app runs smoothly\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Work on the final report\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"02/11/2020\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"GER1000H\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"remark\": \"min 500 words\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Buy Mooncakes for Mum\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"03/11/2020\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": null,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"remark\": \"\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Do this week\u0027s Mission\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"03/11/2020\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS1101S\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"remark\": \"Recursion\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Do Tutorial\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"05/11/2020\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS2100\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"remark\": \"\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Study for Final Exam\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"05/11/2020\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"MA1101R\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"remark\": \"Focus on Diagonalisation\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Code Project 2\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"20/11/2020\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS2030S\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"remark\": \"(deadline is at the end of reading week)\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Plan for Alex\u0027s birthday\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"12/12/2020\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": null,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"remark\": \"Buy a cake\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  \"lessons\": ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS2100\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"type\": \"LAB\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"Mon 9:00-10:00\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS1101S\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"type\": \"TUT\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"Mon 12:00-14:00\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS2030S\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"type\": \"LEC\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"Mon 12:00-14:00\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"GER1000H\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"type\": \"LEC\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"Tue 12:00-14:00\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS2100\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"type\": \"LEC\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"Tue 16:00-18:00\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS2030S\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"type\": \"REC\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"Wed 12:00-13:00\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"MA1101R\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"type\": \"SEC\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"Wed 12:00-13:00\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS2103T\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"type\": \"LEC\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"Wed 14:00-16:00\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS2103T\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"type\": \"TUT\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"Thu 14:00-15:00\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"MA1101R\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"type\": \"LEC\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"Thu 16:00-18:00\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS1101S\","
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"type\": \"LEC\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"Fri 12:00-14:00\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"CS2030S\","
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"type\": \"LAB\","
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"Fri 12:00-14:00\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"code\": \"GER1000H\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"type\": \"SEC\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"date\": \"Fri 14:00-16:00\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "UncleGrandpa925": 168,
      "simonteozw": 1
    }
  },
  {
    "path": "src/test/data/JsonTrackIterStorageTest/invalidAndValidContactTrackIter.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  \"contacts\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Valid Contact\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Contact With Invalid Phone Field\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "UncleGrandpa925": 8
    }
  },
  {
    "path": "src/test/data/JsonTrackIterStorageTest/invalidContactTrackIter.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  \"contacts\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "      \"name\": \"Contact with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "UncleGrandpa925": 5
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\": \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\": 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  \"trackIterFilePath\": \"trackIter.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "  \"trackIterFilePath\": \"trackIter.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/test/java/trackitnus/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        private final Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "UncleGrandpa925": 2
    }
  },
  {
    "path": "src/test/java/trackitnus/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/test/java/trackitnus/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 133,
      "UncleGrandpa925": 2
    }
  },
  {
    "path": "src/test/java/trackitnus/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        final Index fifthContactIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(fifthContactIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(fifthContactIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(fifthContactIndex.equals(fifthContactIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(fifthContactIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(fifthContactIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(fifthContactIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "UncleGrandpa925": 9
    }
  },
  {
    "path": "src/test/java/trackitnus/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "UncleGrandpa925": 2
    }
  },
  {
    "path": "src/test/java/trackitnus/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(objects));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(collection));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(objects);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CollectionUtil.requireAllNonNull(collection);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "UncleGrandpa925": 6
    }
  },
  {
    "path": "src/test/java/trackitnus/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "UncleGrandpa925": 4
    }
  },
  {
    "path": "src/test/java/trackitnus/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "UncleGrandpa925": 2
    }
  },
  {
    "path": "src/test/java/trackitnus/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "UncleGrandpa925": 3
    }
  },
  {
    "path": "src/test/java/trackitnus/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 141,
      "UncleGrandpa925": 2
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalContacts.AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.AddContactCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.ContactCommandTestUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyTrackIter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.storage.JsonTrackIterStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.ContactBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        JsonTrackIterStorage trackIterStorage \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new JsonTrackIterStorage(temporaryFolder.resolve(\"trackIter.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        StorageManager storage \u003d new StorageManager(trackIterStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseException(invalidCommand, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String deleteCommand \u003d Contact.TYPE + \" \" + \"delete 9\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandException(deleteCommand, Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // Setup LogicManager with JsonTrackIterIoExceptionThrowingStub"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        JsonTrackIterStorage trackIterStorage \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new JsonTrackIterIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionTrackIter.json\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        StorageManager storage \u003d new StorageManager(trackIterStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String addCommand \u003d Contact.TYPE + \" \" + AddContactCommand.COMMAND_WORD + ContactCommandTestUtil.NAME_DESC_AMY"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            + ContactCommandTestUtil.PHONE_DESC_AMY + ContactCommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact expectedContact \u003d new ContactBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedModel.addContact(expectedContact);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void getFilteredContactList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredContactList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void getModuleTasks_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getModuleTasks(new Code(\"CS2345\")).remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void getOverdueTasks_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getOverdueTasks().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void getFutureTasks_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFutureTasks().remove(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void getDayUpcomingTasks_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            -\u003e logic.getDayUpcomingTasks(ParserUtil.parseValidDate(\"12/12/2020\")).remove(0));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static class JsonTrackIterIoExceptionThrowingStub extends JsonTrackIterStorage {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        private JsonTrackIterIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public void saveTrackIter(ReadOnlyTrackIter trackIter, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "UncleGrandpa925": 44,
      "simonteozw": 28
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.TrackIter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * - the address book, filtered contact list and selected contact in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        TrackIter expectedTrackIter \u003d new TrackIter(actualModel.getTrackIter());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        List\u003cContact\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredContactList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(expectedTrackIter, actualModel.getTrackIter());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredContactList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "UncleGrandpa925": 12,
      "simonteozw": 1
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "UncleGrandpa925": 7
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "UncleGrandpa925": 7
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/commands/contact/AddContactCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalTrackIter.getTypicalTrackIter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.ContactBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddContactCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class AddContactCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        model \u003d new ModelManager(getTypicalTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_newContact_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact validContact \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedModel.addContact(validContact);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertCommandSuccess(new AddContactCommand(validContact), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            String.format(AddContactCommand.MESSAGE_ADD_CONTACT_SUCCESS, validContact), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_duplicateContact_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact contactInList \u003d model.getTrackIter().getContactList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandFailure(new AddContactCommand(contactInList), model, Messages.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "UncleGrandpa925": 19,
      "simonteozw": 3
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/commands/contact/AddContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyTrackIter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.TrackIter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.ModelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.ContactBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class AddContactCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void constructor_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new AddContactCommand(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_contactAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ModelStubAcceptingContactAdded modelStub \u003d new ModelStubAcceptingContactAdded();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact validContact \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        CommandResult commandResult \u003d new AddContactCommand(validContact).execute(modelStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(String.format(AddContactCommand.MESSAGE_ADD_CONTACT_SUCCESS, validContact),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(Arrays.asList(validContact), modelStub.contactsAdded);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_duplicateContact_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact validContact \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        AddContactCommand addContactCommand \u003d new AddContactCommand(validContact);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithContact(validContact);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Messages.MESSAGE_DUPLICATE_CONTACT, () -\u003e addContactCommand.execute(modelStub));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact alice \u003d new ContactBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact bob \u003d new ContactBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        AddContactCommand addAliceCommand \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        AddContactCommand addBobCommand \u003d new AddContactCommand(bob);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        AddContactCommand addAliceCommandCopy \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        // different contact -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * A Model stub that contains a single contact."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private class ModelStubWithContact extends ModelStub {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        private final Contact contact;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ModelStubWithContact(Contact contact) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            requireNonNull(contact);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            this.contact \u003d contact;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            requireNonNull(contact);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return this.contact.isSameContact(contact);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * A Model stub that always accept the contact being added."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private class ModelStubAcceptingContactAdded extends ModelStub {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        final ArrayList\u003cContact\u003e contactsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            requireNonNull(contact);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return contactsAdded.stream().anyMatch(contact::isSameContact);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public void addContact(Contact contact) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            requireNonNull(contact);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            contactsAdded.add(contact);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public ReadOnlyTrackIter getTrackIter() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return new TrackIter();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "UncleGrandpa925": 37,
      "simonteozw": 15
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/commands/contact/ContactCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.EditContactDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class ContactCommandTestUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James/\"; // \u0027/\u0027 not allowed in names"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final EditContactCommand.EditContactDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final EditContactCommand.EditContactDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DESC_AMY \u003d new EditContactDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DESC_BOB \u003d new EditContactDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the contact at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static void showContactAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredContactList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact contact \u003d model.getFilteredContactList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        final String[] splitName \u003d contact.getName().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        model.updateFilteredContactList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(1, model.getFilteredContactList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 74,
      "simonteozw": 2
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/commands/contact/DeleteContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalTrackIter.getTypicalTrackIter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.typical.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * {@code DeleteContactCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class DeleteContactCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact contactToDelete \u003d model.getFilteredContactList().get(TypicalIndexes.INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_CONTACT_SUCCESS, contactToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedModel.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertCommandSuccess(deleteContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredContactList().size() + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandFailure(deleteContactCommand, model, Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ContactCommandTestUtil.showContactAtIndex(model, TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact contactToDelete \u003d model.getFilteredContactList().get(TypicalIndexes.INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_CONTACT_SUCCESS, contactToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedModel.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        showNoContact(expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertCommandSuccess(deleteContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ContactCommandTestUtil.showContactAtIndex(model, TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTrackIter().getContactList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandFailure(deleteContactCommand, model, Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DeleteContactCommand deleteFirstCommand \u003d new DeleteContactCommand(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DeleteContactCommand deleteSecondCommand \u003d new DeleteContactCommand(TypicalIndexes.INDEX_SECOND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DeleteContactCommand deleteFirstCommandCopy \u003d new DeleteContactCommand(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        // different contact -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private void showNoContact(Model model) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        model.updateFilteredContactList(p -\u003e false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(model.getFilteredContactList().isEmpty());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "UncleGrandpa925": 36,
      "simonteozw": 7
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/commands/contact/EditContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalTrackIter.getTypicalTrackIter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.TrackIter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.ContactBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.EditContactDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.typical.TypicalIndexes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * and unit tests for EditContactCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class EditContactCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact editedContact \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder(editedContact).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(TypicalIndexes.INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_CONTACT_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TrackIter(model.getTrackIter()), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedModel.setContact(model.getFilteredContactList().get(0), editedContact);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Index indexLastContact \u003d Index.fromOneBased(model.getFilteredContactList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact lastContact \u003d model.getFilteredContactList().get(indexLastContact.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ContactBuilder contactInList \u003d new ContactBuilder(lastContact);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact editedContact \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            contactInList.withName(ContactCommandTestUtil.VALID_NAME_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .withPhone(ContactCommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .withTags(ContactCommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand.EditContactDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactDescriptorBuilder().withName(ContactCommandTestUtil.VALID_NAME_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .withPhone(ContactCommandTestUtil.VALID_PHONE_BOB).withTags(ContactCommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(indexLastContact, descriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_CONTACT_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TrackIter(model.getTrackIter()), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedModel.setContact(lastContact, editedContact);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(TypicalIndexes.INDEX_FIRST,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactCommand.EditContactDescriptor());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact editedContact \u003d model.getFilteredContactList().get(TypicalIndexes.INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_CONTACT_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TrackIter(model.getTrackIter()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ContactCommandTestUtil.showContactAtIndex(model, TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact contactInFilteredList \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            model.getFilteredContactList().get(TypicalIndexes.INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact editedContact \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new ContactBuilder(contactInFilteredList).withPhone(\"98989898\").build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(TypicalIndexes.INDEX_FIRST,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new EditContactDescriptorBuilder().withPhone(\"98989898\").build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_CONTACT_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TrackIter(model.getTrackIter()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedModel.setContact(model.getFilteredContactList().get(0), editedContact);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        ContactCommandTestUtil.showContactAtIndex(expectedModel, TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_duplicateContactUnfilteredList_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact firstContact \u003d model.getFilteredContactList().get(TypicalIndexes.INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder(firstContact).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(TypicalIndexes.INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandFailure(editContactCommand, model, Messages.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_duplicateContactFilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ContactCommandTestUtil.showContactAtIndex(model, TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        // edit contact in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact contactInList \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            model.getTrackIter().getContactList().get(TypicalIndexes.INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(TypicalIndexes.INDEX_FIRST,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactDescriptorBuilder(contactInList).build());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandFailure(editContactCommand, model, Messages.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_invalidContactIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredContactList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand.EditContactDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactDescriptorBuilder().withName(ContactCommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandFailure(editContactCommand, model, Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_invalidContactIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ContactCommandTestUtil.showContactAtIndex(model, TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTrackIter().getContactList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactDescriptorBuilder().withName(ContactCommandTestUtil.VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandFailure(editContactCommand, model, Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        final EditContactCommand standardCommand \u003d new EditContactCommand(TypicalIndexes.INDEX_FIRST,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand.EditContactDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactCommand.EditContactDescriptor(ContactCommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand commandWithSameValues \u003d new EditContactCommand(TypicalIndexes.INDEX_FIRST,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            copyDescriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(standardCommand.equals(new EditContactCommand(TypicalIndexes.INDEX_SECOND,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.DESC_AMY)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(standardCommand.equals(new EditContactCommand(TypicalIndexes.INDEX_FIRST,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.DESC_BOB)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "UncleGrandpa925": 83,
      "simonteozw": 13
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/commands/contact/EditContactDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.EditContactCommand.EditContactDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.EditContactDescriptorBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class EditContactDescriptorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactDescriptor descriptorWithSameValues \u003d new EditContactDescriptor(ContactCommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(ContactCommandTestUtil.DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(ContactCommandTestUtil.DESC_AMY.equals(ContactCommandTestUtil.DESC_AMY));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(ContactCommandTestUtil.DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(ContactCommandTestUtil.DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(ContactCommandTestUtil.DESC_AMY.equals(ContactCommandTestUtil.DESC_BOB));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactDescriptorBuilder(ContactCommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .withName(ContactCommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(ContactCommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        editedAmy \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactDescriptorBuilder(ContactCommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .withPhone(ContactCommandTestUtil.VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(ContactCommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        editedAmy \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactDescriptorBuilder(ContactCommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .withEmail(ContactCommandTestUtil.VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(ContactCommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        editedAmy \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactDescriptorBuilder(ContactCommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .withTags(ContactCommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(ContactCommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 55
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/commands/contact/FindContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalContacts.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalContacts.ELLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalContacts.FIONA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalTrackIter.getTypicalTrackIter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindContactCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class FindContactCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        FindContactCommand findFirstCommand \u003d new FindContactCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        FindContactCommand findSecondCommand \u003d new FindContactCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        FindContactCommand findFirstCommandCopy \u003d new FindContactCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        // different contact -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_zeroKeywords_noContactFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_CONTACTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        FindContactCommand command \u003d new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedModel.updateFilteredContactList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredContactList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_multipleKeywords_multipleContactsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_CONTACTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        FindContactCommand command \u003d new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedModel.updateFilteredContactList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredContactList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "UncleGrandpa925": 21,
      "simonteozw": 8
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/commands/lesson/DeleteLessonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalTrackIter.getTypicalTrackIter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.typical.TypicalIndexes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "class DeleteLessonCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Lesson lessonToDelete \u003d model.getFilteredLessonList().get(TypicalIndexes.INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DeleteLessonCommand deleteLessonCommand \u003d new DeleteLessonCommand(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteLessonCommand.MESSAGE_DELETE_LESSON_SUCCESS, lessonToDelete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedModel.deleteLesson(lessonToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandSuccess(deleteLessonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredLessonList().size() + 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DeleteLessonCommand deleteLessonCommand \u003d new DeleteLessonCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandFailure(deleteLessonCommand, model, Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        model.updateFilteredLessonList(model.PREDICATE_SHOW_ALL_LESSONS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Lesson lessonToDelete \u003d model.getFilteredLessonList().get(TypicalIndexes.INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DeleteLessonCommand deleteLessonCommand \u003d new DeleteLessonCommand(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteLessonCommand.MESSAGE_DELETE_LESSON_SUCCESS, lessonToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedModel.deleteLesson(lessonToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandSuccess(deleteLessonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        model.updateFilteredLessonList(p -\u003e false); // show no lesson"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromZeroBased(model.getFilteredLessonList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of the lesson list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTrackIter().getLessonList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DeleteLessonCommand deleteLessonCommand \u003d new DeleteLessonCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandFailure(deleteLessonCommand, model, Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DeleteLessonCommand deleteFirstCommand \u003d new DeleteLessonCommand(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DeleteLessonCommand deleteSecondCommand \u003d new DeleteLessonCommand(TypicalIndexes.INDEX_SECOND);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DeleteLessonCommand deleteFirstCommandCopy \u003d new DeleteLessonCommand(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(deleteFirstCommandCopy, deleteFirstCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertNotEquals(deleteFirstCommand, 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertNotEquals(deleteFirstCommand, null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // different lesson -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertNotEquals(deleteSecondCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 94
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/commands/module/AddModuleCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalTrackIter.getTypicalTrackIter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddModuleCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class AddModuleCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        model \u003d new ModelManager(getTypicalTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_newModule_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Module validModule \u003d new Module(new Code(\"CS3233\"), new Name(\"Sample\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedModel.addModule(validModule);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandSuccess(new AddModuleCommand(validModule), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            String.format(AddModuleCommand.MESSAGE_ADD_MODULE_SUCCESS, validModule), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Module moduleInList \u003d model.getTrackIter().getModuleList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandFailure(new AddModuleCommand(moduleInList), model, Messages.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void execute_duplicateModuleCode_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Module validModule \u003d new Module(new Code(\"CS1101S\"), new Name(\"Sample\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandFailure(new AddModuleCommand(validModule), model, Messages.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 53
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/commands/task/AddTaskCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package trackitnus.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static trackitnus.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static trackitnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static trackitnus.testutil.typical.TypicalTrackIter.getTypicalTrackIter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class AddTaskCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        model \u003d new ModelManager(getTypicalTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void execute_newTask_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Task validTask \u003d new Task(new Name(\"Testing task\"), ParserUtil.parseValidDate(\"12/12/2020\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            null, \"sample remarks\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTrackIter(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertCommandSuccess(new AddTaskCommand(validTask), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            String.format(AddTaskCommand.MESSAGE_ADD_TASK_SUCCESS, validTask), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Task taskInList \u003d model.getTrackIter().getTaskList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertCommandFailure(new AddTaskCommand(taskInList), model, Messages.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 39,
      "UncleGrandpa925": 5
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "UncleGrandpa925": 3
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.typical.TypicalIndexes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R/chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(ParseException.class, Messages.MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assertions.assertEquals(TypicalIndexes.INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assertions.assertEquals(TypicalIndexes.INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOptionalPhone(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseOptionalPhone(Optional.of(INVALID_PHONE)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assertions.assertEquals(expectedPhone, ParserUtil.parseOptionalPhone(Optional.of(VALID_PHONE)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assertions.assertEquals(expectedPhone, ParserUtil.parseOptionalPhone(Optional.of(phoneWithWhitespace)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assertions.assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assertions.assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseOptionalEmail(Optional.of(INVALID_EMAIL)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseOptionalEmail(Optional.of(VALID_EMAIL)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseOptionalEmail(Optional.of(emailWithWhitespace)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 160,
      "UncleGrandpa925": 34
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/TrackIterParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.AddContactCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.DeleteContactCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.EditContactCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.FindContactCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.ContactUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.ContactBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.EditContactDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.typical.TypicalIndexes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class TrackIterParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final TrackIterParser parser \u003d new TrackIterParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact contact \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        AddContactCommand command \u003d (AddContactCommand) parser.parseCommand(Contact.TYPE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            + \" \" + ContactUtil.getAddCommand(contact));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertEquals(new AddContactCommand(contact), command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        DeleteContactCommand command \u003d (DeleteContactCommand) parser.parseCommand("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Contact.TYPE + \" \" + DeleteContactCommand.COMMAND_WORD + \" \" + TypicalIndexes.INDEX_FIRST"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .getOneBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(new DeleteContactCommand(TypicalIndexes.INDEX_FIRST), command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact contact \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder(contact).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        EditContactCommand command \u003d (EditContactCommand) parser.parseCommand(Contact.TYPE + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            + EditContactCommand.COMMAND_WORD + \" \" + TypicalIndexes.INDEX_FIRST.getOneBased() + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            + ContactUtil.getEditContactDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(new EditContactCommand(TypicalIndexes.INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        FindContactCommand command \u003d (FindContactCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            Contact.TYPE + \" \" + FindContactCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertEquals(new FindContactCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(ParseException.class, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(ParseException.class, Messages.MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \"unknownCommand\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "UncleGrandpa925": 30,
      "simonteozw": 10
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/contact/AddContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalContacts.AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalContacts.BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.AddContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.ContactCommandTestUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.ContactBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class AddContactCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final AddContactCommandParser parser \u003d new AddContactCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact expectedContact \u003d new ContactBuilder(BOB).withTags(ContactCommandTestUtil.VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.PREAMBLE_WHITESPACE + ContactCommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.PHONE_DESC_BOB + ContactCommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                + ContactCommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddContactCommand(expectedContact));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.NAME_DESC_AMY + ContactCommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.PHONE_DESC_BOB + ContactCommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                + ContactCommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddContactCommand(expectedContact));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.NAME_DESC_BOB + ContactCommandTestUtil.PHONE_DESC_AMY"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.PHONE_DESC_BOB + ContactCommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                + ContactCommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddContactCommand(expectedContact));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.NAME_DESC_BOB + ContactCommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.EMAIL_DESC_AMY + ContactCommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                + ContactCommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddContactCommand(expectedContact));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.NAME_DESC_BOB + ContactCommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                + ContactCommandTestUtil.EMAIL_DESC_BOB + ContactCommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddContactCommand(expectedContact));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact expectedContactMultipleTags \u003d new ContactBuilder(BOB).withTags(ContactCommandTestUtil.VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.NAME_DESC_BOB + ContactCommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                + ContactCommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.TAG_DESC_HUSBAND + ContactCommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddContactCommand(expectedContactMultipleTags));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact expectedContact \u003d new ContactBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.NAME_DESC_AMY + ContactCommandTestUtil.PHONE_DESC_AMY"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                + ContactCommandTestUtil.EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddContactCommand(expectedContact));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            AddContactCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.VALID_NAME_BOB + ContactCommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.EMAIL_DESC_BOB + ContactCommandTestUtil.ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//        assertParseFailure(parser,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//            ContactCommandTestUtil.NAME_DESC_BOB + ContactCommandTestUtil.VALID_PHONE_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//                + ContactCommandTestUtil.EMAIL_DESC_BOB + ContactCommandTestUtil.ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//            expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//        // missing email prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//        assertParseFailure(parser,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//            ContactCommandTestUtil.NAME_DESC_BOB + ContactCommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//                + ContactCommandTestUtil.VALID_EMAIL_BOB + ContactCommandTestUtil.ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//            expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.VALID_NAME_BOB + ContactCommandTestUtil.VALID_PHONE_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.VALID_EMAIL_BOB + ContactCommandTestUtil.VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.INVALID_NAME_DESC + ContactCommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.EMAIL_DESC_BOB + ContactCommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.TAG_DESC_HUSBAND + ContactCommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.NAME_DESC_BOB + ContactCommandTestUtil.INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.EMAIL_DESC_BOB + ContactCommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.TAG_DESC_HUSBAND + ContactCommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.NAME_DESC_BOB + ContactCommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.INVALID_EMAIL_DESC + ContactCommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.TAG_DESC_HUSBAND + ContactCommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.NAME_DESC_BOB + ContactCommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                + ContactCommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.INVALID_TAG_DESC + ContactCommandTestUtil.VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.INVALID_NAME_DESC + ContactCommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.EMAIL_DESC_BOB + ContactCommandTestUtil.INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            ContactCommandTestUtil.PREAMBLE_NON_EMPTY + ContactCommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.PHONE_DESC_BOB + ContactCommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.ADDRESS_DESC_BOB + ContactCommandTestUtil.TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 148,
      "simonteozw": 8
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/contact/DeleteContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.DeleteContactCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.typical.TypicalIndexes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * outside of the DeleteContactCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * same path through the DeleteContactCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class DeleteContactCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final DeleteContactCommandParser parser \u003d new DeleteContactCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteContactCommand(TypicalIndexes.INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "UncleGrandpa925": 8,
      "simonteozw": 5
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/contact/EditContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.commons.core.Messages.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.ContactCommandTestUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.EditContactCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.EditContactDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.typical.TypicalIndexes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class EditContactCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditContactCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final EditContactCommandParser parser \u003d new EditContactCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, ContactCommandTestUtil.VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"-5\" + ContactCommandTestUtil.NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"0\" + ContactCommandTestUtil.NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"1\" + ContactCommandTestUtil.INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"1\" + ContactCommandTestUtil.INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); //"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"1\" + ContactCommandTestUtil.INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); //"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"1\" + ContactCommandTestUtil.INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); //"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \"1\" + ContactCommandTestUtil.INVALID_PHONE_DESC + ContactCommandTestUtil.EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \"1\" + ContactCommandTestUtil.PHONE_DESC_BOB + ContactCommandTestUtil.INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Contact} being edited,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \"1\" + ContactCommandTestUtil.TAG_DESC_FRIEND + ContactCommandTestUtil.TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \"1\" + ContactCommandTestUtil.TAG_DESC_FRIEND + TAG_EMPTY + ContactCommandTestUtil.TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \"1\" + TAG_EMPTY + ContactCommandTestUtil.TAG_DESC_FRIEND + ContactCommandTestUtil.TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \"1\" + ContactCommandTestUtil.INVALID_NAME_DESC + ContactCommandTestUtil.INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.VALID_ADDRESS_AMY + ContactCommandTestUtil.VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            targetIndex.getOneBased() + ContactCommandTestUtil.PHONE_DESC_BOB + ContactCommandTestUtil.TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                + ContactCommandTestUtil.EMAIL_DESC_AMY + ContactCommandTestUtil.NAME_DESC_AMY"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                + ContactCommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand.EditContactDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactDescriptorBuilder().withName(ContactCommandTestUtil.VALID_NAME_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .withPhone(ContactCommandTestUtil.VALID_PHONE_BOB).withEmail(ContactCommandTestUtil.VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .withTags(ContactCommandTestUtil.VALID_TAG_HUSBAND, ContactCommandTestUtil.VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            targetIndex.getOneBased() + ContactCommandTestUtil.PHONE_DESC_BOB + ContactCommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand.EditContactDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactDescriptorBuilder().withPhone(ContactCommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .withEmail(ContactCommandTestUtil.VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ContactCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand.EditContactDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactDescriptorBuilder().withName(ContactCommandTestUtil.VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ContactCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        descriptor \u003d new EditContactDescriptorBuilder().withPhone(ContactCommandTestUtil.VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ContactCommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        descriptor \u003d new EditContactDescriptorBuilder().withEmail(ContactCommandTestUtil.VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ContactCommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        descriptor \u003d new EditContactDescriptorBuilder().withTags(ContactCommandTestUtil.VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            targetIndex"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .getOneBased() + ContactCommandTestUtil.PHONE_DESC_AMY + ContactCommandTestUtil.ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.TAG_DESC_FRIEND + ContactCommandTestUtil.PHONE_DESC_AMY"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                + ContactCommandTestUtil.EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                + ContactCommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.EMAIL_DESC_BOB + ContactCommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand.EditContactDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactDescriptorBuilder().withPhone(ContactCommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                .withEmail(ContactCommandTestUtil.VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .withTags(ContactCommandTestUtil.VALID_TAG_FRIEND, ContactCommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            targetIndex"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .getOneBased() + ContactCommandTestUtil.INVALID_PHONE_DESC + ContactCommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand.EditContactDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactDescriptorBuilder().withPhone(ContactCommandTestUtil.VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        userInput \u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            targetIndex"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .getOneBased() + ContactCommandTestUtil.EMAIL_DESC_BOB + ContactCommandTestUtil.INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                + ContactCommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new EditContactDescriptorBuilder().withPhone(ContactCommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                .withEmail(ContactCommandTestUtil.VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 210,
      "simonteozw": 6
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/contact/FindContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.FindContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class FindContactCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final FindContactCommandParser parser \u003d new FindContactCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        FindContactCommand expectedFindContactCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new FindContactCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindContactCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindContactCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "UncleGrandpa925": 7,
      "simonteozw": 7
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/lesson/AddLessonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.lesson.AddLessonCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.typical.TypicalLessons;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class AddLessonCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final AddLessonCommandParser parser \u003d new AddLessonCommandParser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"L add m/CS1101S n/lecture d/Fri 12:00-14:00\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddLessonCommand(TypicalLessons.CS1101S_LEC));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"L add m/CS1101S n/tutorial d/Mon 12:00-14:00\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddLessonCommand(TypicalLessons.CS1101S_TUT));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"L add m/CS2100 n/laboratory d/Mon 09:00-10:00\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddLessonCommand(TypicalLessons.CS2100_LAB));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"L add m/CS2030S n/recitation d/Wed 12:00-13:00\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddLessonCommand(TypicalLessons.CS2030S_REC));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"L add m/GER1000H n/sectional d/Fri 14:00-16:00\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddLessonCommand(TypicalLessons.GER1000H_SEC));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"L add m/CS1101S n/LEC d/Fri 12:00-14:00\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddLessonCommand(TypicalLessons.CS1101S_LEC));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"L add m/CS1101S n/TUT d/Mon 12:00-14:00\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddLessonCommand(TypicalLessons.CS1101S_TUT));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"L add m/CS2100 n/LAB d/Mon 09:00-10:00\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddLessonCommand(TypicalLessons.CS2100_LAB));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"L add m/CS2030S n/REC d/Wed 12:00-13:00\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddLessonCommand(TypicalLessons.CS2030S_REC));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"L add m/GER1000H n/SEC d/Fri 14:00-16:00\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddLessonCommand(TypicalLessons.GER1000H_SEC));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 36
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/lesson/DeleteLessonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.lesson.DeleteLessonCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.typical.TypicalIndexes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class DeleteLessonCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final DeleteLessonCommandParser parser \u003d new DeleteLessonCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteLessonCommand(TypicalIndexes.INDEX_FIRST));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, \"2\", new DeleteLessonCommand(TypicalIndexes.INDEX_SECOND));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 27
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/lesson/EditLessonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.lesson.EditLessonCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class EditLessonCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final EditLessonCommandParser parser \u003d new EditLessonCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    // TODO: Improve this"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_noFieldsProvided_failure() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            EditLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_justModuleProvided_failure() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"m/CS1231S n/lecture\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            EditLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 24
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/module/AddModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class AddModuleCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final AddModuleCommandParser parser \u003d new AddModuleCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        AddModuleCommand expectedCs1231s \u003d new AddModuleCommand(new Module(new Code(\"CS1231S\"), new Name(\"Discrete \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            + \"Structures\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        AddModuleCommand expectedMkt3761d \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new AddModuleCommand(new Module(new Code(\"MKT3761D\"), new Name(\"TIM: Sustainability Marketing\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" n/Discrete Structures m/CS1231S\", expectedCs1231s);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" m/CS1231S n/Discrete Structures \", expectedCs1231s);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" m/CS1231S n/Discrete Structures   \", expectedCs1231s);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .assertParseSuccess(parser, \" n/TIM: Sustainability Marketing m/MKT3761D\", expectedMkt3761d);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .assertParseSuccess(parser, \" m/MKT3761D n/TIM: Sustainability Marketing \", expectedMkt3761d);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .assertParseSuccess(parser, \" m/MKT3761D n/TIM: Sustainability Marketing   \", expectedMkt3761d);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_missingName_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .assertParseFailure(parser, \" m/CS1231S\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_missingCode_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .assertParseFailure(parser, \" n/Discrete Structures\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_emptyName_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .assertParseFailure(parser, \" m/CS1231S n/\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_invalidCode_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .assertParseFailure(parser, \" m/CS123135S n/\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_invalidName_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .assertParseFailure(parser, \" m/CS1231S n/   \","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 67
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/module/DeleteModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.module.DeleteModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class DeleteModuleCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final DeleteModuleCommandParser parser \u003d new DeleteModuleCommandParser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        DeleteModuleCommand expectedCommand \u003d new DeleteModuleCommand(new Code(\"CS1231S\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" m/CS1231S\", expectedCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 18
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/module/EditModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.commons.core.Messages.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.module.EditModuleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class EditModuleCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final EditModuleCommandParser parser \u003d new EditModuleCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static EditModuleCommand editModuleCommandBuilder(Code code, Name name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditModuleCommand.EditModuleDescriptor descriptor \u003d new EditModuleCommand.EditModuleDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        descriptor.setName(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new EditModuleCommand(code, descriptor);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    // note for Module: all user input needs leading space"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, \" m/CS2030S n/Sample\", editModuleCommandBuilder(new Code(\"CS2030S\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Name(\"Sample\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_noFieldsProvided_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            EditModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_justModuleProvided_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \" m/CS1231S\", MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 40
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/task/AddTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class AddTaskCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final AddTaskCommandParser parser \u003d new AddTaskCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final Name name \u003d new Name(\"Sample\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final LocalDate date \u003d ParserUtil.parseValidDate(\"12/12/2020\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private final Code code \u003d new Code(\"CS1100\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final String remark \u003d \"Test\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        AddTaskCommand expectedCommand \u003d new AddTaskCommand(new Task(name, date, code, remark));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertParseSuccess(parser, \" n/Sample d/12/12/2020 m/CS1100 r/Test\", expectedCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void parse_codeNotPresent_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        AddTaskCommand expectedCommand \u003d new AddTaskCommand(new Task(name, date, null, remark));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertParseSuccess(parser, \" n/Sample d/12/12/2020 r/Test\", expectedCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void parse_remarkNotPresent_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        AddTaskCommand expectedCommand \u003d new AddTaskCommand(new Task(name, date, code, \"\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertParseSuccess(parser, \" n/Sample d/12/12/2020 m/CS1100\", expectedCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void parse_codeAndRemarkNotPresent_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        AddTaskCommand expectedCommand \u003d new AddTaskCommand(new Task(name, date, null, \"\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assertParseSuccess(parser, \" n/Sample d/12/12/2020\", expectedCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 9,
      "simonteozw": 41
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/task/DeleteTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.typical.TypicalIndexes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class DeleteTaskCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final DeleteTaskCommandParser parser \u003d new DeleteTaskCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteTaskCommand(TypicalIndexes.INDEX_FIRST));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, \"2\", new DeleteTaskCommand(TypicalIndexes.INDEX_SECOND));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 27
    }
  },
  {
    "path": "src/test/java/trackitnus/logic/parser/task/EditTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class EditTaskCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final EditTaskCommandParser parser \u003d new EditTaskCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static EditTaskCommand editTaskCommandBuilder(Index index, String name, String date, String code,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                                                         String remark) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        EditTaskCommand.EditTaskDescriptor descriptor \u003d new EditTaskCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        descriptor.setDate(ParserUtil.parseValidDate(date));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (code !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            descriptor.setCode(new Code(code));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        descriptor.setRemark(remark);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new EditTaskCommand(index, descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    // note all user input needs leading space"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, \" 1 m/CS2030S n/Sample d/20/11/2020\", editTaskCommandBuilder(INDEX_FIRST, \"Sample\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \"20/11/2020\", \"CS2030S\", \"\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, \" 1 m/CS2030S n/Sample d/20/11/2020 r/\", editTaskCommandBuilder(INDEX_FIRST,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \"Sample\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \"20/11/2020\", \"CS2030S\", \"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, \" 2 m/CS2030S n/Sample d/20/11/2020 r/sample\", editTaskCommandBuilder(INDEX_SECOND,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \"Sample\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            \"20/11/2020\", \"CS2030S\", \"sample\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseSuccess(parser, \" 3 m/CFG1002 n/Play games d/29/02/2020 r/sample\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            editTaskCommandBuilder(INDEX_THIRD,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                \"Play games\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                \"29/02/2020\", \"CFG1002\", \"sample\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void parse_noFieldsProvided_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            EditTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 56
    }
  },
  {
    "path": "src/test/java/trackitnus/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.model.Model.PREDICATE_SHOW_ALL_CONTACTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalContacts.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.TrackIterBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import trackitnus.testutil.typical.TypicalTask;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(new TrackIter(), new TrackIter(modelManager.getTrackIter()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        userPrefs.setTrackIterFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        userPrefs.setTrackIterFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setTrackIterFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setTrackIterFilePath(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setTrackIterFilePath_validPath_setsTrackIterFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        modelManager.setTrackIterFilePath(path);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(path, modelManager.getTrackIterFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void hasContact_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasContact(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void hasContact_contactNotInTrackIter_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(modelManager.hasContact(ALICE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void hasContact_contactInTrackIter_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        modelManager.addContact(ALICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(modelManager.hasContact(ALICE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void getFilteredContactList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredContactList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void getTaskIndex_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e modelManager.getTaskIndex(TypicalTask.get(0)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void getTaskIndex_validIndex_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            modelManager.addTask(TypicalTask.get(0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            assertEquals(Index.fromOneBased(1), modelManager.getTaskIndex(TypicalTask.get(0)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            Assertions.fail();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void getTaskIndex_rightIndex_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            modelManager.addTask(TypicalTask.get(0));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            modelManager.addTask(TypicalTask.get(1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            assertEquals(Index.fromOneBased(2), modelManager.getTaskIndex(TypicalTask.get(1)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            Assertions.fail();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void getTaskIndex_wrongIndex_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            modelManager.addTask(TypicalTask.get(0));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            modelManager.addTask(TypicalTask.get(1));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            assertNotEquals(Index.fromOneBased(1), modelManager.getTaskIndex(TypicalTask.get(1)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            Assertions.fail();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        TrackIter trackIter \u003d new TrackIterBuilder().withContact(ALICE).withContact(BENSON).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        TrackIter differentTrackIter \u003d new TrackIter();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        modelManager \u003d new ModelManager(trackIter, userPrefs);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(trackIter, userPrefs);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        // different trackIter -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTrackIter, userPrefs)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        String[] keywords \u003d ALICE.getName().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        modelManager.updateFilteredContactList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(trackIter, userPrefs)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        modelManager.updateFilteredContactList(PREDICATE_SHOW_ALL_CONTACTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        differentUserPrefs.setTrackIterFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(trackIter, differentUserPrefs)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 95,
      "UncleGrandpa925": 46,
      "simonteozw": 33
    }
  },
  {
    "path": "src/test/java/trackitnus/model/TrackIterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalTrackIter.getTypicalTrackIter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.ContactCommandTestUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.exceptions.DuplicateContactException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.ContactBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.typical.TypicalContacts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class TrackIterTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final TrackIter trackIter \u003d new TrackIter();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(Collections.emptyList(), trackIter.getContactList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e trackIter.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void resetData_withValidReadOnlyTrackIter_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        TrackIter newData \u003d getTypicalTrackIter();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(newData, trackIter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void resetData_withDuplicateContacts_throwsDuplicateContactException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        // Two contacts with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact editedAlice \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new ContactBuilder(TypicalContacts.ALICE).withTags(ContactCommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        List\u003cContact\u003e newContacts \u003d Arrays.asList(TypicalContacts.ALICE, editedAlice);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        TrackIterStub newData \u003d new TrackIterStub(newContacts);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(DuplicateContactException.class, () -\u003e trackIter.resetData(newData));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void hasContact_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e trackIter.hasContact(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void hasContact_contactNotInTrackIter_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(trackIter.hasContact(TypicalContacts.ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void hasContact_contactInTrackIter_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.addContact(TypicalContacts.ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(trackIter.hasContact(TypicalContacts.ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void hasContact_contactWithSameIdentityFieldsInTrackIter_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.addContact(TypicalContacts.ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact editedAlice \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new ContactBuilder(TypicalContacts.ALICE).withTags(ContactCommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(trackIter.hasContact(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void getContactList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e trackIter.getContactList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * A stub ReadOnlyTrackIter whose contacts list can violate interface constraints."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static class TrackIterStub implements ReadOnlyTrackIter {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        private final ObservableList\u003cContact\u003e contacts \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        private final ObservableList\u003cLesson\u003e lessons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        TrackIterStub(Collection\u003cContact\u003e contacts) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            this.contacts.setAll(contacts);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public ObservableList\u003cContact\u003e getContactList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return contacts;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "UncleGrandpa925": 59,
      "simonteozw": 6
    }
  },
  {
    "path": "src/test/java/trackitnus/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setTrackIterFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTrackIterFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "UncleGrandpa925": 4
    }
  },
  {
    "path": "src/test/java/trackitnus/model/commons/CodeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "class CodeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    void isValidCode() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(Code.isValidCode(\"CS1231S\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(Code.isValidCode(\"MKT3761D\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(Code.isValidCode(\"MA1101R\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(Code.isValidCode(\"MA1102\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(Code.isValidCode(\"CFG1101\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(Code.isValidCode(\"A3BBBB\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 19
    }
  },
  {
    "path": "src/test/java/trackitnus/model/commons/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.ContactBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        // different contact -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(predicate.test(new ContactBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(predicate.test(new ContactBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(predicate.test(new ContactBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(predicate.test(new ContactBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(predicate.test(new ContactBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(predicate.test(new ContactBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(predicate.test(new ContactBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "UncleGrandpa925": 10,
      "simonteozw": 2
    }
  },
  {
    "path": "src/test/java/trackitnus/model/commons/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(Name.isValidName(\"abc/def\")); // contains slash"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "UncleGrandpa925": 3
    }
  },
  {
    "path": "src/test/java/trackitnus/model/contact/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "UncleGrandpa925": 7
    }
  },
  {
    "path": "src/test/java/trackitnus/model/contact/ContactTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalContacts.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.ContactCommandTestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.ContactBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class ContactTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact contact \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e contact.getTags().remove(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void isSameContact() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(ALICE.isSameContact(ALICE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(ALICE.isSameContact(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact editedAlice \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new ContactBuilder(ALICE).withPhone(ContactCommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .withEmail(ContactCommandTestUtil.VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withName(ContactCommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new ContactBuilder(ALICE).withEmail(ContactCommandTestUtil.VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .withTags(ContactCommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new ContactBuilder(ALICE).withPhone(ContactCommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .withTags(ContactCommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new ContactBuilder(ALICE).withTags(ContactCommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact aliceCopy \u003d new ContactBuilder(ALICE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        // different contact -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact editedAlice \u003d new ContactBuilder(ALICE).withName(ContactCommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withPhone(ContactCommandTestUtil.VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withEmail(ContactCommandTestUtil.VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withTags(ContactCommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void test_toString_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact aliceCopy \u003d new ContactBuilder(ALICE).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(ALICE.toString(), \"Alice Pauline Phone: 94351253 Email: alice@example.com Tags: [friends]\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "UncleGrandpa925": 39,
      "simonteozw": 3
    }
  },
  {
    "path": "src/test/java/trackitnus/model/contact/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "UncleGrandpa925": 2
    }
  },
  {
    "path": "src/test/java/trackitnus/model/contact/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "UncleGrandpa925": 2
    }
  },
  {
    "path": "src/test/java/trackitnus/model/contact/UniqueContactListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalContacts.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.ContactCommandTestUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.exceptions.ContactNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.exceptions.DuplicateContactException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.ContactBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class UniqueContactListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final UniqueContactList uniqueContactList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void contains_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueContactList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void contains_contactNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(uniqueContactList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void contains_contactInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(uniqueContactList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void contains_contactWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact editedAlice \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new ContactBuilder(ALICE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .withTags(ContactCommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertTrue(uniqueContactList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void add_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueContactList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void add_duplicateContact_throwsDuplicateContactException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(DuplicateContactException.class, () -\u003e uniqueContactList.add(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContact_nullTargetContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueContactList.setContact(null, ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContact_nullEditedContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueContactList.setContact(ALICE, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContact_targetContactNotInList_throwsContactNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(ContactNotFoundException.class, () -\u003e uniqueContactList.setContact(ALICE, ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContact_editedContactIsSameContact_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.setContact(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        UniqueContactList expectedUniqueContactList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedUniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContact_editedContactHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Contact editedAlice \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new ContactBuilder(ALICE).withTags(ContactCommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.setContact(ALICE, editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        UniqueContactList expectedUniqueContactList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedUniqueContactList.add(editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContact_editedContactHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.setContact(ALICE, BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        UniqueContactList expectedUniqueContactList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedUniqueContactList.add(BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContact_editedContactHasNonUniqueIdentity_throwsDuplicateContactException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(DuplicateContactException.class, () -\u003e uniqueContactList.setContact(ALICE, BOB));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void remove_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueContactList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void remove_contactDoesNotExist_throwsContactNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(ContactNotFoundException.class, () -\u003e uniqueContactList.remove(ALICE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void remove_existingContact_removesContact() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.remove(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        UniqueContactList expectedUniqueContactList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContacts_nullUniqueContactList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueContactList.setContacts((UniqueContactList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContacts_uniqueContactList_replacesOwnListWithProvidedUniqueContactList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        UniqueContactList expectedUniqueContactList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedUniqueContactList.add(BOB);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.setContacts(expectedUniqueContactList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContacts_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueContactList.setContacts((List\u003cContact\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContacts_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        List\u003cContact\u003e contactList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        uniqueContactList.setContacts(contactList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        UniqueContactList expectedUniqueContactList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        expectedUniqueContactList.add(BOB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContacts_listWithDuplicateContacts_throwsDuplicateContactException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        List\u003cContact\u003e listWithDuplicateContacts \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(DuplicateContactException.class, () -\u003e uniqueContactList"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .setContacts(listWithDuplicateContacts));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            -\u003e uniqueContactList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "UncleGrandpa925": 85,
      "simonteozw": 5
    }
  },
  {
    "path": "src/test/java/trackitnus/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "UncleGrandpa925": 2
    }
  },
  {
    "path": "src/test/java/trackitnus/storage/JsonAdaptedContactTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.storage.JsonAdaptedContact.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalContacts.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class JsonAdaptedContactTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R/chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().orElseThrow(NullPointerException::new).toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().orElseThrow(NullPointerException::new).toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void toModelType_validContactDetails_returnsContact() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        JsonAdaptedContact contact \u003d new JsonAdaptedContact(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(BENSON, contact.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        JsonAdaptedContact contact \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new JsonAdaptedContact(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, contact::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        JsonAdaptedContact contact \u003d new JsonAdaptedContact(null, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, contact::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        JsonAdaptedContact contact \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new JsonAdaptedContact(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, contact::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//    @Test TODO: modify this to be a positive test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//    public void toModelType_nullPhone_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//        JsonAdaptedContact contact \u003d new JsonAdaptedContact(VALID_NAME, null, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, contact::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        JsonAdaptedContact contact \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new JsonAdaptedContact(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, contact::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//    @Test TODO: modify this to be a positive test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//        JsonAdaptedContact contact \u003d new JsonAdaptedContact(VALID_NAME, VALID_PHONE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, contact::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        JsonAdaptedContact contact \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            new JsonAdaptedContact(VALID_NAME, VALID_PHONE, VALID_EMAIL, invalidTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, contact::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "UncleGrandpa925": 35,
      "simonteozw": 6
    }
  },
  {
    "path": "src/test/java/trackitnus/storage/JsonSerializableTrackIterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.TrackIter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.typical.TypicalTrackIter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class JsonSerializableTrackIterTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTrackIterTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static final Path TYPICAL_CONTACTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTrackIter.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static final Path INVALID_CONTACT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidContactTrackIter.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static final Path DUPLICATE_CONTACT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateContactTrackIter.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void toModelType_typicalContactsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        JsonSerializableTrackIter dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_CONTACTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            JsonSerializableTrackIter.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        TrackIter trackIterFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        TrackIter typicalContactsTrackIter \u003d TypicalTrackIter.getTypicalTrackIterConst();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(trackIterFromFile, typicalContactsTrackIter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void toModelType_invalidContactFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        JsonSerializableTrackIter dataFromFile \u003d JsonUtil.readJsonFile(INVALID_CONTACT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            JsonSerializableTrackIter.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void toModelType_duplicateContacts_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        JsonSerializableTrackIter dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_CONTACT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            JsonSerializableTrackIter.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, JsonSerializableTrackIter.MESSAGE_DUPLICATE_CONTACT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "UncleGrandpa925": 25
    }
  },
  {
    "path": "src/test/java/trackitnus/storage/JsonTrackIterStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyTrackIter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.TrackIter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.typical.TypicalContacts;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.typical.TypicalTrackIter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class JsonTrackIterStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTrackIterStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void readTrackIter_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readTrackIter(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTrackIter\u003e readTrackIter(String filePath) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return new JsonTrackIterStorage(Paths.get(filePath)).readTrackIter(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertFalse(readTrackIter(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readTrackIter(\"notJsonFormatTrackIter.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void readTrackIter_invalidContactTrackIter_throwDataConversionException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readTrackIter(\"invalidContactTrackIter.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void readTrackIter_invalidAndValidContactTrackIter_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readTrackIter(\"invalidAndValidContactTrackIter\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            + \".json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void readAndSaveTrackIter_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempTrackIter.json\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        TrackIter original \u003d TypicalTrackIter.getTypicalTrackIter();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        JsonTrackIterStorage jsonTrackIterStorage \u003d new JsonTrackIterStorage(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        jsonTrackIterStorage.saveTrackIter(original, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ReadOnlyTrackIter readBack \u003d jsonTrackIterStorage.readTrackIter(filePath).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(original, new TrackIter(readBack));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        original.addContact(TypicalContacts.HOON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        original.removeContact(TypicalContacts.ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        jsonTrackIterStorage.saveTrackIter(original, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        readBack \u003d jsonTrackIterStorage.readTrackIter(filePath).get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(original, new TrackIter(readBack));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        original.addContact(TypicalContacts.IDA);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        jsonTrackIterStorage.saveTrackIter(original); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        readBack \u003d jsonTrackIterStorage.readTrackIter().get(); // file path not specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(original, new TrackIter(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void saveTrackIter_nullTrackIter_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveTrackIter(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Saves {@code trackIter} at the specified {@code filePath}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private void saveTrackIter(ReadOnlyTrackIter trackIter, String filePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new JsonTrackIterStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                .saveTrackIter(trackIter, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void saveTrackIter_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveTrackIter(new TrackIter(), null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "UncleGrandpa925": 44
    }
  },
  {
    "path": "src/test/java/trackitnus/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        userPrefs.setTrackIterFilePath(Paths.get(\"trackIter.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 117,
      "UncleGrandpa925": 6
    }
  },
  {
    "path": "src/test/java/trackitnus/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.typical.TypicalTrackIter.getTypicalTrackIter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyTrackIter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.TrackIter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        JsonTrackIterStorage trackIterStorage \u003d new JsonTrackIterStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        storageManager \u003d new StorageManager(trackIterStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void trackIterReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "         * {@link JsonTrackIterStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTrackIterStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        TrackIter original \u003d getTypicalTrackIter();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        storageManager.saveTrackIter(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        ReadOnlyTrackIter retrieved \u003d storageManager.readTrackIter().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertEquals(original, new TrackIter(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void getTrackIterFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        assertNotNull(storageManager.getTrackIterFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "UncleGrandpa925": 17
    }
  },
  {
    "path": "src/test/java/trackitnus/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/test/java/trackitnus/testutil/ContactUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.AddContactCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.EditContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * A utility class for Contact."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class ContactUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Returns an add command string for adding the {@code contact}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static String getAddCommand(Contact contact) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return AddContactCommand.COMMAND_WORD + \" \" + getContactDetails(contact);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Returns the part of command string for the given {@code contact}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static String getContactDetails(Contact contact) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        sb.append(PREFIX_NAME + contact.getName().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (contact.getPhone().isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            sb.append(PREFIX_PHONE + contact.getPhone().get().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        if (contact.getEmail().isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            sb.append(PREFIX_EMAIL + contact.getEmail().get().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        contact.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns the part of command string for the given {@code EditContactDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static String getEditContactDescriptorDetails(EditContactCommand.EditContactDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "UncleGrandpa925": 21,
      "simonteozw": 6
    }
  },
  {
    "path": "src/test/java/trackitnus/testutil/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyTrackIter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Path getTrackIterFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setTrackIterFilePath(Path trackIterFilePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void addContact(Contact contact) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ReadOnlyTrackIter getTrackIter() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setTrackIter(ReadOnlyTrackIter trackIt) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void deleteContact(Contact target) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setContact(Contact target, Contact editedContact) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public ObservableList\u003cContact\u003e getAllContacts() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cContact\u003e getFilteredContactList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void updateFilteredContactList(Predicate\u003cContact\u003e predicate) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean hasModule(Module task) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean hasModule(Code code) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Optional\u003cModule\u003e getModule(Code code) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setModule(Module target, Module editedTask) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void deleteLesson(Lesson target) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cLesson\u003e getDayUpcomingLessons(LocalDate date) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cLesson\u003e getModuleLessons(Code code) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    public ObservableList\u003cContact\u003e getModuleContacts(Code code) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nguyendqminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cTask\u003e getModuleTasks(Code code) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public ObservableList\u003cTask\u003e getOverdueTasks() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public ObservableList\u003cTask\u003e getFutureTasks() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ObservableList\u003cTask\u003e getDayUpcomingTasks(LocalDate date) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Optional\u003cLesson\u003e getLesson(Code code, Type type) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public void sortLesson() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Index getTaskIndex(Task task) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Index getLessonIndex(Lesson lesson) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public Index getModuleIndex(Module module) throws CommandException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 236,
      "simonteozw": 19,
      "nguyendqminh": 5
    }
  },
  {
    "path": "src/test/java/trackitnus/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/test/java/trackitnus/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Returns the middle index of the contact in the {@code model}\u0027s contact list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Index.fromOneBased(model.getFilteredContactList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Returns the last index of the contact in the {@code model}\u0027s contact list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Index.fromOneBased(model.getFilteredContactList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Returns the contact in the {@code model}\u0027s contact list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static Contact getContact(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return model.getFilteredContactList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "UncleGrandpa925": 8,
      "simonteozw": 3
    }
  },
  {
    "path": "src/test/java/trackitnus/testutil/builder/ContactBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.testutil.builder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * A utility class to help with building Contact objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class ContactBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Creates a {@code ContactBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ContactBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Initializes the ContactBuilder with the data of {@code contactToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ContactBuilder(Contact contactToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        name \u003d contactToCopy.getName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        phone \u003d contactToCopy.getPhone().get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        email \u003d contactToCopy.getEmail().get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(contactToCopy.getTags());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Sets the {@code Name} of the {@code Contact} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ContactBuilder withName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Contact} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ContactBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Sets the {@code Phone} of the {@code Contact} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ContactBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Sets the {@code Email} of the {@code Contact} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public ContactBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Contact build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new Contact(name, phone, email, tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "UncleGrandpa925": 18,
      "simonteozw": 9
    }
  },
  {
    "path": "src/test/java/trackitnus/testutil/builder/EditContactDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.testutil.builder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.EditContactCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * A utility class to help with building EditContactDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class EditContactDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final EditContactCommand.EditContactDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public EditContactDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        descriptor \u003d new EditContactCommand.EditContactDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public EditContactDescriptorBuilder(EditContactCommand.EditContactDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.descriptor \u003d new EditContactCommand.EditContactDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns an {@code EditContactDescriptor} with fields containing {@code contact}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public EditContactDescriptorBuilder(Contact contact) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        descriptor \u003d new EditContactCommand.EditContactDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        descriptor.setName(contact.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        descriptor.setPhone(contact.getPhone().orElse(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        descriptor.setEmail(contact.getEmail().orElse(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        descriptor.setTags(contact.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Sets the {@code Name} of the {@code EditContactDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public EditContactDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditContactDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public EditContactDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Sets the {@code Email} of the {@code EditContactDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public EditContactDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditContactDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public EditContactDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public EditContactCommand.EditContactDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "UncleGrandpa925": 28,
      "simonteozw": 2
    }
  },
  {
    "path": "src/test/java/trackitnus/testutil/builder/TrackIterBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.testutil.builder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.TrackIter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * A utility class to help with building TrackIter objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": " * {@code TrackIter ab \u003d new TrackIterBuilder().withContact(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class TrackIterBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private final TrackIter trackIter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public TrackIterBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter \u003d new TrackIter();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public TrackIterBuilder(TrackIter trackIter) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        this.trackIter \u003d trackIter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Adds a new {@code Contact} to the {@code TrackIter} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public TrackIterBuilder withContact(Contact contact) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        trackIter.addContact(contact);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public TrackIter build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return trackIter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "UncleGrandpa925": 16
    }
  },
  {
    "path": "src/test/java/trackitnus/testutil/typical/TypicalContacts.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.testutil.typical;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.commands.contact.ContactCommandTestUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.testutil.builder.ContactBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * A utility class containing a list of {@code Contact} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class TypicalContacts {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Contact ALICE \u003d new ContactBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Contact BENSON \u003d new ContactBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Contact CARL \u003d new ContactBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Contact DANIEL \u003d new ContactBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        .withEmail(\"cornelia@example.com\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Contact ELLE \u003d new ContactBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Contact FIONA \u003d new ContactBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Contact GEORGE \u003d new ContactBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Contact HOON \u003d new ContactBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Contact IDA \u003d new ContactBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    // Manually added - Contact\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Contact AMY \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        new ContactBuilder().withName(ContactCommandTestUtil.VALID_NAME_AMY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .withPhone(ContactCommandTestUtil.VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            .withEmail(ContactCommandTestUtil.VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .withTags(ContactCommandTestUtil.VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Contact BOB \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        new ContactBuilder().withName(ContactCommandTestUtil.VALID_NAME_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .withPhone(ContactCommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            .withEmail(ContactCommandTestUtil.VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            .withTags(ContactCommandTestUtil.VALID_TAG_HUSBAND, ContactCommandTestUtil.VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    private TypicalContacts() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static List\u003cContact\u003e get() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "UncleGrandpa925": 25,
      "simonteozw": 12
    }
  },
  {
    "path": "src/test/java/trackitnus/testutil/typical/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.testutil.typical;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "UncleGrandpa925": 5
    }
  },
  {
    "path": "src/test/java/trackitnus/testutil/typical/TypicalLessons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.testutil.typical;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.LessonDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class TypicalLessons {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Lesson CS1101S_LEC \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        new Lesson(new Code(\"CS1101S\"), Type.LEC, new LessonDateTime(DayOfWeek.Fri, LocalTime.NOON,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            LocalTime.NOON.plusHours(2)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Lesson CS1101S_TUT \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        new Lesson(new Code(\"CS1101S\"), Type.TUT, new LessonDateTime(DayOfWeek.Mon, LocalTime.NOON,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            LocalTime.NOON.plusHours(2)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Lesson CS2100_LAB \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        new Lesson(new Code(\"CS2100\"), Type.LAB, new LessonDateTime(DayOfWeek.Mon, LocalTime.MIDNIGHT.plusHours(9),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            LocalTime.MIDNIGHT.plusHours(10)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Lesson MA1101R_LEC \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        new Lesson(new Code(\"MA1101R\"), Type.LEC, new LessonDateTime(DayOfWeek.Thu, LocalTime.NOON.plusHours(4),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            LocalTime.NOON.plusHours(6)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Lesson GER1000H_SEC \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        new Lesson(new Code(\"GER1000H\"), Type.SEC, new LessonDateTime(DayOfWeek.Fri, LocalTime.NOON.plusHours(2),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            LocalTime.NOON.plusHours(4)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static final Lesson CS2030S_REC \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        new Lesson(new Code(\"CS2030S\"), Type.REC, new LessonDateTime(DayOfWeek.Wed, LocalTime.NOON,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            LocalTime.NOON.plusHours(1)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static List\u003cLesson\u003e get() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Arrays.asList(SampleDataUtil.getSampleLessons());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static Lesson get(int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return get().get(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 43
    }
  },
  {
    "path": "src/test/java/trackitnus/testutil/typical/TypicalModule.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.testutil.typical;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class TypicalModule {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static List\u003cModule\u003e get() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Arrays.asList(SampleDataUtil.getSampleModules());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 13
    }
  },
  {
    "path": "src/test/java/trackitnus/testutil/typical/TypicalTask.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.testutil.typical;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Code;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.commons.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class TypicalTask {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static List\u003cTask\u003e get() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Arrays.asList(SampleDataUtil.getSampleTasks());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static List\u003cTask\u003e getConst() { // the dates of tasks must be constant for JSON testing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return Arrays.asList("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Task(new Name(\"Plan for Alex\u0027s birthday\"), ParserUtil.parseValidDate(\"12/12/2020\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                null, \"Buy a cake\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Task(new Name(\"Buy Mooncakes for Mum\"), ParserUtil.parseValidDate(\"03/11/2020\"), null,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                \"\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Task(new Name(\"Do Tutorial\"), ParserUtil.parseValidDate(\"05/11/2020\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                new Code(\"CS2100\"), \"\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Task(new Name(\"Do this week\u0027s Mission\"), ParserUtil.parseValidDate(\"03/11/2020\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                new Code(\"CS1101S\"), \"Recursion\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Task(new Name(\"Work on the final report\"), ParserUtil.parseValidDate(\"02/11/2020\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                new Code(\"GER1000H\"), \"min 500 words\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Task(new Name(\"Study for Final Exam\"), ParserUtil.parseValidDate(\"05/11/2020\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                new Code(\"MA1101R\"), \"Focus on Diagonalisation\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Task(new Name(\"Prepare for v1.3 Demo\"), ParserUtil.parseValidDate(\"01/11/2020\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                new Code(\"CS2103T\"), \"Ensure app runs smoothly\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            new Task(new Name(\"Code Project 2\"), ParserUtil.parseValidDate(\"20/11/2020\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                new Code(\"CS2030S\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "                \"(deadline is at the end of reading week)\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static Task get(int index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return get().get(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 42
    }
  },
  {
    "path": "src/test/java/trackitnus/testutil/typical/TypicalTrackIter.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.testutil.typical;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.TrackIter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.contact.Contact;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.lesson.Lesson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "public class TypicalTrackIter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * Returns an {@code TrackIter} with all the typical data"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static TrackIter getTypicalTrackIter() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        TrackIter track \u003d new TrackIter();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (Contact contact : TypicalContacts.get()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            track.addContact(contact);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (Module module : TypicalModule.get()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            track.addModule(module);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (Task task : TypicalTask.get()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            track.addTask(task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (Lesson lesson : TypicalLessons.get()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            track.addLesson(lesson);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return track;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * @return an constant {@code TrackIter} for JSON testing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     * all the underlying data will be static instead of dynamic data like getTypicalTrackIter"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public static TrackIter getTypicalTrackIterConst() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        TrackIter track \u003d new TrackIter();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (Contact contact : TypicalContacts.get()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            track.addContact(contact);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (Module module : TypicalModule.get()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            track.addModule(module);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (Task task : TypicalTask.getConst()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            track.addTask(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        for (Lesson lesson : TypicalLessons.get()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "            track.addLesson(lesson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "        return track;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "UncleGrandpa925": 50
    }
  },
  {
    "path": "src/test/java/trackitnus/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "UncleGrandpa925": 3
    }
  },
  {
    "path": "src/test/java/trackitnus/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "package trackitnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import static trackitnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "import trackitnus.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "UncleGrandpa925": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "\u003c?import trackitnus.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "UncleGrandpa925": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "\u003c?import trackitnus.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" type\u003d\"TestFxmlObject\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "UncleGrandpa925"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "UncleGrandpa925": 3
    }
  }
]
